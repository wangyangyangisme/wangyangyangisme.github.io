<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blank</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyangyangisme.github.io/"/>
  <updated>2021-06-03T16:23:44.000Z</updated>
  <id>http://wangyangyangisme.github.io/</id>
  
  <author>
    <name>Blank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s暴露服务的方式</title>
    <link href="http://wangyangyangisme.github.io/posts/4353b432/"/>
    <id>http://wangyangyangisme.github.io/posts/4353b432/</id>
    <published>2021-06-03T16:23:44.000Z</published>
    <updated>2021-06-03T16:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s暴露服务的方式"><a href="#k8s暴露服务的方式" class="headerlink" title="k8s暴露服务的方式"></a>k8s暴露服务的方式</h1><h2 id="hostNetwork-true"><a href="#hostNetwork-true" class="headerlink" title="hostNetwork: true"></a>hostNetwork: true</h2><p>这是一种直接定义Pod网络的方式。</p><p>如果在Pod中使用<code>hostNetwork:true</code>配置的话，在这种pod中运行的应用程序可以直接看到pod启动的主机的网络接口。在主机的所有网络接口上都可以访问到该应用程序。以下是使用主机网络的pod的示例定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">influxdb</span></span><br></pre></td></tr></table></figure><p>部署该Pod：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f influxdb-hostnetwork.yml</span></span><br></pre></td></tr></table></figure><p>访问该pod所在主机的8086端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://$POD_IP:8086/ping</span><br></pre></td></tr></table></figure><p>将看到204 No Content的204返回码，说明可以正常访问。</p><p>注意每次启动这个Pod的时候都可能被调度到不同的节点上，所有外部访问Pod的IP也是变化的，而且调度Pod的时候还需要考虑是否与宿主机上的端口冲突，因此一般情况下除非您知道需要某个特定应用占用特定宿主机上的特定端口时才使用<code>hostNetwork: true</code>的方式。</p><p>这种Pod的网络模式有一个用处就是可以将网络插件包装在Pod中然后部署在每个宿主机上，这样该Pod就可以控制该宿主机上的所有网络。</p><h2 id="hostPort"><a href="#hostPort" class="headerlink" title="hostPort"></a>hostPort</h2><p>这是一种直接定义Pod网络的方式。</p><p><code>hostPort</code>是直接将容器的端口与所调度的节点上的端口路由，这样用户就可以通过宿主机的IP加上来访问Pod了，如:。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8086</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">8086</span></span><br></pre></td></tr></table></figure><p>这样做有个缺点，因为Pod重新调度的时候该Pod被调度到的宿主机可能会变动，这样就变化了，用户必须自己维护一个Pod与所在宿主机的对应关系。</p><p>这种网络方式可以用来做 nginx <a href="https://github.com/kubernetes/ingress/tree/master/controllers/nginx">Ingress controller</a>。外部流量都需要通过kubenretes node节点的80和443端口。</p><h2 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h2><p>NodePort在kubenretes里是一个广泛应用的服务暴露方式。Kubernetes中的service默认情况下都是使用的<code>ClusterIP</code>这种类型，这样的service会产生一个ClusterIP，这个IP只能在集群内部访问，要想让外部能够直接访问service，需要将service type修改为 <code>nodePort</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8086</span></span><br></pre></td></tr></table></figure><p>同时还可以给service指定一个<code>nodePort</code>值，范围是30000-32767，这个值在API server的配置文件中，用<code>--service-node-port-range</code>定义。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">influxdb</span></span><br></pre></td></tr></table></figure><p>集群外就可以使用kubernetes任意一个节点的IP加上30000端口访问该服务了。kube-proxy会自动将流量以round-robin的方式转发给该service的每一个pod。</p><p>这种服务暴露方式，无法让你指定自己想要的应用常用端口，不过可以在集群上再部署一个反向代理作为流量入口。</p><h2 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h2><p><code>LoadBalancer</code> 只能在service上定义。这是公有云提供的负载均衡器，如AWS、Azure、CloudStack、GCE等。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">influxdb</span></span><br></pre></td></tr></table></figure><p>查看服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get svc influxdb</span></span><br><span class="line">NAME       CLUSTER-IP     EXTERNAL-IP     PORT(S)          AGE</span><br><span class="line">influxdb   10.97.121.42   10.13.242.236   8086:30051/TCP   39s</span><br></pre></td></tr></table></figure><p>内部可以使用ClusterIP加端口来访问服务，如19.97.121.42:8086。</p><p>外部可以用以下两种方式访问该服务：</p><ul><li>使用任一节点的IP加30051端口访问该服务</li><li>使用<code>EXTERNAL-IP</code>来访问，这是一个VIP，是云供应商提供的负载均衡器IP，如10.13.242.236:8086。</li></ul><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p><code>Ingress</code>是自kubernetes1.1版本后引入的资源类型。必须要部署<a href="https://github.com/kubernetes/ingress/tree/master/controllers/nginx">Ingress controller</a>才能创建Ingress资源，Ingress controller是以一种插件的形式提供。Ingress controller 是部署在Kubernetes之上的Docker容器。它的Docker镜像包含一个像nginx或HAProxy的负载均衡器和一个控制器守护进程。控制器守护程序从Kubernetes接收所需的Ingress配置。它会生成一个nginx或HAProxy配置文件，并重新启动负载平衡器进程以使更改生效。换句话说，Ingress controller是由Kubernetes管理的负载均衡器。</p><p>Kubernetes Ingress提供了负载平衡器的典型特性：HTTP路由，粘性会话，SSL终止，SSL直通，TCP和UDP负载平衡等。目前并不是所有的Ingress controller都实现了这些功能，需要查看具体的Ingress controller文档。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">influxdb.kube.example.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">influxdb</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">8086</span></span><br></pre></td></tr></table></figure><p>外部访问URL <a href="http://influxdb.kube.example.com/ping">http://influxdb.kube.example.com/ping</a> 访问该服务，入口就是80端口，然后Ingress controller直接将流量转发给后端Pod，不需再经过kube-proxy的转发，比LoadBalancer方式更高效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说Ingress是一个非常灵活和越来越得到厂商支持的服务暴露方式，包括Nginx、HAProxy、Traefik，还有各种Service Mesh，而其它服务暴露方式可以更适用于服务调试、特殊应用的部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;k8s暴露服务的方式&quot;&gt;&lt;a href=&quot;#k8s暴露服务的方式&quot; class=&quot;headerlink&quot; title=&quot;k8s暴露服务的方式&quot;&gt;&lt;/a&gt;k8s暴露服务的方式&lt;/h1&gt;&lt;h2 id=&quot;hostNetwork-true&quot;&gt;&lt;a href=&quot;#hostN
      
    
    </summary>
    
    
      <category term="microservice" scheme="http://wangyangyangisme.github.io/categories/microservice/"/>
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/categories/microservice/k8s/"/>
    
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s集群三种IP</title>
    <link href="http://wangyangyangisme.github.io/posts/a4bf172f/"/>
    <id>http://wangyangyangisme.github.io/posts/a4bf172f/</id>
    <published>2021-06-03T15:54:44.000Z</published>
    <updated>2021-06-03T15:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s集群三种IP"><a href="#k8s集群三种IP" class="headerlink" title="k8s集群三种IP"></a>k8s集群三种IP</h1><p>Kubernetes集群里有三种IP地址，分别如下：</p><ul><li>Node IP：Node节点的IP地址，即物理网卡的IP地址。</li><li>Pod IP：Pod的IP地址，即docker容器的IP地址，此为虚拟IP地址。</li><li>Cluster IP：Service的IP地址，此为虚拟IP地址。</li></ul><h2 id="Node-IP"><a href="#Node-IP" class="headerlink" title="Node IP"></a>Node IP</h2><p>可以是物理机的IP（也可能是虚拟机IP）。每个Service都会在Node节点上开通一个端口，外部可以通过NodeIP:NodePort即可访问Service里的Pod,和我们访问服务器部署的项目一样，IP:端口/项目名</p><p>在kubernetes查询Node IP</p><ol><li>kubectl get nodes</li><li>kubectl describe node nodeName</li><li>显示出来的InternalIP就是NodeIP</li></ol><h2 id="Pod-IP"><a href="#Pod-IP" class="headerlink" title="Pod IP"></a>Pod IP</h2><p>Pod IP是每个Pod的IP地址，他是Docker Engine根据docker网桥的IP地址段进行分配的，通常是一个虚拟的二层网络</p><ul><li>同Service下的pod可以直接根据PodIP相互通信</li><li>不同Service下的pod在集群间pod通信要借助于 cluster ip</li><li>pod和集群外通信，要借助于node ip</li></ul><p>在kubernetes查询Pod IP</p><ol><li>kubectl get pods</li><li>kubectl describe pod podName</li></ol><h2 id="Cluster-IP"><a href="#Cluster-IP" class="headerlink" title="Cluster IP"></a>Cluster IP</h2><p>Service的IP地址，此为虚拟IP地址。外部网络无法ping通，只有kubernetes集群内部访问使用。</p><p>在kubernetes查询Cluster IP<br>kubectl -n 命名空间 get Service即可看到ClusterIP</p><p>Cluster IP是一个虚拟的IP，但更像是一个伪造的IP网络，原因有以下几点</p><ol><li>Cluster IP仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配P地址</li><li>Cluster IP无法被ping，他没有一个“实体网络对象”来响应</li><li>Cluster IP只能结合Service Port组成一个具体的通信端口，单独的Cluster IP不具备通信的基础，并且他们属于Kubernetes集群这样一个封闭的空间。</li><li>在不同Service下的pod节点在集群间相互访问可以通过Cluster IP</li></ol><h2 id="三种IP网络间的通信"><a href="#三种IP网络间的通信" class="headerlink" title="三种IP网络间的通信"></a>三种IP网络间的通信</h2><p>service地址和pod地址在不同网段，service地址为虚拟地址，不配在pod上或主机上，外部访问时，先到Node节点网络，再转到service网络，最后代理给pod网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;k8s集群三种IP&quot;&gt;&lt;a href=&quot;#k8s集群三种IP&quot; class=&quot;headerlink&quot; title=&quot;k8s集群三种IP&quot;&gt;&lt;/a&gt;k8s集群三种IP&lt;/h1&gt;&lt;p&gt;Kubernetes集群里有三种IP地址，分别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No
      
    
    </summary>
    
    
      <category term="microservice" scheme="http://wangyangyangisme.github.io/categories/microservice/"/>
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/categories/microservice/k8s/"/>
    
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s端口解析</title>
    <link href="http://wangyangyangisme.github.io/posts/3b3f4264/"/>
    <id>http://wangyangyangisme.github.io/posts/3b3f4264/</id>
    <published>2021-06-03T15:52:44.000Z</published>
    <updated>2021-06-03T15:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s端口解析"><a href="#k8s端口解析" class="headerlink" title="k8s端口解析"></a>k8s端口解析</h1><h2 id="nodePort"><a href="#nodePort" class="headerlink" title="nodePort"></a>nodePort</h2><p>外部流量访问k8s集群中service入口的一种方式（另一种方式是LoadBalancer），即nodeIP:nodePort是提供给外部流量访问k8s集群中service的入口。比如外部用户要访问k8s集群中的一个Web应用，那么我们可以配置对应service的type=NodePort，nodePort=30001。其他用户就可以通过浏览器<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fnode%3A30001">http://node:30001</a>访问到该web服务。而数据库等服务可能不需要被外界访问，只需被内部服务访问即可，那么我们就不必设置service的NodePort。</p><h2 id="port"><a href="#port" class="headerlink" title="port"></a>port</h2><p>k8s集群内部服务之间访问service的入口。即clusterIP:port是service暴露在clusterIP上的端口。mysql容器暴露了3306端口，集群内其他容器通过33306端口访问mysql服务，但是外部流量不能访问mysql服务，因为mysql服务没有配置NodePort。对应的service.yaml如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">mysql-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">33306</span></span><br><span class="line">   <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line"> <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pod</span></span><br></pre></td></tr></table></figure><h2 id="targetPort"><a href="#targetPort" class="headerlink" title="targetPort"></a>targetPort</h2><p>容器的端口（最终的流量端口）。targetPort是pod上的端口，从port和nodePort上来的流量，经过kube-proxy流入到后端pod的targetPort上，最后进入容器。</p><p>制作容器时暴露的端口一致（使用DockerFile中的EXPOSE），例如官方的nginx（参考<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fnginxinc%2Fdocker-nginx">DockerFile</a>）暴露80端口。 对应的service.yaml如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">NodePort</span>         <span class="string">//</span> <span class="string">有配置NodePort，外部流量可访问k8s中的服务</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">30080</span>          <span class="string">//</span> <span class="string">服务访问端口</span></span><br><span class="line">   <span class="attr">targetPort:</span> <span class="number">80</span>       <span class="string">//</span> <span class="string">容器端口</span></span><br><span class="line">   <span class="attr">nodePort:</span> <span class="number">30001</span>      <span class="string">//</span> <span class="string">NodePort</span></span><br><span class="line"> <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pod</span></span><br></pre></td></tr></table></figure><h2 id="hostPort"><a href="#hostPort" class="headerlink" title="hostPort"></a>hostPort</h2><p>这是一种直接定义Pod网络的方式。hostPort是直接将容器的端口与所调度的节点上的端口路由，这样用户就可以通过宿主机的IP加上来访问Pod了，如:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">influxdb</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8086</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">8086</span></span><br></pre></td></tr></table></figure><p>这样做有个缺点，因为Pod重新调度的时候该Pod被调度到的宿主机可能会变动，这样就变化了，用户必须自己维护一个Pod与所在宿主机的对应关系。</p><p>使用了 hostPort 的容器只能调度到端口不冲突的 Node 上，除非有必要（比如运行一些系统级的 daemon 服务），不建议使用端口映射功能。如果需要对外暴露服务，建议使用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Ffeisky.gitbooks.io%2Fkubernetes%2Fconcepts%2Fservice.html%23Service">NodePort Service</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，port和nodePort都是service的端口，前者暴露给k8s集群内部服务访问，后者暴露给k8s集群外部流量访问。从上两个端口过来的数据都需要经过反向代理kube-proxy，流入后端pod的targetPort上，最后到达pod内的容器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;k8s端口解析&quot;&gt;&lt;a href=&quot;#k8s端口解析&quot; class=&quot;headerlink&quot; title=&quot;k8s端口解析&quot;&gt;&lt;/a&gt;k8s端口解析&lt;/h1&gt;&lt;h2 id=&quot;nodePort&quot;&gt;&lt;a href=&quot;#nodePort&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="microservice" scheme="http://wangyangyangisme.github.io/categories/microservice/"/>
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/categories/microservice/k8s/"/>
    
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ArgoCD持续部署</title>
    <link href="http://wangyangyangisme.github.io/posts/a7f60f63/"/>
    <id>http://wangyangyangisme.github.io/posts/a7f60f63/</id>
    <published>2021-06-01T14:56:44.000Z</published>
    <updated>2021-06-01T14:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArgoCD持续部署"><a href="#ArgoCD持续部署" class="headerlink" title="ArgoCD持续部署"></a>ArgoCD持续部署</h1><p>Argo CD是用于Kubernetes的声明性GitOps连续交付工具。</p><p>Argo CD实现为kubernetes控制器，它持续监视运行中的应用程序，并将当前的活动状态与期望的目标状态进行比较(如Git repo中指定的那样)。如果已部署的应用程序的活动状态偏离了目标状态，则认为是OutOfSync。Argo CD报告和可视化这些差异，同时提供了方法，可以自动或手动将活动状态同步回所需的目标状态。在Git repo中对所需目标状态所做的任何修改都可以自动应用并反映到指定的目标环境中。</p><h2 id="安装ArgoCD"><a href="#安装ArgoCD" class="headerlink" title="安装ArgoCD"></a>安装ArgoCD</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace argocd</span><br><span class="line">kubectl delete namespace argocd</span><br><span class="line">wget https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml -O argocd.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改dev-server镜像</span></span><br><span class="line"> containers:</span><br><span class="line">      - command:</span><br><span class="line">        - /shared/argocd-dex</span><br><span class="line">        - rundex</span><br><span class="line">        image: ghcr.io/dexidp/dex:latest  #修改</span><br><span class="line"></span><br><span class="line">kubectl apply -n argocd -f argocd.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看argocd</span></span><br><span class="line">kubectl get all -n argocd</span><br><span class="line">kubectl get po -n argocd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看端口</span></span><br><span class="line">kubectl get svc -n argocd </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取默认登录用户admin密码</span></span><br><span class="line">kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d&#x27;/&#x27; -f 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码 password</span></span><br><span class="line">kubectl -n argocd patch secret argocd-secret -p &#x27;&#123;&quot;stringData&quot;: &#123;&quot;admin.password&quot;: &quot;$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa&quot;,&quot;admin.passwordMtime&quot;: &quot;&#x27;$(date +%FT%T%Z)&#x27;&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="访问web"><a href="#访问web" class="headerlink" title="访问web"></a>访问web</h2><p>默认情况下，Argo CD API服务器未使用外部IP公开。要访问API服务器，请选择以下技术之一以公开Argo CD API服务器</p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward svc/argocd-server -n argocd --address 0.0.0.0 8080:443</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 节点地址访问 192.168.1.106:8080 admin password</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟地址访问 192.168.1.200:8080 admin password</span></span><br></pre></td></tr></table></figure><h3 id="修改service端口"><a href="#修改service端口" class="headerlink" title="修改service端口"></a>修改service端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将service的<span class="built_in">type</span>类型改为NodePort</span></span><br><span class="line">kubectl edit -n argocd svc argocd-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改完后通过以下命令查看端口</span></span><br><span class="line">kubectl get svc -n argocd</span><br><span class="line">root@k8s-master-01:~# kubectl get svc -n argocd </span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">argocd-dex-server       ClusterIP   10.103.253.111   &lt;none&gt;        5556/TCP,5557/TCP,5558/TCP   18m</span><br><span class="line">argocd-metrics          ClusterIP   10.110.29.42     &lt;none&gt;        8082/TCP                     18m</span><br><span class="line">argocd-redis            ClusterIP   10.98.93.98      &lt;none&gt;        6379/TCP                     18m</span><br><span class="line">argocd-repo-server      ClusterIP   10.110.254.252   &lt;none&gt;        8081/TCP,8084/TCP            18m</span><br><span class="line">argocd-server           NodePort    10.97.97.200     &lt;none&gt;        80:31281/TCP,443:30211/TCP   18m</span><br><span class="line">argocd-server-metrics   ClusterIP   10.108.77.47     &lt;none&gt;        8083/TCP                     18m</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问 192.168.1.106:31281 admin password</span></span><br></pre></td></tr></table></figure><h2 id="安装argo客户端"><a href="#安装argo客户端" class="headerlink" title="安装argo客户端"></a>安装argo客户端</h2><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap argoproj/tap</span><br><span class="line">brew install argoproj/tap/argocd</span><br></pre></td></tr></table></figure><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VERSION=$(curl --silent &quot;https://api.github.com/repos/argoproj/argo-cd/releases/latest&quot; | grep &#x27;&quot;tag_name&quot;&#x27; | sed -E &#x27;s/.*&quot;([^&quot;]+)&quot;.*/\1/&#x27;)</span><br><span class="line">curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/argocd</span><br></pre></td></tr></table></figure><h3 id="登录argo"><a href="#登录argo" class="headerlink" title="登录argo"></a>登录argo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">argocd login 192.168.1.106:32178 </span><br><span class="line">admin</span><br><span class="line">password</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">argocd account update-password</span><br><span class="line"></span><br><span class="line">argocd account update-password \</span><br><span class="line">   --account admin \</span><br><span class="line">   --current-password password \</span><br><span class="line">   --new-password 123456</span><br><span class="line">Password updated</span><br><span class="line">Context &#x27;172.17.100.50:32109&#x27; updated</span><br></pre></td></tr></table></figure><h3 id="注册集群"><a href="#注册集群" class="headerlink" title="注册集群"></a>注册集群</h3><p>此步骤将群集的凭据注册到Argo CD，仅在部署到外部群集时才需要。在内部进行部署（到与Argo CD运行所在的同一集群）时，应将https：<a href="https://kubernetes.default.xn--svck8s-ym9is15hjba0855bca192bm1o/">//kubernetes.default.svc</a> 用作应用程序的K8s API服务器地址。</p><p>首先列出当前kubconfig中的所有集群上下文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master-01:~# kubectl config get-contexts</span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   </span><br><span class="line">root@k8s-master-01:~# argocd cluster add Kubernetes-admin@kubernetes</span><br></pre></td></tr></table></figure><p>上面的命令将ServiceAccount（argocd-manager）安装到该kubectl上下文的kube-system命名空间中，并将服务帐户绑定到管理员级别的ClusterRole。Argo CD使用此服务帐户令牌执行其管理任务（即部署/监视）。</p><p>可以修改argocd-manager-role角色的规则，使其仅具有对一组有限的名称空间，组和种类的创建，更新，修补，删除特权。但是，在群集作用域中，获取，列出，监视特权是Argo CD起作用所必需的。</p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><blockquote><p>先要搭建ci环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull alpine:3.12</span><br><span class="line">docker login -u admin 192.168.1.109:8800 -p Harbor12345</span><br><span class="line">docker tag alpine:3.12 192.168.1.109:8800/library/alpine:3.12</span><br><span class="line">docker push 192.168.1.109:8800/library/alpine:3.12</span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure><p>新建一个仓库test</p><p>test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;hello world!&quot;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go.mod</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module test</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.15</span></span><br><span class="line"></span><br><span class="line">require ()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM 192.168.1.109:8800/library/alpine:3.12</span><br><span class="line">WORKDIR /</span><br><span class="line">COPY test .</span><br><span class="line"><span class="meta">#</span><span class="bash">COPY conf conf</span></span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/test&quot;]</span><br></pre></td></tr></table></figure><p>Makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> platform.mk</span><br><span class="line"></span><br><span class="line">NAME=test</span><br><span class="line">IMAGE_NAME=didong/<span class="variable">$(NAME)</span></span><br><span class="line">GIT_COMMIT=<span class="variable">$(<span class="built_in">shell</span> git rev-parse --short HEAD)</span></span><br><span class="line">GIT_TAG=<span class="variable">$(<span class="built_in">shell</span> git describe --abbrev=0 --tags --always --match &quot;v*&quot;)</span></span><br><span class="line">GIT_IMPORT=luobo/lbck/cmd</span><br><span class="line">BUILD_DATE=<span class="variable">$(<span class="built_in">shell</span> date +%s)</span></span><br><span class="line">LDFLAGS=-X <span class="variable">$(GIT_IMPORT)</span>.BuildDate=<span class="variable">$(BUILD_DATE)</span> -X <span class="variable">$(GIT_IMPORT)</span>.GitCommit=<span class="variable">$(GIT_COMMIT)</span> -X <span class="variable">$(GIT_IMPORT)</span>.GitTag=<span class="variable">$(GIT_TAG)</span></span><br><span class="line">IMAGE_TAG=<span class="variable">$(GIT_TAG)</span>-<span class="variable">$(GIT_COMMIT)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: build clean vet test docker</span></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">CGO_ENABLED=<span class="variable">$(CGO_ENABLED)</span> GOOS=<span class="variable">$(GOOS)</span> go build -a -installsuffix cgo -ldflags <span class="string">&quot;-s -w $&#123;LDFLAGS&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">docker:</span></span><br><span class="line">docker build -t <span class="variable">$(IMAGE_NAME)</span>:<span class="variable">$(IMAGE_TAG)</span> .</span><br><span class="line">docker tag <span class="variable">$(IMAGE_NAME)</span>:<span class="variable">$(IMAGE_TAG)</span> <span class="variable">$(IMAGE_NAME)</span>:latest</span><br><span class="line"><span class="comment">#docker push $(IMAGE_NAME):$(IMAGE_TAG)</span></span><br><span class="line"><span class="comment">#docker push $(IMAGE_NAME):latest</span></span><br><span class="line"></span><br><span class="line"><span class="section">vet:</span></span><br><span class="line">go vet ./...</span><br><span class="line"></span><br><span class="line"><span class="section">test: vet</span></span><br><span class="line">go test -v ./...</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf ./test</span><br></pre></td></tr></table></figure><p>platform.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PLATS = linux windows</span><br><span class="line">.PHONY : none <span class="variable">$(PLATS)</span></span><br><span class="line"></span><br><span class="line">CGO_ENABLED := 1</span><br><span class="line">GOOS := windows</span><br><span class="line">GOARCH := amd64</span><br><span class="line"></span><br><span class="line">linux : CGO_ENABLED := 0</span><br><span class="line">linux : GOOS := linux</span><br><span class="line"></span><br><span class="line">windows linux :</span><br><span class="line"><span class="variable">$(MAKE)</span> build CGO_ENABLED=<span class="string">&quot;<span class="variable">$(CGO_ENABLED)</span>&quot;</span> GOOS=<span class="string">&quot;<span class="variable">$(GOOS)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>.drone.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">golang:1.15</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/go</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/.cache/go-build</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CGO_ENABLED:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">GO111MODULE:</span> <span class="string">on</span></span><br><span class="line">      <span class="attr">GOPROXY:</span> <span class="string">https://mirrors.aliyun.com/goproxy,direct</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$DRONE_BUILD_CREATED</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">make</span> <span class="string">linux</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">publish</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Harbor12345</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./Dockerfile</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.109</span><span class="string">:8800/library/test</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.109</span><span class="string">:8800</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;DRONE_TAG=dev&#125;-$&#123;DRONE_COMMIT:0:8&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache</span></span><br><span class="line">    <span class="attr">host:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp/drone-cache/go</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">gocache</span></span><br><span class="line">    <span class="attr">host:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp/drone-cache/go_build</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>argo/test-svr.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.109</span><span class="string">:8800/library/test:latest</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">server</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">svc:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>创建命名空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> test-svr.yml中定义的</span></span><br><span class="line">kubectl create namespace test</span><br></pre></td></tr></table></figure><p>添加仓库地址，Settings → Repositories，点击 <code>Connect Repo using HTTPS</code> </p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2021-06-03_213452.png" alt=""></p><p>创建app，点击<code>NEW APP</code></p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2021-06-03_213745.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2021-06-03_213943.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2021-06-03_214035.png" alt=""></p><p>Kubernetes 中有两种级联删除的模式：background 模式和 foreground 模式。</p><p>Background 级联删除,在 background 级联删除 模式下，Kubernetes 会立即删除 Owner 对象，然后垃圾收集器会在后台删除这些 Dependent。</p><p>Foreground 级联删除m在 foreground 级联删除 模式下，根对象首先进入 “删除中” 状态。该对象会设置deletionTimestamp 字段对象的 metadata.finalizers 字段包含了值 “foregroundDeletion”，对象仍然可以通过 REST API 可见，一旦被设置为 “删除中” 状态，垃圾收集器会删除对象的所有 Dependent。垃圾收集器删除了所有 “Blocking” 的 Dependent（对象的 ownerReference.blockOwnerDeletion=true）之后，它会删除 Owner 对象。<br>如果一个对象的ownerReferences 字段被一个 Controller（例如 Deployment 或 ReplicaSet）设置，blockOwnerDeletion 会被自动设置，没必要手动修改这个字段。</p><p>如果删除对象时，不自动删除它的 Dependent，这些 Dependent 被称作是原对象的 孤儿(Orphan),可以使用以下命令实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete statefulset  -n de2ca8d1-94b4-4faa-8077-e9374ca9db4e 5bagk2rivkjno --cascade=false</span><br></pre></td></tr></table></figure><p><a href="https://damonyi.cc/2020/11/17/kubernetes-apps删除流程/">kubernetes apps删除流程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ArgoCD持续部署&quot;&gt;&lt;a href=&quot;#ArgoCD持续部署&quot; class=&quot;headerlink&quot; title=&quot;ArgoCD持续部署&quot;&gt;&lt;/a&gt;ArgoCD持续部署&lt;/h1&gt;&lt;p&gt;Argo CD是用于Kubernetes的声明性GitOps连续交付工具。&lt;
      
    
    </summary>
    
    
      <category term="microservice" scheme="http://wangyangyangisme.github.io/categories/microservice/"/>
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/categories/microservice/k8s/"/>
    
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/tags/k8s/"/>
    
      <category term="argocd" scheme="http://wangyangyangisme.github.io/tags/argocd/"/>
    
  </entry>
  
  <entry>
    <title>k8s高可用集群部署</title>
    <link href="http://wangyangyangisme.github.io/posts/438c4ffb/"/>
    <id>http://wangyangyangisme.github.io/posts/438c4ffb/</id>
    <published>2021-05-31T13:32:44.000Z</published>
    <updated>2021-05-31T13:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s高可用集群部署"><a href="#k8s高可用集群部署" class="headerlink" title="k8s高可用集群部署"></a>k8s高可用集群部署</h1><h2 id="环境-amp-介质"><a href="#环境-amp-介质" class="headerlink" title="环境&amp;介质"></a>环境&amp;介质</h2><ul><li>虚拟化平台: VMWare Workstation 16 Pro</li><li>操作系统: CentOS Linux release 7.9.2009 (Core)</li><li>操作用户: root</li><li>电脑型号: Lenovo Legion Y7000P 2020H</li><li>CPU: Intel(R) Core(TM) I7-10750H CPU @2.60HZ</li><li>RAM: 16G</li><li>Kubernetes: 1.20.5</li><li>Docker: 20.10.5</li><li>Flannel: 0.14.0</li></ul><p>注: etd/coredns等版本信息可以使用命令<code>kubeadm config images list --kubernetes-version=v1.20.5</code>查看.</p><p>集群节点信息:</p><table><thead><tr><th>主机节点名称</th><th>IP</th><th>配置</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master-01 ~ 02</td><td>192.168.0.106 ~ 107</td><td>2C/2G/50G</td><td>Master/Worker</td></tr><tr><td>k8s-node-01</td><td>192.168.0.108</td><td>2C/2G/50G</td><td>Worker</td></tr><tr><td>k8s-master-lb</td><td>192.168.0.200</td><td>VIP不占用机器</td><td>vip</td></tr></tbody></table><table><thead><tr><th>信息</th><th>网段</th></tr></thead><tbody><tr><td>Pod网段</td><td>172.168.0.0/16</td></tr><tr><td>Service网段</td><td>10.96.0.0/12</td></tr></tbody></table><h3 id="stacked-etcd"><a href="#stacked-etcd" class="headerlink" title="stacked etcd"></a>stacked etcd</h3><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/20201207132536643.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/20181205184459783.png" alt=""></p><h3 id="external-etcd"><a href="#external-etcd" class="headerlink" title="external etcd"></a>external etcd</h3><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/20201207132556609.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2018120518452648.png" alt=""></p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>在VMWare中设置NAT</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2021-05-30_140023.png" alt=""><br>网关<br><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/2021-05-30_142657.png" alt=""></p><p>设置静态ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ifcfg-ens33,具体什么文件可以通过ifconfig查看</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static  #设置静态ip</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=fa11e783-2f96-489a-b904-98166afbd7fb</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPV6_PRIVACY=no</span><br><span class="line"><span class="meta">#</span><span class="bash">增加以下内容</span></span><br><span class="line">PREFIX=24</span><br><span class="line">NM_CONTROLLED=no  #网络配置文件进行配置</span><br><span class="line">IPADDR=192.168.1.106 #设置ip地址</span><br><span class="line">NETMASK=255.255.255.0  #子网掩码  </span><br><span class="line">GATEWAY=192.168.1.2  #网关地址，虚拟机nat中指定的网关</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network</span><br><span class="line"><span class="meta">#</span><span class="bash">增加以下内容</span></span><br><span class="line">NETWORKING=yes </span><br><span class="line">GATEWAY=192.168.1.2   #对应网关 虚拟机nat中指定的网关</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=114.114.114.114</span><br><span class="line">DNS3=223.6.6.6</span><br><span class="line">DNS4=223.5.5.5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改后重启网络服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart network</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping www.baidu.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果重启后没有生效,可以尝试给网卡的网络配置文件重新申请一个UUID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成后将下面的UUID配置到ifcfg-ens33,重启网络服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uuidgen</span></span><br><span class="line">af9d7267-df0f-468d-a7a5-657efd623829</span><br></pre></td></tr></table></figure><h2 id="添加主机信息"><a href="#添加主机信息" class="headerlink" title="添加主机信息"></a>添加主机信息</h2><h3 id="k8s-master-01"><a href="#k8s-master-01" class="headerlink" title="k8s-master-01"></a>k8s-master-01</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname k8s-master-01</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/sysconfig/network &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">hostname=k8s-master-01</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">192.168.1.106 k8s-master-01</span><br><span class="line">192.168.1.107 k8s-master-02</span><br><span class="line">192.168.1.108 k8s-master-03</span><br><span class="line">192.168.1.109 k8s-node-01</span><br><span class="line">192.168.1.200 k8s-master-lb</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="k8s-master-02"><a href="#k8s-master-02" class="headerlink" title="k8s-master-02"></a>k8s-master-02</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname k8s-master-02</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/sysconfig/network &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">hostname=k8s-master-02</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">192.168.1.106 k8s-master-01</span><br><span class="line">192.168.1.107 k8s-master-02</span><br><span class="line">192.168.1.108 k8s-master-03</span><br><span class="line">192.168.1.109 k8s-node-01</span><br><span class="line">192.168.1.200 k8s-master-lb</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="k8s-master-03"><a href="#k8s-master-03" class="headerlink" title="k8s-master-03"></a>k8s-master-03</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname k8s-master-03</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/sysconfig/network &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">hostname=k8s-master-03</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">192.168.1.106 k8s-master-01</span><br><span class="line">192.168.1.107 k8s-master-02</span><br><span class="line">192.168.1.108 k8s-master-03</span><br><span class="line">192.168.1.109 k8s-node-01</span><br><span class="line">192.168.1.200 k8s-master-lb</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="k8s-node-01"><a href="#k8s-node-01" class="headerlink" title="k8s-node-01"></a>k8s-node-01</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname k8s-node-01</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/sysconfig/network &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">hostname=k8s-node-01</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">192.168.1.106 k8s-master-01</span><br><span class="line">192.168.1.107 k8s-master-02</span><br><span class="line">192.168.1.108 k8s-master-03</span><br><span class="line">192.168.1.109 k8s-node-01</span><br><span class="line">192.168.1.200 k8s-master-lb</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h2><ul><li>资源准备</li><li>Docker环境安装</li><li>K8S环境安装</li></ul><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">centos7</button></li><li class="tab"><button type="button" data-href="#tags-2">centos8</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">centos init                      <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################################</span></span></span><br><span class="line">cd `dirname $0`</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭selinux</span></span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/sysconfig/selinux</span><br><span class="line">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用NetworkManager</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl stop NetworkManager</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl <span class="built_in">disable</span> NetworkManager</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl start NetworkManager</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">所有节点关闭防火墙、selinux、dnsmasq、swap</span></span><br><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl disable --now firewalld </span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl <span class="built_in">disable</span> --now dnsmasq</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl <span class="built_in">disable</span> --now NetworkManager</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调整<span class="built_in">log</span>级别</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sed -i <span class="string">&#x27;s/\#LogLevel=info/LogLevel=notice/g&#x27;</span> /etc/systemd/system.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl daemon-reexec</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置ssh</span></span><br><span class="line">sed -i -e &quot;/GSSAPIAuthentication/s/yes/no/g&quot; -e &quot;/GSSAPICleanupCredentials/s/yes/no/g&quot; -e&quot;s/^#UseDNS\ no/UseDNS\ no/&quot; -e&quot;s/^#UseDNS\ yes/UseDNS\ no/&quot; /etc/ssh/sshd_config</span><br><span class="line">echo -ne &quot;ClientAliveInterval 60\nClientAliveCountMax 10&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">cat &gt;&gt; /etc/ssh/ssh_config &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">Host *</span><br><span class="line">   StrictHostKeyChecking no</span><br><span class="line">   UserKnownHostsFile=/dev/null</span><br><span class="line">EOF</span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里源</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里epel源</span></span><br><span class="line">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.bak</span><br><span class="line">mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.bak</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装软件</span></span><br><span class="line">yum clean all</span><br><span class="line">yum update -y</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data iptables-services vim wget net-tools iperf3 telnet lvm2 tree screen tmux rsync lrzsz zip unzip xz ntpdate zlib sysstat hdparm htop iotop iftop dstat nmap mtr mlocate bind-utils ipmitool pciutils parted acpid man bash-completion* lsof bc ncdu psmisc jq ipvsadm ipset conntrack libseccomp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start acpid &amp;&amp; systemctl enable acpid</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables设置</span></span><br><span class="line">iptables -F</span><br><span class="line">service iptables save</span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl <span class="built_in">enable</span> iptables</span></span><br><span class="line">service iptables stop</span><br><span class="line">systemctl disable iptables</span><br><span class="line"><span class="meta">#</span><span class="bash">ubuntu</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ufw <span class="built_in">disable</span> &amp;&gt; /dev/null </span></span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 时区</span></span><br><span class="line"><span class="meta">#</span><span class="bash">timedatectl set-timezone Asia/Shanghai</span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改时区，设置ntp时间更新</span></span><br><span class="line">mv -f /etc/localtime /etc/localtime.bak</span><br><span class="line">/bin/cp -rf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">echo &#x27;ZONE=&quot;CST&quot;&#x27; &gt; /etc/sysconfig/clock</span><br><span class="line">ntpdate cn.pool.ntp.org</span><br><span class="line">echo &quot;* */1 * * * /usr/sbin/ntpdate   cn.pool.ntp.org&quot; &gt;&gt; /etc/crontab</span><br><span class="line"><span class="meta">#</span><span class="bash">ntpdate time2.aliyun.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;* */1 * * * /usr/sbin/ntpdate   time2.aliyun.com&quot;</span> &gt;&gt; /etc/crontab</span></span><br><span class="line">service crond restart</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> custom</span></span><br><span class="line">cat &gt;&gt; /etc/bashrc &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">export PATH=/usr/local/bin:$PATH</span><br><span class="line">export TERM=xterm-256color</span><br><span class="line">export EDITOR=/usr/bin/vim</span><br><span class="line"><span class="meta">#</span><span class="bash"> man page</span></span><br><span class="line">export LESS_TERMCAP_mb=$(printf &#x27;\e[01;31m&#x27;)</span><br><span class="line">export LESS_TERMCAP_md=$(printf &#x27;\e[01;35m&#x27;)</span><br><span class="line">export LESS_TERMCAP_me=$(printf &#x27;\e[0m&#x27;)</span><br><span class="line">export LESS_TERMCAP_se=$(printf &#x27;\e[0m&#x27;)</span><br><span class="line">export LESS_TERMCAP_so=$(printf &#x27;\e[1;31;46m&#x27;)</span><br><span class="line">export LESS_TERMCAP_ue=$(printf &#x27;\e[0m&#x27;)</span><br><span class="line">export LESS_TERMCAP_us=$(printf &#x27;\e[04;36m&#x27;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">history</span> tune</span></span><br><span class="line">shopt -s histappend</span><br><span class="line">export HISTTIMEFORMAT=&quot;%F %T &quot;</span><br><span class="line">export HISTCONTROL=ignoredups:erasedups</span><br><span class="line">export HISTSIZE=100000</span><br><span class="line">export HISTFILESIZE=100000</span><br><span class="line">export PROMPT_COMMAND=&quot;history -a&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> PS1</span></span><br><span class="line">export PS1=&quot;\[\e[36m\]\u\[\e[m\]\[\e[37m\]@\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\\$ &quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 抑制systemd session的<span class="built_in">log</span></span></span><br><span class="line">echo &#x27;if $programname == &quot;systemd&quot; and ($msg contains &quot;Starting Session&quot; or $msg contains &quot;Started Session&quot; or $msg contains &quot;Created slice&quot; or $msg contains &quot;Starting user-&quot; or $msg contains &quot;Starting User Slice of&quot; or $msg contains &quot;Removed session&quot; or $msg contains &quot;Removed slice User Slice of&quot; or $msg contains &quot;Stopping User Slice of&quot;) then stop&#x27; &gt; /etc/rsyslog.d/ignore-systemd-session-slice.conf</span><br><span class="line">systemctl restart rsyslog.service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim </span></span><br><span class="line">cat &gt;&gt; /etc/vimrc &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">set ts=4</span><br><span class="line">set paste</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set nocompatible</span><br><span class="line">syntax on</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用ipv6</span></span><br><span class="line">cat &gt;&gt; /etc/sysctl.d/99-sysctl.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span> ipv6</span></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 优化</span></span><br><span class="line">cat &gt;&gt; /etc/sysctl.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">sunrpc.tcp_slot_table_entries = 128</span><br><span class="line">net.core.rmem_default = 4194304</span><br><span class="line">net.core.wmem_default = 4194304</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_max = 4194304</span><br><span class="line">net.ipv4.tcp_rmem = 4096 1048576 4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096 1048576 4194304</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.core.netdev_max_backlog = 300000</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/bridge/bridge-nf-call-ip6tables</span></span><br><span class="line"></span><br><span class="line">sysctl -p</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">ulimit</span> 相关</span></span><br><span class="line">cat &gt; /etc/security/limits.d/20-nproc.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Default <span class="built_in">limit</span> <span class="keyword">for</span> number of user<span class="string">&#x27;s processes to prevent</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> accidental fork bombs.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See rhbz <span class="comment">#432903 for reasoning.</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> nproc</span></span><br><span class="line">root       soft    nproc     unlimited</span><br><span class="line">root       hard    nproc     unlimited</span><br><span class="line">*          hard    nproc     65535</span><br><span class="line">*          soft    nproc     65535</span><br><span class="line"><span class="meta">#</span><span class="bash"> nofile</span></span><br><span class="line">*          soft    nofile     65535</span><br><span class="line">*          hard    nofile     65535</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">ulimit</span>和limits.conf只对登录用户有效，对systemd无效，需要增加如下systemd和user的<span class="built_in">ulimit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改systemd系统<span class="built_in">ulimit</span></span></span><br><span class="line">cat &gt;&gt; /etc/systemd/system.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">DefaultLimitCORE=infinity</span><br><span class="line">DefaultLimitNOFILE=100000</span><br><span class="line">DefaultLimitNPROC=100000</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改systemd用户<span class="built_in">ulimit</span></span></span><br><span class="line">cat &gt;&gt;  /etc/systemd/user.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">DefaultLimitCORE=infinity</span><br><span class="line">DefaultLimitNOFILE=100000</span><br><span class="line">DefaultLimitNPROC=100000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭swap分区</span></span><br><span class="line">swapoff -a</span><br><span class="line">sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开启ipvs，不开启ipvs将会使用iptables，但是效率低，所以官网推荐需要开通ipvs内核</span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：在内核4.19版本nf_conntrack_ipv4已经改为nf_conntrack</span></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack ip_vs_sh nf_conntrack_ipv4 ip_tables ip_set xt_set ipt_set ipt_rpfilter ipt_REJECT ipip&quot;</span><br><span class="line">for kernel_module in \$&#123;ipvs_modules&#125;; do</span><br><span class="line"> /sbin/modinfo -F filename \$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"> if [ $? -eq 0 ]; then</span><br><span class="line"> /sbin/modprobe \$&#123;kernel_module&#125;</span><br><span class="line"> fi</span><br><span class="line">done</span><br><span class="line">EOF</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">bash /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">     docker                      <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################################</span></span></span><br><span class="line">rm -rf /etc/yum.repos.d/docker-ce.repo /etc/yum.repos.d/mirrors.aliyun.com_docker-ce_linux_centos_docker-ce.rep.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置docker仓库</span></span><br><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker-ce-18.06.2.ce</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> start docker service</span></span><br><span class="line">sudo usermod -aG docker root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入开机启动并启动</span></span><br><span class="line">sudo service docker start</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试运行并查看版本信息</span></span><br><span class="line">docker run hello-world</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker文件驱动改成 systemd,阿里加速镜像</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;storage-opts&quot;: [</span><br><span class="line">    &quot;overlay2.override_kernel_check=true&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://n3jwp4vw.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启docker</span></span><br><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker配置信息</span></span><br><span class="line">docker info</span><br><span class="line">docker info | grep Driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install docker-compose</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        k8s                      <span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################################################</span></span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install -y kubeadm kubelet kubectl</span></span><br><span class="line">yum install kubeadm-1.20.5 kubelet-1.20.5 kubectl-1.20.5 -y </span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置kubelet使用国内pause镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置kubelet的cgroups</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取docker的cgroups</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DOCKER_CGROUPS=$(docker info | grep <span class="string">&#x27;Cgroup&#x27;</span> | cut -d<span class="string">&#x27; &#x27;</span> -f3)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$DOCKER_CGROUPS</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">cat &gt;/etc/sysconfig/kubelet&lt;&lt;<span class="string">EOF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">KUBELET_EXTRA_ARGS=<span class="string">&quot;--cgroup-driver=<span class="variable">$DOCKER_CGROUPS</span> --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl daemon-reload</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl restart kubelet</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd `dirname $0`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &#x27;/SELINUX/s/enforcing/disabled/g&#x27; /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭firewalld</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">建立用户并免密码sudo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">useradd sysit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">&#x27;sysit@sysit.cn&#x27;</span> | passwd sysit --stdin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">&#x27;sysit ALL=(ALL) NOPASSWD: ALL&#x27;</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置ssh</span></span><br><span class="line">sed -i &#x27;s/#Port 22/Port 51668/g&#x27; /etc/ssh/sshd_config</span><br><span class="line">sed -i -e &quot;/GSSAPIAuthentication/s/yes/no/g&quot; -e &quot;/GSSAPICleanupCredentials/s/yes/no/g&quot; -e&quot;s/^#UseDNS\ no/UseDNS\ no/&quot; -e&quot;s/^#UseDNS\ yes/UseDNS\ no/&quot; /etc/ssh/sshd_config</span><br><span class="line">echo -ne &quot;ClientAliveInterval 60\nClientAliveCountMax 10\n&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">sed -i &#x27;s/#PermitRootLogin yes/PermitRootLogin no/&#x27; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">系统升级 &amp; 安装基础软件.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">阿里源</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.ori</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">阿里epel源</span></span><br><span class="line">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-8.repo</span><br><span class="line">dnf clean all &amp;&amp; dnf makecache</span><br><span class="line">dnf -y upgrade</span><br><span class="line">dnf install -y vim wget net-tools ncurses-devel rsync lrzsz zip unzip xz p7zip ntpdate gcc zlib sysstat bash-completion epel-release</span><br><span class="line">dnf install smartmontools hdparm htop iotop dstat nmap mtr mlocate bind-utils pciutils sar parted OpenIPMI OpenIPMI-devel OpenIPMI-tools OpenIPMI-libs man </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">chrony&amp;timezone</span></span><br><span class="line">dnf -y install chrony</span><br><span class="line">rm -f /etc/localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">systemctl enable chronyd</span><br><span class="line">systemctl restart chronyd</span><br><span class="line">chronyc add server cn.ntp.org.cn</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span> Ctrl+Alt+Del</span></span><br><span class="line">systemctl mask ctrl-alt-del.target</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">history</span></span></span><br><span class="line">mkdir /usr/share/.usermonitor/ &amp;&amp; touch /usr/share/.usermonitor/usermonitor.log &amp;&amp; chmod 002 /usr/share/.usermonitor/usermonitor.log</span><br><span class="line">cat &gt;&gt; /etc/profile &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line">export HISTORY_FILE=/usr/share/.usermonitor/usermonitor.log</span><br><span class="line">export PROMPT_COMMAND=&#x27;&#123; echo &quot;time=&quot;$(date &quot;+%Y-%m-%dT%H:%M:%S&quot;)&quot;#user=&quot;$(who am i |awk &quot;&#123;print \$1&#125;&quot;)&quot;#ip=&quot;$(who am i | awk &quot;&#123;print \$NF&#125;&quot; | grep -oP &quot;[\d.]+&quot;)&quot;#command=&quot;$(history 1 | &#123; read x cmd; echo &quot;$cmd&quot;; &#125;);&#125; &gt;&gt; $HISTORY_FILE&#x27;</span><br><span class="line">shopt -s histappend</span><br><span class="line">EOF</span><br><span class="line">cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"><span class="meta">#</span><span class="bash">net.core.somaxconn = 262144</span></span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.ipv4.route.gc_timeout = 20</span><br><span class="line">net.ipv4.ip_local_port_range = 1025 65535</span><br><span class="line">net.ipv4.tcp_retries2 = 5</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 120</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 15</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 60000</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_wmem = 8192 131072 16777216</span><br><span class="line">net.ipv4.tcp_rmem = 32768 131072 16777216</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">vm.swappiness = 10</span><br><span class="line">EOF</span><br><span class="line">/usr/sbin/sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">ulimit</span> 相关</span></span><br><span class="line">cat &gt; /etc/security/limits.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Default <span class="built_in">limit</span> <span class="keyword">for</span> number of user<span class="string">&#x27;s processes to prevent</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> accidental fork bombs.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See rhbz <span class="comment">#432903 for reasoning.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">nproc</span></span><br><span class="line">*          soft    nproc     65535</span><br><span class="line">*          hard    nproc     65535</span><br><span class="line"><span class="meta">#</span><span class="bash">nofile</span></span><br><span class="line">*          soft    nofile     65535</span><br><span class="line">*          hard    nofile     65535</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">ulimit</span>和limits.conf只对登录用户有效，对systemd无效，需要增加如下systemd和user的<span class="built_in">ulimit</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改systemd系统<span class="built_in">ulimit</span></span></span><br><span class="line">cat &gt;&gt; /etc/systemd/system.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">DefaultLimitCORE=infinity</span><br><span class="line">DefaultLimitNOFILE=100000</span><br><span class="line">DefaultLimitNPROC=100000</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改systemd用户<span class="built_in">ulimit</span></span></span><br><span class="line">cat &gt;&gt;  /etc/systemd/user.conf &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">DefaultLimitCORE=infinity</span><br><span class="line">DefaultLimitNOFILE=100000</span><br><span class="line">DefaultLimitNPROC=100000</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="配置免密"><a href="#配置免密" class="headerlink" title="配置免密"></a>配置免密</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ssh-keygen -t rsa # 一路回车</span><br><span class="line"></span><br><span class="line">for i in k8s-master-01 k8s-master-02 k8s-master-03 k8s-node-01;do ssh-copy-id -i .ssh/id_rsa.pub $i;done</span><br></pre></td></tr></table></figure><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>以下使用haproxy来搭建</p><h3 id="haproxy"><a href="#haproxy" class="headerlink" title="haproxy"></a>haproxy</h3><blockquote><p>如下操作在节点master-01，master-02，master-03操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取haproxy镜像</span></span><br><span class="line">docker pull haproxy:2.0.13-alpine</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  log 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000 #每个进程的最大连接数</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  daemon #以后台进程运行</span><br><span class="line">  nbproc 1 #进程数，该值可以设置小于或等于cpu核心数</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http #设置http(七层模式)，也可设置为tcp(四层模式)，另外还有一个Health健康监测模式。对mysql进行负载均衡的话，这里记得修改为tcp</span><br><span class="line">  log 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats #配置haproxy管理页面</span><br><span class="line">  mode http</span><br><span class="line">  bind 0.0.0.0:1080</span><br><span class="line">  log 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    admin:admin</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin if TRUE</span><br><span class="line"><span class="meta">#</span><span class="bash"> 8443端口，因为haproxy是和k8s apiserver是部署在同一台服务器上，都用6443会冲突。 </span></span><br><span class="line">frontend k8s-https #配置前端访问端口</span><br><span class="line">  bind 0.0.0.0:8443 #通过该端口进行负载均衡</span><br><span class="line">  mode tcp</span><br><span class="line"><span class="meta">  #</span><span class="bash">maxconn 50000</span></span><br><span class="line">  default_backend k8s-https #指定后端服务器</span><br><span class="line"><span class="meta">#</span><span class="bash"> 端口和apiserver的端口一致</span></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line"><span class="meta">  #</span><span class="bash">建议加上check，否则后台服务器A宕机了，负载均衡还会把请求发送到该宕机服务器上，inter 2000指check检测时间为2000毫秒，rise 3检测3次均正常则表示后天服务器正常，fall 3检测3次失败，则会把该后天服务器标志宕机，不再玩该后台服务器发送请求，weight 1指权重，取消weight改为backup，则是所有后台服务器宕机后才会启用该backup后台服务器</span></span><br><span class="line">  server k8s-master-01 192.168.1.106:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server k8s-master-02 192.168.1.107:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server k8s-master-03 192.168.1.108:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动haproxy</span></span><br><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/local/etc/haproxy:ro \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:2.0.13-alpine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">docker logs my-haproxy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 浏览器查看状态</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 账号密码，haproxy.cfg中定义 admin:admin</span></span><br><span class="line">http://192.168.1.106:1080/haproxy-status</span><br><span class="line">http://192.168.1.107:1080/haproxy-status</span><br><span class="line">http://192.168.1.108:1080/haproxy-status</span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><blockquote><p>如下操作在节点master-01，master-02，master-03操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">mkdir /etc/nginx</span><br><span class="line">cat &gt;/etc/nginx/nginx.conf&lt;&lt;EOF</span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"> </span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"> </span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"> </span><br><span class="line">    #gzip  on;</span><br><span class="line"> </span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr $upstream_addr - [$time_local] $status $upstream_bytes_sent&#x27;;</span><br><span class="line">    access_log  /var/log/nginx/k8s-access.log  main;</span><br><span class="line">    upstream k8s-apiserver &#123;</span><br><span class="line">     #轮询的加强版</span><br><span class="line">    server 192.168.1.106:6443 weight=1 max_fails=3 fail_timeout=20s;</span><br><span class="line">        server 192.168.1.107:6443 weight=2 max_fails=3 fail_timeout=20s;</span><br><span class="line">        server 192.168.1.108:6443 weight=3 max_fails=3 fail_timeout=20s;</span><br><span class="line">    &#125;</span><br><span class="line">    #ip_hash </span><br><span class="line">    #upstream k8s-apiserver &#123;</span><br><span class="line">    # ip_hash;</span><br><span class="line">    #server 192.168.1.106:6443 weight=1 max_fails=3 fail_timeout=20s;</span><br><span class="line">    #    server 192.168.1.107:6443 weight=2 max_fails=3 fail_timeout=20s;</span><br><span class="line">    #    server 192.168.1.108:6443 weight=3 max_fails=3 fail_timeout=20s;</span><br><span class="line">    #&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen 8443;</span><br><span class="line">       proxy_pass k8s-apiserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d --name my-nginx \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">--restart always \</span><br><span class="line">nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h2><blockquote><p>如下操作在节点master-01，master-02操作</p></blockquote><h3 id="k8s-master-01-1"><a href="#k8s-master-01-1" class="headerlink" title="k8s-master-01"></a>k8s-master-01</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/keepalived</span><br><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF</span><br><span class="line">! Configuration File for keepalived </span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">    script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_apiserver &#123;</span><br><span class="line">    script &#x27;/etc/keepalived/check_apiserver.sh&#x27;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    Rise = 2</span><br><span class="line">    Fall = 5</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &#x27;/etc/keepalived/check_haproxy.sh&#x27;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    Rise = 2</span><br><span class="line">    Fall = 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">vrrp_script check_nginx &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    interval 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    weight -5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Rise = 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Fall = 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&#125;</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    #mcast_src_ip 192.168.1.106</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 101</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    #可以指定多个</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.200</span><br><span class="line">        #192.168.1.201</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">    track_script &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_apiserver</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_haproxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="k8s-master-02-1"><a href="#k8s-master-02-1" class="headerlink" title="k8s-master-02"></a>k8s-master-02</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/keepalived </span><br><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF</span><br><span class="line">! Configuration File for keepalived </span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">    script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_apiserver &#123;</span><br><span class="line">    script &#x27;/etc/keepalived/check_apiserver.sh&#x27;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    Rise = 2</span><br><span class="line">    Fall = 5</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &#x27;/etc/keepalived/check_haproxy.sh&#x27;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    Rise = 2</span><br><span class="line">    Fall = 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">vrrp_script check_nginx &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    interval 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    weight -5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Rise = 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Fall = 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&#125;</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    #mcast_src_ip 192.168.1.107</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    #可以指定多个</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.200</span><br><span class="line">        #192.168.1.201</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">    track_script &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_apiserver</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_haproxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="k8s-master-03-1"><a href="#k8s-master-03-1" class="headerlink" title="k8s-master-03"></a>k8s-master-03</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/keepalived</span><br><span class="line">cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;EOF</span><br><span class="line">! Configuration File for keepalived </span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">    script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_apiserver &#123;</span><br><span class="line">    script &#x27;/etc/keepalived/check_apiserver.sh&#x27;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    Rise = 2</span><br><span class="line">    Fall = 5</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">    script &#x27;/etc/keepalived/check_haproxy.sh&#x27;</span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    Rise = 2</span><br><span class="line">    Fall = 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">vrrp_script check_nginx &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">    interval 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    weight -5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Rise = 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Fall = 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&#125;</span></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    #mcast_src_ip 192.168.1.108</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    #可以指定多个</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.200</span><br><span class="line">        #192.168.1.201</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">    track_script &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_apiserver</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_haproxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>注意上述的健康检查是关闭的，集群建立完成后再开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">    track_script &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_apiserver</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_haproxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    &#125;</span></span><br></pre></td></tr></table></figure><p>check_apiserver.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [[ $(netstat -nlp | grep 6443) ]]; then </span><br><span class="line">exit 0; else exit 1; </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod +x /etc/keepalived/check_apiserver.sh</span><br></pre></td></tr></table></figure><p>check_haproxy.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [[ $(netstat -nlp | grep 8443) ]]; then </span><br><span class="line">exit 0; else exit 1; </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">chmod +x /etc/keepalived/check_haproxy.sh</span><br></pre></td></tr></table></figure><p>check_nginx.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">count=$(ps -ef |grep nginx |egrep -cv &quot;grep|$$&quot;)</span><br><span class="line"> </span><br><span class="line">if [ &quot;$count&quot; -eq 0 ];then</span><br><span class="line">    exit 1</span><br><span class="line">else</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">chmod +x /etc/keepalived/check_nginx.sh</span><br></pre></td></tr></table></figure><p>启动keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取keepalived镜像</span></span><br><span class="line">docker pull osixia/keepalived:2.0.20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动keepalived</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ens33为本次实验192.168.0.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --cap-add=NET_ADMIN --cap-add=NET_BROADCAST --cap-add=NET_RAW \</span><br><span class="line">-e KEEPALIVED_INTERFACE=ens33 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=&quot;#PYTHON2BASH:[&#x27;192.168.1.200&#x27;]&quot; \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=&quot;#PYTHON2BASH:[&#x27;192.168.1.106&#x27;,&#x27;192.168.1.107&#x27;,&#x27;192.168.1.108&#x27;]&quot; \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">-v /etc/keepalived/keepalived.conf:/container/service/keepalived/assets/keepalived.conf \</span><br><span class="line">-v /etc/keepalived/check_apiserver.sh:/etc/keepalived/check_apiserver.sh \</span><br><span class="line">-v /etc/keepalived/check_haproxy.sh:/etc/keepalived/check_haproxy.sh \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:2.0.20 \</span><br><span class="line">--copy-service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看虚拟ip</span></span><br><span class="line">ip addr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时会配置 192.168.1.200 到其中一台机器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ping测试</span></span><br><span class="line">ping -c4 192.168.1.200</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果失败后清理后，重新实验</span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker rm -f k8s-keepalived</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ip a del 192.168.1.200/32 dev ens33</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">暂停keepalived master节点haproxy</span></span><br><span class="line">docker stop $(docker ps -a | grep haproxy)</span><br></pre></td></tr></table></figure><h2 id="配置master"><a href="#配置master" class="headerlink" title="配置master"></a>配置master</h2><h3 id="k8s-master-01-2"><a href="#k8s-master-01-2" class="headerlink" title="k8s-master-01"></a>k8s-master-01</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos下使用 ipvs 模式问题已解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成配置文件</span></span><br><span class="line">cd /etc/kubernetes</span><br><span class="line">cat &gt; kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: 7t2weq.bjbawausm0jaxury</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.1.106</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: k8s-master-01</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - 192.168.1.106</span><br><span class="line">  - 192.168.1.107</span><br><span class="line">  - 192.168.1.108</span><br><span class="line">  - 192.168.1.200</span><br><span class="line">  - k8s-master-01</span><br><span class="line">  - k8s-master-02</span><br><span class="line">  - k8s-master-03</span><br><span class="line">  - k8s-master-lb</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: 192.168.1.200:8443</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line"><span class="meta">#</span><span class="bash"> stacked etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">etcd:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">local</span>:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    dataDir: /var/lib/etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> external etcd</span></span><br><span class="line">etcd:</span><br><span class="line">  external:</span><br><span class="line">    endpoints:</span><br><span class="line">    - https://192.168.1.106:2379</span><br><span class="line">    - https://192.168.1.107:2379</span><br><span class="line">    - https://192.168.1.108:2379</span><br><span class="line"><span class="meta">#</span><span class="bash">caFile: /etc/kubernetes/pki/ca.pem</span></span><br><span class="line">    #certFile: /etc/kubernetes/pki/etcd.pem </span><br><span class="line">    #keyFile: /etc/kubernetes/pki/etcd-key.pem</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.20.5</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  podSubnet: 172.168.0.0/16</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br><span class="line"><span class="meta">#</span><span class="bash">iptables:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  masqueradeAll: <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  masqueradeBit: null</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  minSyncPeriod: 0s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  syncPeriod: 0s</span></span><br><span class="line">ipvs:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果node提供lvs服务，排除以下CIDR 不受kube-proxy管理，避免刷掉lvs规则</span></span><br><span class="line">  excludeCIDRs: [1.1.1.0/24,2.2.2.0/24]</span><br><span class="line">  minSyncPeriod: 1s</span><br><span class="line">  scheduler: &quot;wrr&quot;</span><br><span class="line">  syncPeriod: 10s</span><br><span class="line"><span class="meta">#</span><span class="bash">---</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">kind: KubeletConfiguration</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cgroupDriver: systemd</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：如果不是高可用集群，192.168.1.200:8443改为k8s-master-01的地址，8443改为apiserver的端口，默认是6443，注意更改v1.20.0为自己服务器kubeadm的版本：kubeadm version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提前拉取镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意保存返回的 join 命令</span></span><br><span class="line">kubeadm init --config kubeadm-master.config --upload-certs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化失败时使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash">kubeadm reset</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将ca相关文件传至其他master节点</span></span><br><span class="line">USER=root # customizable</span><br><span class="line">CONTROL_PLANE_IPS=(k8s-master-02 k8s-master-03)</span><br><span class="line">for host in $&#123;CONTROL_PLANE_IPS[@]&#125;; do</span><br><span class="line">    scp /etc/kubernetes/pki/ca.crt &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/ca.crt</span><br><span class="line">    scp /etc/kubernetes/pki/ca.key &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/ca.key</span><br><span class="line">    scp /etc/kubernetes/pki/sa.key &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/sa.key</span><br><span class="line">    scp /etc/kubernetes/pki/sa.pub &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/sa.pub</span><br><span class="line">    scp /etc/kubernetes/pki/front-proxy-ca.crt &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/front-proxy-ca.crt</span><br><span class="line">    scp /etc/kubernetes/pki/front-proxy-ca.key &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/front-proxy-ca.key</span><br><span class="line">    ssh &quot;$&#123;USER&#125;&quot;@$host &quot;mkdir -p /etc/kubernetes/pki/etcd&quot;</span><br><span class="line">    scp /etc/kubernetes/pki/etcd/ca.crt &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    scp /etc/kubernetes/pki/etcd/ca.key &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/pki/etcd/ca.key</span><br><span class="line">    scp /etc/kubernetes/admin.conf &quot;$&#123;USER&#125;&quot;@$host:/etc/kubernetes/admin.conf</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>记住初始化成功的信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of the control-plane node running the following command on each as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.1.200:8443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:c6de1ceec2d3c52d655af62d4299f736b7a112eae7b35e35dc80c592544b2c8e \</span><br><span class="line">    --control-plane --certificate-key 64bd9859171a64f280955404ba5e8399cc728441747015bf55a84e03bdbba16c</span><br><span class="line"></span><br><span class="line">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span><br><span class="line">As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use</span><br><span class="line">&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.1.200:8443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:c6de1ceec2d3c52d655af62d4299f736b7a112eae7b35e35dc80c592544b2c8e</span><br></pre></td></tr></table></figure><p>配置使用kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rm -rf $HOME/.kube</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; /root/.bashrc</span><br><span class="line">export KUBECONFIG=$HOME/.kube/config</span><br><span class="line">EOF</span><br><span class="line">source /root/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br></pre></td></tr></table></figure><h3 id="k8s-master-02-2"><a href="#k8s-master-02-2" class="headerlink" title="k8s-master-02"></a>k8s-master-02</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos下使用 ipvs 模式问题已解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line">cd /etc/kubernetes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成配置文件</span></span><br><span class="line">cat &gt; kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: 7t2weq.bjbawausm0jaxury</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.1.106</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: k8s-master-01</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - 192.168.1.106</span><br><span class="line">  - 192.168.1.107</span><br><span class="line">  - 192.168.1.108</span><br><span class="line">  - 192.168.1.200</span><br><span class="line">  - k8s-master-01</span><br><span class="line">  - k8s-master-02</span><br><span class="line">  - k8s-master-03</span><br><span class="line">  - k8s-master-lb</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: 192.168.1.200:8443</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line"><span class="meta">#</span><span class="bash"> stacked etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">etcd:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">local</span>:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    dataDir: /var/lib/etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> external etcd</span></span><br><span class="line">etcd:</span><br><span class="line">  external:</span><br><span class="line">    endpoints:</span><br><span class="line">    - https://192.168.1.106:2379</span><br><span class="line">    - https://192.168.1.107:2379</span><br><span class="line">    - https://192.168.1.108:2379</span><br><span class="line"><span class="meta">#</span><span class="bash">caFile: /etc/kubernetes/pki/ca.pem</span></span><br><span class="line">    #certFile: /etc/kubernetes/pki/etcd.pem </span><br><span class="line">    #keyFile: /etc/kubernetes/pki/etcd-key.pem</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.20.5</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  podSubnet: 172.168.0.0/16</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br><span class="line"><span class="meta">#</span><span class="bash">iptables:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  masqueradeAll: <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  masqueradeBit: null</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  minSyncPeriod: 0s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  syncPeriod: 0s</span></span><br><span class="line">ipvs:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果node提供lvs服务，排除以下CIDR 不受kube-proxy管理，避免刷掉lvs规则</span></span><br><span class="line">  excludeCIDRs: [1.1.1.0/24,2.2.2.0/24]</span><br><span class="line">  minSyncPeriod: 1s</span><br><span class="line">  scheduler: &quot;wrr&quot;</span><br><span class="line">  syncPeriod: 10s</span><br><span class="line"><span class="meta">#</span><span class="bash">---</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">kind: KubeletConfiguration</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cgroupDriver: systemd</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：如果不是高可用集群，192.168.1.200:8443改为k8s-master-01的地址，8443改为apiserver的端口，默认是6443，注意更改v1.20.5为自己服务器kubeadm的版本：kubeadm version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提前拉取镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.1.200:8443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2bdcb627482946406cb5a7019d9edcec3ffb5623d903da535d4bd586f57d5643 \</span><br><span class="line">    --control-plane --certificate-key 1d71cd7bfa911bf64d28560b7b08513173b754f8a9a377cff8a51cfe443e8744</span><br></pre></td></tr></table></figure><p>配置使用kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rm -rf $HOME/.kube</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; /root/.bashrc</span><br><span class="line">export KUBECONFIG=$HOME/.kube/config</span><br><span class="line">EOF</span><br><span class="line">source /root/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br></pre></td></tr></table></figure><h3 id="k8s-master-03-2"><a href="#k8s-master-03-2" class="headerlink" title="k8s-master-03"></a>k8s-master-03</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> centos下使用 ipvs 模式问题已解决</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line">cd /etc/kubernetes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成配置文件</span></span><br><span class="line">cat &gt; kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: 7t2weq.bjbawausm0jaxury</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.1.106</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: k8s-master-01</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - 192.168.1.106</span><br><span class="line">  - 192.168.1.107</span><br><span class="line">  - 192.168.1.108</span><br><span class="line">  - 192.168.1.200</span><br><span class="line">  - k8s-master-01</span><br><span class="line">  - k8s-master-02</span><br><span class="line">  - k8s-master-03</span><br><span class="line">  - k8s-master-lb</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controlPlaneEndpoint: 192.168.1.200:8443</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  type: CoreDNS</span><br><span class="line"><span class="meta">#</span><span class="bash"> stacked etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">etcd:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">local</span>:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    dataDir: /var/lib/etcd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> external etcd</span></span><br><span class="line">etcd:</span><br><span class="line">  external:</span><br><span class="line">    endpoints:</span><br><span class="line">    - https://192.168.1.106:2379</span><br><span class="line">    - https://192.168.1.107:2379</span><br><span class="line">    - https://192.168.1.108:2379</span><br><span class="line"><span class="meta">#</span><span class="bash">caFile: /etc/kubernetes/pki/ca.pem</span></span><br><span class="line">    #certFile: /etc/kubernetes/pki/etcd.pem </span><br><span class="line">    #keyFile: /etc/kubernetes/pki/etcd-key.pem</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.20.5</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  podSubnet: 172.168.0.0/16</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br><span class="line"><span class="meta">#</span><span class="bash">iptables:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  masqueradeAll: <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">  masqueradeBit: null</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  minSyncPeriod: 0s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  syncPeriod: 0s</span></span><br><span class="line">ipvs:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果node提供lvs服务，排除以下CIDR 不受kube-proxy管理，避免刷掉lvs规则</span></span><br><span class="line">  excludeCIDRs: [1.1.1.0/24,2.2.2.0/24]</span><br><span class="line">  minSyncPeriod: 1s</span><br><span class="line">  scheduler: &quot;wrr&quot;</span><br><span class="line">  syncPeriod: 10s</span><br><span class="line"><span class="meta">#</span><span class="bash">---</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">kind: KubeletConfiguration</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cgroupDriver: systemd</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：如果不是高可用集群，192.168.1.200:8443改为k8s-master-01的地址，8443改为apiserver的端口，默认是6443，注意更改v1.20.5为自己服务器kubeadm的版本：kubeadm version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提前拉取镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">systemctl enable --now kubelet</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.1.200:8443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2bdcb627482946406cb5a7019d9edcec3ffb5623d903da535d4bd586f57d5643 \</span><br><span class="line">    --control-plane --certificate-key 1d71cd7bfa911bf64d28560b7b08513173b754f8a9a377cff8a51cfe443e8744</span><br></pre></td></tr></table></figure><p>配置使用kubectl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rm -rf $HOME/.kube</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt; /root/.bashrc</span><br><span class="line">export KUBECONFIG=$HOME/.kube/config</span><br><span class="line">EOF</span><br><span class="line">source /root/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br></pre></td></tr></table></figure><p>我们的高可用目前环境是三个master,因为etcd集群至少要保证2个节点，所以当我们挂了一个master节点时是对于我们高可用环境是不受影响的，生产环境至少要保证三个master节点以上即可。</p><h2 id="配置node"><a href="#配置node" class="headerlink" title="配置node"></a>配置node</h2><h3 id="k8s-node-01-1"><a href="#k8s-node-01-1" class="headerlink" title="k8s-node-01"></a>k8s-node-01</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> k8s-master-01初始化成功后输出的token</span></span><br><span class="line">kubeadm join 192.168.1.200:8443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2bdcb627482946406cb5a7019d9edcec3ffb5623d903da535d4bd586f57d5643</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置角色</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先安装网络插件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加node节点的节点role名称</span></span><br><span class="line">kubectl label nodes k8s-node-01 node-role.kubernetes.io/node=</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除node节点的节点role名称</span></span><br><span class="line">kubectl label nodes k8s-node-01 node-role.kubernetes.io/node-</span><br></pre></td></tr></table></figure><h2 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h2><blockquote><p>如下操作在任意一个master节点操作</p></blockquote><h3 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载配置</span></span><br><span class="line">cd /etc/kubernetes</span><br><span class="line">mkdir flannel &amp;&amp; cd flannel</span><br><span class="line"><span class="meta">#</span><span class="bash">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">wget https://raw.fastgit.org/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Network&quot;: &quot;172.168.0.0/16&quot;,</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改镜像,两处</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.14.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yaml中不支持tab，使用空格代替缩进</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.14.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=ens33</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载flannel网络</span></span><br><span class="line">kubectl delete -f kube-flannel.yml</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -f /etc/cni/net.d/*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl --namespace kube-system logs kube-flannel-ds-28p8p</span><br><span class="line">kubectl describe pod coredns-54d67798b7-8k96g  --namespace=kube-system</span><br></pre></td></tr></table></figure><h3 id="calico"><a href="#calico" class="headerlink" title="calico"></a>calico</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置calico网络(Master)</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看calico网络状态, STATUS为Running后查看集群信息</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get nodes</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master   Ready    master   45m   v1.19.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">containers:</span><br><span class="line">        # Runs calico-node container on each Kubernetes node.  This</span><br><span class="line">        # container programs network policy and routes on each</span><br><span class="line">        # host.</span><br><span class="line">        - name: calico-node</span><br><span class="line">          image: calico/node:v3.8.8-1</span><br><span class="line">          env:</span><br><span class="line">            # Use Kubernetes API as the backing datastore.</span><br><span class="line">            - name: DATASTORE_TYPE</span><br><span class="line">              value: &quot;kubernetes&quot;</span><br><span class="line">            # Wait for the datastore.</span><br><span class="line">            - name: IP_AUTODETECTION_METHOD # DaemonSet中添加该环境变量</span><br><span class="line">              value: interface=ens33 # 指定内网网卡</span><br><span class="line">            - name: WAIT_FOR_DATASTORE</span><br><span class="line">              value: &quot;true&quot;</span><br><span class="line">            # Set based on the k8s node name.</span><br><span class="line">            - name: NODENAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: spec.nodeName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看配置各组件信息configmap</span></span><br><span class="line">[root@k8s-master ~]# kubectl get -n kube-system configmap</span><br><span class="line">NAME                                 DATA   AGE</span><br><span class="line">calico-config                        4      29m</span><br><span class="line">coredns                              1      29m</span><br><span class="line">extension-apiserver-authentication   6      29m</span><br><span class="line">kube-proxy                           2      29m</span><br><span class="line">kubeadm-config                       2      29m</span><br><span class="line">kubelet-config-1.19                  1      29m</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Metrics-Server部署"><a href="#Metrics-Server部署" class="headerlink" title="Metrics Server部署"></a>Metrics Server部署</h2><p>在新版的Kubernetes中系统资源的采集均使用Metrics-server，可以通过Metrics采集节点和Pod的内存、磁盘、CPU和网络的使用率。<br>将k8s-master-01节点的front-proxy-ca.crt复制到所有Node节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/kubernetes/pki/front-proxy-ca.crt k8s-node-01:/etc/kubernetes/pki/front-proxy-ca.crt</span><br><span class="line">scp /etc/kubernetes/pki/front-proxy-ca.crt k8s-node-xx(其他节点自行拷贝):/etc/kubernetes/pki/front-proxy-ca.crt</span><br></pre></td></tr></table></figure><p>安装Metrics Server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">https://github.com/kubernetes-sigs/metrics-server/releases</span></span><br><span class="line">cd /etc/kubernetes</span><br><span class="line">mkdir metrics-server &amp;&amp; cd metrics-server</span><br><span class="line">wget https://hub.fastgit.org/kubernetes-sigs/metrics-server/releases/download/v0.5.0/components.yaml -O ./metrics-server.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改</span></span><br><span class="line">template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: true #增加</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=443</span><br><span class="line">        - --kubelet-insecure-tls #增加</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --metric-resolution=15s</span><br><span class="line">        image: willdockerhub/metrics-server:v0.5.0 # 修改</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">kubectl apply -f metrics-server.yaml</span><br><span class="line">kubectl top node</span><br></pre></td></tr></table></figure><h2 id="启用KeepAlived健康"><a href="#启用KeepAlived健康" class="headerlink" title="启用KeepAlived健康"></a>启用KeepAlived健康</h2><p>去掉k8s-master-01,k8s-master-02和k8s-master-03节点<code>/etc/keepalived/keepalived.conf</code>中注释部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">    track_script &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       chk_apiserver</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       check_haproxy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    &#125;</span></span><br></pre></td></tr></table></figure><p>重启keepalived容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart k8s-keepalived</span><br></pre></td></tr></table></figure><h2 id="配置dashboard"><a href="#配置dashboard" class="headerlink" title="配置dashboard"></a>配置dashboard</h2><p>默认是没web界面的，可以在master机器上安装一个dashboard插件，实现通过web来管理。</p><h3 id="安装Dashboard插件"><a href="#安装Dashboard插件" class="headerlink" title="安装Dashboard插件"></a>安装Dashboard插件</h3><blockquote><p>如下操作在k8s-master-01节点操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line">wget https://raw.fastgit.org/kubernetes/dashboard/v2.0.5/aio/deploy/recommended.yaml -O ./kubernetes-dashboard.yaml</span><br><span class="line"><span class="comment">#wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.5/aio/deploy/recommended.yaml -O ./kubernetes-dashboard.yaml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编辑<code>kubernetes-dashboard.yaml</code>文件`：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v2.0.5</span></span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Dashboard插件</span></span><br><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br><span class="line"><span class="comment"># 查看dashboard是否运行</span></span><br><span class="line">kubectl get svc,pod --all-namespaces | grep dashboard</span><br></pre></td></tr></table></figure><p>可以看到kubernetes-dashboard已正常运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.106.178.80   &lt;none&gt;        8000/TCP                 7s</span><br><span class="line">kubernetes-dashboard   service/kubernetes-dashboard        ClusterIP   10.109.64.48    &lt;none&gt;        443/TCP                  7s</span><br><span class="line">kubernetes-dashboard   pod/dashboard-metrics-scraper-7b59f7d4df-ls7dc   0/1     ContainerCreating   0          7s</span><br><span class="line">kubernetes-dashboard   pod/kubernetes-dashboard-74d688b6bc-g48b2        0/1     ContainerCreating   0          7s</span><br></pre></td></tr></table></figure><h3 id="授予Dashboard账户集群管理权限"><a href="#授予Dashboard账户集群管理权限" class="headerlink" title="授予Dashboard账户集群管理权限"></a>授予Dashboard账户集群管理权限</h3><p>需要一个管理集群admin的权限，新建<code>dashboard-adminuser.yaml</code>文件，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建部署文件</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/etc/kubernetes</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">dashboard-adminuser.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Create ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建登陆用户</span></span><br><span class="line">kubectl apply -f dashboard-adminuser.yaml</span><br></pre></td></tr></table></figure><p>找到kubernete-dashboard-admin的token，用户登录使用</p><p>执行命令并查看结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master-01:kubernetes# kubectl -n kube-system get secret | grep admin-user</span><br><span class="line">admin-user-token-bv5nd                           kubernetes.io/service-account-token   3      55s</span><br></pre></td></tr></table></figure><p>可以看到名称是kubernetes-dashboard-admin-token-ddskx，使用该名称执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master-01:kubernetes# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">Name:         admin-user-token-fgjcq</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 23d73dcd-c07e-4ecc-be52-ed185d389b3a</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImVoX0FrNmhrZnhmVTBIeU9SbHhPQWdhM3NmQmduc0pBbXY3MmswdVJmaEEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWZnamNxIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyM2Q3M2RjZC1jMDdlLTRlY2MtYmU1Mi1lZDE4NWQzODliM2EiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.W91T6pI8W_wTZmE_VWQQi6n3ewjGEgfxwCFUz6qpPs1DTeqGQeeG-yvIwVRh98fM4mRhWV3yQ6QGBKcT4wZTVIZCsPEszM7xTECy3oUeYIFnYCxftQbns6DHvkP1mM5EwQGSQ2oAtZUaWU9QsCXeTFMSBN2GBlRGVgJ_zGRl70kdmbh3YrUnR53KMouuJVIHp1wHYpcXbCGLhgDk3yX-96g8xSLk9xeF-Hq_M1BRoTwNPn3Wh2W6VwIIqfYQcCp3WPKq5pZgtEQZwp4IRb3JFC4ttGaptypFnJxUoDkX37Wjzs3cZB9PXDgTdNFyr4jzTkIxCbhcHamHdZ3Y77bsOQ</span><br></pre></td></tr></table></figure><p>记下这串token，等下登录使用，这个token默认是永久的。</p><h3 id="dashboard访问方式"><a href="#dashboard访问方式" class="headerlink" title="dashboard访问方式"></a>dashboard访问方式</h3><p>此处推荐API Server方式访问。（谷歌内核浏览器）</p><h4 id="kubectl-proxy方式访问"><a href="#kubectl-proxy方式访问" class="headerlink" title="kubectl proxy方式访问"></a><code>kubectl proxy</code>方式访问</h4><blockquote><p>如下操作在k8s-master-01上操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy --address=0.0.0.0 --disable-filter=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>即可通过浏览器访问: <code>http://192.168.1.200:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</code></p><blockquote><p><font color="red">注意</font><br>仪表盘使用kubectl代理命令不应暴露公开,因为它只允许HTTP连接。域以外的localhost和127.0.0.1将不能登录。在登录页面点击登录按钮什么都不会发生后，跳过登录后，没有任何权限。</p></blockquote><p>此方式只允许开发测试使用。为了便于开发测试，以下配置用于提升默认权限为超级用户权限。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">kubernetes-dashboard-test.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Create ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><h4 id="NodePort方式访问"><a href="#NodePort方式访问" class="headerlink" title="NodePort方式访问"></a>NodePort方式访问</h4><p>这种访问方式仪表板只建议在单个节点上设置开发环境。</p><p>编辑<code>kubernetes-dashboard.yaml</code>文件，添加<code>type: NodePort</code>和<code>nodePort: 30001</code>，暴露Dashboard服务为30001端口，参考如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span>  <span class="comment"># NodePort登录方式</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span>  <span class="comment"># NodePort登录暴露端口</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意</font><br>仪表盘可以在master节点上访问，如果是多节点集群，官方文档说应该是使用节点IP和NodePort来访问，但是经过测试，<code>https://&lt;master-ip&gt;:&lt;nodePort&gt;</code> 和 <code>https://&lt;node-ip&gt;:&lt;nodePort&gt;</code>都可以访问。</p></blockquote><h4 id="API-Server方式访问"><a href="#API-Server方式访问" class="headerlink" title="API Server方式访问"></a>API Server方式访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">https://&lt;master-ip&gt;:&lt;apiserver-port&gt;/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/</span></span><br><span class="line"></span><br><span class="line">https://192.168.1.200:8443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</span><br></pre></td></tr></table></figure><blockquote><p><font color="red">注意</font><br>这种方式访问仪表盘的仅仅可能在安装了你的用户证书的浏览器上。与API Server通信可以使用示例所使用的证书kubeconfig文件。</p></blockquote><p>浏览器访问问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Status&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;status&quot;: &quot;Failure&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;services \&quot;https:kubernetes-dashboard:\&quot; is forbidden: User \&quot;system:anonymous\&quot; cannot get services&#x2F;proxy in the namespace \&quot;kube-system\&quot;&quot;,</span><br><span class="line">  &quot;reason&quot;: &quot;Forbidden&quot;,</span><br><span class="line">  &quot;details&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;https:kubernetes-dashboard:&quot;,</span><br><span class="line">    &quot;kind&quot;: &quot;services&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;code&quot;: 403</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为最新版的k8s默认启用了RBAC，并为未认证用户赋予了一个默认的身份：<code>anonymous</code>。</p><p>对于API Server来说，它是使用证书进行认证的，我们需要先创建一个证书：</p><ol><li>首先找到kubectl命令的配置文件，默认情况下为<code>/etc/kubernetes/admin.conf</code>，在 上文中，我们已经复制到了<code>$HOME/.kube/config</code>中。</li><li>然后我们使用<code>client-certificate-data</code>和<code>client-key-data</code>生成一个p12文件，可使用下列命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成client-certificate-data</span></span><br><span class="line">grep <span class="string">&#x27;client-certificate-data&#x27;</span> ~/.kube/config | head -n 1 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | base64 -d &gt;&gt; kubecfg.crt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成client-key-data</span></span><br><span class="line">grep <span class="string">&#x27;client-key-data&#x27;</span> ~/.kube/config | head -n 1 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | base64 -d &gt;&gt; kubecfg.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成p12</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -inkey kubecfg.key -<span class="keyword">in</span> kubecfg.crt -out kubecfg.p12 -name <span class="string">&quot;kubernetes-client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># certmgr.msc</span></span><br></pre></td></tr></table></figure><p>最后导入上面生成的p12文件，重新打开浏览器，显示出现选择证书选项，选OK，然后就可以看到熟悉的登录界面了。我们可以使用一开始创建的admin-user用户的token进行登录，一切OK。</p><blockquote><p><font color="red">注意</font><br>对于生产系统，我们应该为每个用户应该生成自己的证书，因为不同的用户会有不同的命名空间访问权限。</p></blockquote><h4 id="nginx-ingress方式访问"><a href="#nginx-ingress方式访问" class="headerlink" title="nginx ingress方式访问"></a>nginx ingress方式访问</h4><p>可以动态的更新Nginx配置等，是比较灵活，更为推荐的暴露服务的方式，但也相对比较复杂，业务环境推荐使用。</p><h2 id="Kubernetes桌面客户端"><a href="#Kubernetes桌面客户端" class="headerlink" title="Kubernetes桌面客户端"></a>Kubernetes桌面客户端</h2><p>Lens：<a href="https://github.com/lensapp/lens">https://github.com/lensapp/lens</a></p><p>官网下载：<a href="https://k8slens.dev/">https://k8slens.dev/</a></p><p>导入~/.kube/config文件即可</p><h2 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h2><p>测试容器间的通信和DNS<br>配置好网络之后，kubeadm会自动部署coredns</p><p>如下测试可以在配置kubectl的节点上操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查dns可用性</span></span><br><span class="line">cat &gt; pod-nginx.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:1.7.9</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建pod</span></span><br><span class="line">kubectl create -f pod-nginx.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入pod，查看dns</span></span><br><span class="line">kubectl exec  nginx -i -t -- /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看dns配置</span></span><br><span class="line">root@nginx:/# cat /etc/resolv.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看名字是否可以正确解析</span></span><br><span class="line">root@nginx:/# ping nginx-ds</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> DNS解析</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10.103.184.0 为查看svc时获取到的clusterip</span></span><br><span class="line">curl &quot;10.103.184.0:80&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://192.168.0.107:32223/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理删除</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br><span class="line"><span class="meta">#</span><span class="bash"> 高可用测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭任一master节点测试集群是能否正常执行上一步的基础测试，查看相关信息，不能同时关闭两个节点，因为3个节点组成的etcd集群，最多只能有一个当机。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看组件状态</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep k8s-master-01</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep k8s-master-02</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep k8s-master-03</span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问测试</span></span><br><span class="line">CURL_POD=$(kubectl get pods | grep curl | grep Running | cut -d &#x27; &#x27; -f1)</span><br><span class="line">kubectl exec -it $CURL_POD -- sh --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h2 id="ingress的部署"><a href="#ingress的部署" class="headerlink" title="ingress的部署"></a>ingress的部署</h2><blockquote><p><a href="https://kubernetes.github.io/ingress-nginx/">https://kubernetes.github.io/ingress-nginx/</a></p></blockquote><ul><li>ingress是k8s集群的请求入口，可以理解为对多个service的再次抽象</li><li>通常说的ingress一般包括ingress资源对象及ingress-controller两部分组成</li><li>ingress-controller有多种实现，社区原生的是ingress-nginx，根据具体需求选择</li><li>ingress自身的暴露有多种方式，需要根据基础环境及业务类型选择合适的方式</li></ul><p>ingress的部署，需要考虑两个方面：</p><ol><li>ingress-controller是作为pod来运行的，以什么方式部署比较好</li><li>ingress解决了把如何请求路由到集群内部，那它自己怎么暴露给外部比较好</li></ol><p>下面列举一些目前常见的部署和暴露方式，具体使用哪种方式还是得根据实际需求来考虑决定。</p><p><strong>Deployment+LoadBalancer模式的Service</strong></p><p>如果要把ingress部署在公有云，那用这种方式比较合适。用Deployment部署ingress-controller，创建一个type为LoadBalancer的service关联这组pod。大部分公有云，都会为LoadBalancer的service自动创建一个负载均衡器，通常还绑定了公网地址。只要把域名解析指向该地址，就实现了集群服务的对外暴露。</p><p><strong>Deployment+NodePort模式的Service</strong></p><p>同样用deployment模式部署ingress-controller，并创建对应的服务，但是type为NodePort。这样，ingress就会暴露在集群节点ip的特定端口上。由于nodeport暴露的端口是随机端口，一般会在前面再搭建一套负载均衡器来转发请求。该方式一般用于宿主机是相对固定的环境ip地址不变的场景。<br>NodePort方式暴露ingress虽然简单方便，但是NodePort多了一层NAT，在请求量级很大时可能对性能会有一定影响。</p><p><strong>DaemonSet+HostNetwork+nodeSelector</strong></p><p>用DaemonSet结合nodeselector来部署ingress-controller到特定的node上，然后使用HostNetwork直接把该pod与宿主机node的网络打通，直接使用宿主机的80/433端口就能访问服务。这时，ingress-controller所在的node机器就很类似传统架构的边缘节点，比如机房入口的nginx服务器。该方式整个请求链路最简单，性能相对NodePort模式更好。缺点是由于直接利用宿主机节点的网络和端口，一个node只能部署一个ingress-controller pod。比较适合大并发的生产环境使用。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/k8s/3440606094-5d2edd49bfc68_fix732.png" alt=""></p><h3 id="安装ingress-controller"><a href="#安装ingress-controller" class="headerlink" title="安装ingress-controller"></a>安装ingress-controller</h3><p>给需要安装ingress-controller的master节点上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes k8s-master-01 ingress=true</span><br><span class="line">kubectl label nodes k8s-master-02 ingress=true</span><br><span class="line">kubectl label nodes k8s-master-03 ingress=true</span><br><span class="line">kubectl get node --show-labels</span><br></pre></td></tr></table></figure><p>修改ingress的yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/kubernetes</span><br><span class="line">mkdir ingress &amp;&amp; cd ingress</span><br><span class="line">wget https://github.com/kubernetes/ingress-nginx/blob/nginx-0.30.0/deploy/static/mandatory.yaml -O mandatory.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line"><span class="meta">#</span><span class="bash">kind: Deployment</span></span><br><span class="line">kind: DaemonSet #改成DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line"><span class="meta">  #</span><span class="bash">replicas: 1 <span class="comment">#注释</span></span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: &quot;10254&quot;</span><br><span class="line">        prometheus.io/scrape: &quot;true&quot;</span><br><span class="line">    spec:</span><br><span class="line">      # wait up to five minutes for the drain of connections</span><br><span class="line">      terminationGracePeriodSeconds: 300</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class="line">      nodeSelector:</span><br><span class="line">        #kubernetes.io/os: linux</span><br><span class="line">        isIngress: &quot;true&quot; # 增加</span><br><span class="line">      hostNetwork: true # 增加</span><br><span class="line">      #该设置是使POD使用的k8s的dns，如果不加上dnsPolicy: ClusterFirstWithHostNet ，pod默认使用所在宿主主机使用的DNS，这样也会导致容器内不能通过service name 访问k8s集群中其他POD</span><br><span class="line">      dnsPolicy: ClusterFirstWithHostNet # 增加</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller</span><br><span class="line">          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span><br><span class="line">  #registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:0.30.0</span><br><span class="line"></span><br><span class="line">kubectl apply -f mandatory1.yaml</span><br><span class="line">kubectl get  pod -n ingress-nginx -o wide</span><br><span class="line">netstat -lntup | grep nginx</span><br></pre></td></tr></table></figure><h3 id="配置ingress资源"><a href="#配置ingress资源" class="headerlink" title="配置ingress资源"></a>配置ingress资源</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx-web</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="comment"># 指定 Ingress Controller 的类型</span></span><br><span class="line">        <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">        <span class="comment"># 指定我们的 rules 的 path 可以使用正则表达式</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/use-regex:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment"># 连接超时时间，默认为 5s</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class="string">&quot;600&quot;</span></span><br><span class="line">        <span class="comment"># 后端服务器回转数据超时时间，默认为 60s</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class="string">&quot;600&quot;</span></span><br><span class="line">        <span class="comment"># 后端服务器响应超时时间，默认为 60s</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class="string">&quot;600&quot;</span></span><br><span class="line">        <span class="comment"># 客户端上传文件，最大大小，默认为 20m</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="string">&quot;10m&quot;</span></span><br><span class="line">        <span class="comment"># URL 重写</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line">        <span class="comment"># 禁用https强制跳转,默认是true</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">        <span class="comment"># 定义应用程序根目录，Controller在“/”上下文中必须重定向该根目录</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/app-root:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">        <span class="comment"># 即使未启用TLS，也强制将重定向到HTTPS</span></span><br><span class="line">        <span class="attr">nginx.ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment"># session affinity</span></span><br><span class="line"><span class="attr">nginx.ingress.kubernetes.io/affinity:</span> <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line"><span class="comment"># abc.com 跳转到www.abc.com</span></span><br><span class="line"><span class="attr">nginx.ingress.kubernetes.io/from-to-www-redirect:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># 路由规则</span></span><br><span class="line">      <span class="attr">rules:</span></span><br><span class="line">      <span class="comment"># 主机名，只能是域名，修改为你自己的</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">k8s.test.com</span></span><br><span class="line">        <span class="attr">http:</span></span><br><span class="line">          <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/test1</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="comment"># 后台部署的 Service Name，与上面部署的 Tomcat 对应</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">tomcat-http1</span></span><br><span class="line">              <span class="comment"># 后台部署的 Service Port，与上面部署的 Tomcat 对应</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">8080</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/test2</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="comment"># 后台部署的 Service Name，与上面部署的 Tomcat 对应</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">tomcat-http2</span></span><br><span class="line">              <span class="comment"># 后台部署的 Service Port，与上面部署的 Tomcat 对应</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">8080</span></span><br><span class="line">           <span class="comment"># 将xxx.com/something/xxx 重定向到 xxx.com/xxx</span></span><br><span class="line">   <span class="comment"># 该处其实还是重定向到 ingress.test.com根目录下</span></span><br><span class="line">   <span class="comment"># nginx.ingress.kubernetes.io/rewrite-target: /$2</span></span><br><span class="line">   <span class="comment"># k8s.test.com/something/new 重写为 k8s.test.com/new</span></span><br><span class="line">           <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/something(/|$)(.*)</span>      <span class="comment"># 修改这里</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">ingress-test</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ingress</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">nodePort:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-tomcat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/kubeguide/tomcat-app:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> <span class="comment">#Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">hello.hello.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">test-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="Ingress-TLS-配置"><a href="#Ingress-TLS-配置" class="headerlink" title="Ingress TLS 配置"></a>Ingress TLS 配置</h3><p>参考官方的配置步骤：<a href="https://kubernetes.github.io/ingress-nginx/examples/PREREQUISITES/">https://kubernetes.github.io/ingress-nginx/examples/PREREQUISITES/</a></p><p>1.openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj “/CN=nginxsvc/O=nginxsvc”</p><p>2.生成证书：kubectl create secret tls tls-secret --key tls.key --cert tls.crt</p><p>3.修改并应用配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-tomcat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/kubeguide/tomcat-app:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> <span class="comment">#Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span> <span class="comment">#增加</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">www1.westos.org</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">hello.hello.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">test-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="Ingress-认证配置"><a href="#Ingress-认证配置" class="headerlink" title="Ingress 认证配置"></a>Ingress 认证配置</h3><p>1.生成auth认证文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install http-tools</span></span><br><span class="line">htpasswd -c auth admin  ## 生成认证用户，第一次创建必须用-c</span><br><span class="line">htpasswd  auth tom   ## 添加认证用户，如果用-c会覆盖已经存在的认证的用户</span><br></pre></td></tr></table></figure><p>2.创建secret</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic basic-auth --from-file=auth</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># secret名称： basic-auth</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># generic通过auth文件创建</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看 secrets 的信息：kubectl get secrets</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将secret的basic-auth输出为yaml格式：kubectl get secret basic-auth -o yaml</span></span></span><br></pre></td></tr></table></figure><p>3.修改并应用配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-tomcat</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">docker.io/kubeguide/tomcat-app:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> <span class="comment">#Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/auth-type:</span> <span class="string">basic</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/auth-secret:</span> <span class="string">basic-auth</span>  <span class="comment">## secret的名字</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/auth-realm:</span> <span class="string">&#x27;Authentication Required - admin&#x27;</span>  <span class="comment">## 能通过认证的用户名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span> <span class="comment">#增加</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">www1.westos.org</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">hello.hello.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">test-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h3 id="TCP四层代理"><a href="#TCP四层代理" class="headerlink" title="TCP四层代理"></a>TCP四层代理</h3><p>通过负载均衡的TCP四层代理，我们可以将集群内ClusterIP类型的服务暴露出来，使集群外部也可以访问。</p><p>Nginx负载均衡的TCP代理配置是存储在ConfigMap内的，在启动时需要指定配置文件。</p><p>编辑nginx</p><p>kubectl edit daemonsets -n kube-system nginx-ingress-controller</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--default-backend-service=kube-system/nginx-ingress-default-backend</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--election-id=ingress-controller-leader</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--ingress-class=nginx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--configmap=default/nginx-ingress-controller</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--default-ssl-certificate=default/k2-tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--tcp-services-configmap=kube-system/nginx-ingress-controller-tcp</span></span><br></pre></td></tr></table></figure><p>其中关键的就是：<code>- --tcp-services-configmap=kube-system/nginx-ingress-controller-tcp</code></p><p>然后重启nginx-ingress-controller，执行：</p><p><code>kubectl delete pod -n kube-system -l app=nginx-ingress</code></p><p>然后创建配置ConfigMap，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress-controller-tcp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">3306:</span> <span class="string">&quot;paas/mysql-tenant-client-service:3306&quot;</span></span><br></pre></td></tr></table></figure><p>注意其中的name和namespace必须要与启动中的一致。</p><p>data中的参数介绍：</p><ul><li>最前面的3306就是我们对外暴露的端口</li><li>paas为被代理服务所在的命名空间</li><li>mysql-tenant-client-service为被代理的服务名称</li><li>最后面的3306是服务的端口号</li></ul><p>最后再apply一下这个configmap即可</p><p>我们现在就可以在集群外部通过访问集群内任意一个节点的IP:3306就可以访问到MySQL服务了。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>忘记初始master节点时的node节点加入集群命令怎么办</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --print-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --print-join-command --ttl=0</span><br></pre></td></tr></table></figure><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看集群结点状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># 查看详细结点信息</span></span><br><span class="line">kubectl describe nodes</span><br><span class="line"><span class="comment"># 查看所有pod</span></span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"><span class="comment"># 查看集群服务状态</span></span><br><span class="line">kubectl get svc --all-namespaces</span><br><span class="line"><span class="comment"># 查看集群运行在那些ip上</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"><span class="comment"># 查看master的各种token</span></span><br><span class="line">kubectl get secret -n kube-system</span><br><span class="line"><span class="comment"># 查看某一个特定的token</span></span><br><span class="line">kubectl describe secret/[token name] -n kube-system</span><br><span class="line"></span><br><span class="line">kubectl apply -f xxxxx.yml</span><br><span class="line">kubectl delete -f xxxxx.yml</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="查看k8s中etcd数据"><a href="#查看k8s中etcd数据" class="headerlink" title="查看k8s中etcd数据"></a>查看k8s中etcd数据</h3><p>1.查看ETCD集群中运行的ETCD pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master-01:~# kubectl get pod -n kube-system | grep etcd</span><br><span class="line">etcd-k8s-master-01                      1/1     Running   5          20h</span><br><span class="line">etcd-k8s-master-02                      1/1     Running   2          20h</span><br><span class="line">etcd-k8s-master-03                      1/1     Running   2          20h</span><br></pre></td></tr></table></figure><p>2.进入ETCD pod容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]# kubectl exec -it etcd-k8s-master-01 -n kube-system -- /bin/sh</span><br></pre></td></tr></table></figure><p>3.设置环境变量为v3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ETCDCTL_API=3</span><br></pre></td></tr></table></figure><p>4.查看ETCD中所有的key，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl --endpoints &quot;https://192.168.1.106:2379,https://192.168.1.107:2379,https://192.168.1.108:2379&quot; \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/peer.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/peer.key get / --prefix --keys-only</span><br></pre></td></tr></table></figure><p>5.查看etcd集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl endpoint health \</span><br><span class="line">--endpoints &quot;https://192.168.1.106:2379&quot; \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/peer.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/peer.key \</span><br><span class="line">--cluster=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ETCDCTL_API=3 etcdctl --endpoints &quot;https://192.168.1.106:2379&quot; \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/server.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/server.key \</span><br><span class="line">member list -w table</span><br></pre></td></tr></table></figure><h3 id="K8S集群中etcd备份和恢复"><a href="#K8S集群中etcd备份和恢复" class="headerlink" title="K8S集群中etcd备份和恢复"></a>K8S集群中etcd备份和恢复</h3><p>就像备份数据库一样，很多时候，我们也想对k8s资源配置进行备份。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get all --all-namespaces -o yaml &gt; all-deploy-services.yaml</span><br></pre></td></tr></table></figure><p>上面的方法，可以实现对k8s资源配置的备份。但是更好的办法，是对etcd进行备份。本文就学习一下k8s中etcd的备份和恢复方法。</p><h4 id="etcd集群状态"><a href="#etcd集群状态" class="headerlink" title="etcd集群状态"></a>etcd集群状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HOST_1=10.240.0.17</span><br><span class="line">HOST_2=10.240.0.18</span><br><span class="line">HOST_3=10.240.0.19</span><br><span class="line">ENDPOINTS=$HOST_1:2379,$HOST_2:2379,$HOST_3:2379</span><br><span class="line">etcdctl --endpoints=$ENDPOINTS member list</span><br><span class="line">etcdctl --write-out=table --endpoints=$ENDPOINTS endpoint status</span><br><span class="line">etcdctl --endpoints=$ENDPOINTS endpoint health</span><br></pre></td></tr></table></figure><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>1、查看配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod etcd-master -n kube-system | grep Command -i -A 20</span><br></pre></td></tr></table></figure><p>看到Command字段为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Command:</span><br><span class="line">  etcd</span><br><span class="line">  --advertise-client-urls=https://172.17.0.10:2379</span><br><span class="line">  --cert-file=/etc/kubernetes/pki/etcd/server.crt</span><br><span class="line">  --client-cert-auth=true</span><br><span class="line">  --data-dir=/var/lib/etcd</span><br><span class="line">  --initial-advertise-peer-urls=https://172.17.0.10:2380</span><br><span class="line">  --initial-cluster=master=https://172.17.0.10:2380</span><br><span class="line">  --key-file=/etc/kubernetes/pki/etcd/server.key</span><br><span class="line">  --listen-client-urls=https://127.0.0.1:2379,https://172.17.0.10:2379</span><br><span class="line">  --listen-metrics-urls=http://127.0.0.1:2381</span><br><span class="line">  --listen-peer-urls=https://172.17.0.10:2380</span><br><span class="line">  --name=master</span><br><span class="line">  --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt</span><br><span class="line">  --peer-client-cert-auth=true</span><br><span class="line">  --peer-key-file=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line">  --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">  --snapshot-count=10000</span><br><span class="line">  --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br></pre></td></tr></table></figure><p>或者查看/etc/kubernetes/manifests/etcd.yaml。</p><p>2、执行备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">--endpoints=https://[127.0.0.1]:2379 \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/server.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/server.key \</span><br><span class="line">snapshot save /tmp/snapshot-pre-boot.db</span><br></pre></td></tr></table></figure><p>3、查看备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">--endpoints=https://[127.0.0.1]:2379 \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/server.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/server.key \</span><br><span class="line">snapshot status /tmp/snapshot-pre-boot.db -w table</span><br></pre></td></tr></table></figure><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>1、恢复etcd数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">--endpoints=https://[127.0.0.1]:2379 \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/server.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/server.key \</span><br><span class="line">--initial-cluster=master=https://127.0.0.1:2380 \</span><br><span class="line">--initial-cluster-token etcd-cluster-1 \</span><br><span class="line">--initial-advertise-peer-urls=https://127.0.0.1:2380 \</span><br><span class="line">--name=master \</span><br><span class="line">--data-dir /var/lib/etcd-from-backup \</span><br><span class="line">snapshot restore /tmp/snapshot-pre-boot.db</span><br></pre></td></tr></table></figure><p>2、修改etcd.yaml<br><code>vim /etc/kubernetes/manifests/etcd.yaml</code>，如下修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Update --data-dir to use new target location</span></span><br><span class="line"><span class="string">--data-dir=/var/lib/etcd-from-backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update new initial-cluster-token to specify new cluster</span></span><br><span class="line"><span class="string">--initial-cluster-token=etcd-cluster-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update volumes and volume mounts to point to new path</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/etcd-from-backup</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">etcd-data</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kubernetes/pki/etcd</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">etcd-certs</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/lib/etcd-from-backup</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">etcd-data</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/kubernetes/pki/etcd</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">etcd-certs</span></span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="https://www.cnblogs.com/dukuan/p/14124600.html">https://www.cnblogs.com/dukuan/p/14124600.html</a></p><p><a href="http://www.xiaoheidiannao.com/87635.html">http://www.xiaoheidiannao.com/87635.html</a></p><p><a href="https://max.book118.com/html/2021/0317/5341143323003144.shtm">https://max.book118.com/html/2021/0317/5341143323003144.shtm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;k8s高可用集群部署&quot;&gt;&lt;a href=&quot;#k8s高可用集群部署&quot; class=&quot;headerlink&quot; title=&quot;k8s高可用集群部署&quot;&gt;&lt;/a&gt;k8s高可用集群部署&lt;/h1&gt;&lt;h2 id=&quot;环境-amp-介质&quot;&gt;&lt;a href=&quot;#环境-amp-介质&quot; c
      
    
    </summary>
    
    
      <category term="microservice" scheme="http://wangyangyangisme.github.io/categories/microservice/"/>
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/categories/microservice/k8s/"/>
    
    
      <category term="k8s" scheme="http://wangyangyangisme.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>https双向认证</title>
    <link href="http://wangyangyangisme.github.io/posts/b6cff42/"/>
    <id>http://wangyangyangisme.github.io/posts/b6cff42/</id>
    <published>2021-05-31T12:00:36.000Z</published>
    <updated>2021-05-31T12:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="https双向认证"><a href="#https双向认证" class="headerlink" title="https双向认证"></a>https双向认证</h1><div class="note success flat"><p>GO 1.15 以上版本解决GRPC X509 Common Name field, use SANs or temporarily enable Common Name matching</p></div><h2 id="第1步：生成-CA-根证书"><a href="#第1步：生成-CA-根证书" class="headerlink" title="第1步：生成 CA 根证书"></a>第1步：生成 CA 根证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out ca.key 2048</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating RSA private key, 2048 bit long modulus (2 primes)</span><br><span class="line">.............+++++</span><br><span class="line">..................................................................................................................+++++</span><br><span class="line">e is 65537 (0x010001)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 3650 -key ca.key -out ca.pem</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [AU]:cn</span><br><span class="line">State or Province Name (full name) [Some-State]:fj</span><br><span class="line">Locality Name (eg, city) []:fz</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:wyy</span><br><span class="line">Organizational Unit Name (eg, section) []:wyy</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure><h2 id="第2步：用-openssl-生成-ca-和双方-SAN-证书"><a href="#第2步：用-openssl-生成-ca-和双方-SAN-证书" class="headerlink" title="第2步：用 openssl 生成 ca 和双方 SAN 证书"></a>第2步：用 openssl 生成 ca 和双方 SAN 证书</h2><p>准备默认 OpenSSL 配置文件于当前目录</p><p>linux系统在 : <code>/etc/ssl/openssl.cnf</code></p><p>Mac系统在: <code>/System/Library/OpenSSL/openssl.cnf</code></p><p>window系统(cmder)：<code>C:/Users/&lt;user&gt;/Desktop/cmder/vendor/git-for-windows/usr/ssl/openssl.cnf</code></p><ul><li><p>1：cp 目录到项目目录进行修改设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp C:/Users/&lt;user&gt;/Desktop/cmder/vendor/git-for-windows/usr/ssl/openssl.cnf ./</span><br></pre></td></tr></table></figure></li><li><p>2：找到 [ CA_default ],打开 copy_extensions = copy</p></li><li><p>3：找到[ req ],打开 req_extensions = v3_req # The extensions to add to a certificate request</p></li><li><p>4：找到[ v3_req ],添加 subjectAltName = @alt_names</p></li><li><p>5：添加新的标签 [ alt_names ] , 和标签字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ alt_names ]</span><br><span class="line">DNS.1 = localhost</span><br><span class="line">DNS.2 = *.test.com</span><br></pre></td></tr></table></figure></li></ul><p>这里填入需要加入到 Subject Alternative Names 段落中的域名名称，可以写入多个。</p><h2 id="第3步：生成服务端证书"><a href="#第3步：生成服务端证书" class="headerlink" title="第3步：生成服务端证书"></a>第3步：生成服务端证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genpkey -algorithm RSA -out server.key</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">........................................................................................+++++</span><br><span class="line">.......................................+++++</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -nodes -key server.key -out server.csr -days 3650 -subj &quot;/C=cn/OU=wyy/O=wyy/CN=localhost&quot; -config ./openssl.cnf -extensions v3_req</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ignoring -days; not generating a certificate</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -in server.csr -out server.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Signature ok</span><br><span class="line">subject=C = cn, OU = custer, O = custer, CN = localhost</span><br><span class="line">Getting CA Private Key</span><br></pre></td></tr></table></figure><p>server.csr是上面生成的证书请求文件。ca.pem/ca.key是CA证书文件和key，用来对server.csr进行签名认证。这两个文件在之前生成的。</p><h2 id="第4步：生成客户端证书"><a href="#第4步：生成客户端证书" class="headerlink" title="第4步：生成客户端证书"></a>第4步：生成客户端证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genpkey -algorithm RSA -out client.key</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">........+++++</span><br><span class="line">...........+++++</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -nodes -key client.key -out client.csr -days 3650 -subj &quot;/C=cn/OU=wyy/O=wyy/CN=localhost&quot; -config ./openssl.cnf -extensions v3_req</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ignoring -days; not generating a certificate</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -in client.csr -out client.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Signature ok</span><br><span class="line">subject=C = cn, OU = custer, O = custer, CN = localhost</span><br><span class="line">Getting CA Private Key</span><br></pre></td></tr></table></figure><p>现在 Go 1.15 以上版本的 GRPC 通信，这样就完成了使用自签CA、Server、Client证书和双向认证</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cert, _ := tls.LoadX509KeyPair(<span class="string">&quot;cert/server.pem&quot;</span>, <span class="string">&quot;cert/server.key&quot;</span>)</span><br><span class="line">certPool := x509.NewCertPool()</span><br><span class="line">ca, _ := ioutil.ReadFile(<span class="string">&quot;cert/ca.pem&quot;</span>)</span><br><span class="line">certPool.AppendCertsFromPEM(ca)</span><br><span class="line"></span><br><span class="line">creds := credentials.NewTLS(&amp;tls.Config&#123;</span><br><span class="line">Certificates: []tls.Certificate&#123;cert&#125;,</span><br><span class="line">ClientAuth:   tls.RequireAndVerifyClientCert,</span><br><span class="line">ClientCAs:    certPool,</span><br><span class="line">&#125;)</span><br><span class="line">rpcServer := grpc.NewServer(grpc.Creds(creds))</span><br><span class="line"></span><br><span class="line">services.RegisterProdServiceServer(rpcServer, <span class="built_in">new</span>(services.ProdService))</span><br><span class="line"></span><br><span class="line">listen, _ := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8081&quot;</span>)</span><br><span class="line">rpcServer.Serve(listen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cert, _ := tls.LoadX509KeyPair(<span class="string">&quot;cert/client.pem&quot;</span>, <span class="string">&quot;cert/client.key&quot;</span>)</span><br><span class="line">certPool := x509.NewCertPool()</span><br><span class="line">ca, _ := ioutil.ReadFile(<span class="string">&quot;cert/ca.pem&quot;</span>)</span><br><span class="line">certPool.AppendCertsFromPEM(ca)</span><br><span class="line"></span><br><span class="line">creds := credentials.NewTLS(&amp;tls.Config&#123;</span><br><span class="line">Certificates: []tls.Certificate&#123;cert&#125;,</span><br><span class="line">ServerName:   <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">RootCAs:      certPool,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">conn, err := grpc.Dial(<span class="string">&quot;:8081&quot;</span>, grpc.WithTransportCredentials(creds))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">prodClient := services.NewProdServiceClient(conn)</span><br><span class="line">prodRes, err := prodClient.GetProdStock(context.Background(), &amp;services.ProdRequest&#123;ProdId: <span class="number">12</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Info(prodRes.ProdStock)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><h4 id="服务端代码-1"><a href="#服务端代码-1" class="headerlink" title="服务端代码"></a>服务端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,</span><br><span class="line"><span class="string">&quot;Hi, This is an example of https service in golang!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ssl 双向检验</span></span><br><span class="line">pool := x509.NewCertPool()</span><br><span class="line">crt, err := ioutil.ReadFile(<span class="string">&quot;../cert/ca.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;读取证书失败！&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">pool.AppendCertsFromPEM(crt)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">s := &amp;http.Server&#123;</span><br><span class="line">Addr: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">TLSConfig: &amp;tls.Config&#123;</span><br><span class="line">ClientCAs:  pool,</span><br><span class="line">ClientAuth: tls.RequireAndVerifyClientCert,  <span class="comment">// 检验客户端证书</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(s.ListenAndServeTLS(<span class="string">&quot;../cert/server.pem&quot;</span>, <span class="string">&quot;../cert/server.key&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端代码-1"><a href="#客户端代码-1" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pool := x509.NewCertPool()</span><br><span class="line">caCrt, err := ioutil.ReadFile(<span class="string">&quot;../cert/ca.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;read ca.crt file error:&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pool.AppendCertsFromPEM(caCrt)</span><br><span class="line">cliCrt, err := tls.LoadX509KeyPair(<span class="string">&quot;../cert/client.pem&quot;</span>, <span class="string">&quot;../cert/client.key&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;LoadX509KeyPair error:&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">tr := &amp;http.Transport&#123;</span><br><span class="line">TLSClientConfig: &amp;tls.Config&#123;</span><br><span class="line">RootCAs:      pool,</span><br><span class="line">Certificates: []tls.Certificate&#123;cliCrt&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">client := &amp;http.Client&#123;Transport: tr&#125;</span><br><span class="line">resp, err := client.Get(<span class="string">&quot;https://localhost:8080/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;https双向认证&quot;&gt;&lt;a href=&quot;#https双向认证&quot; class=&quot;headerlink&quot; title=&quot;https双向认证&quot;&gt;&lt;/a&gt;https双向认证&lt;/h1&gt;&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;GO 1.15 以上版
      
    
    </summary>
    
    
      <category term="golang" scheme="http://wangyangyangisme.github.io/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>复杂度分析</title>
    <link href="http://wangyangyangisme.github.io/posts/a1a87ec3/"/>
    <id>http://wangyangyangisme.github.io/posts/a1a87ec3/</id>
    <published>2021-05-23T03:00:36.000Z</published>
    <updated>2021-05-23T03:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><blockquote><p><a href="https://blog.csdn.net/Baron_ND/article/details/115492059">https://blog.csdn.net/Baron_ND/article/details/115492059</a></p><p>从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。</p></blockquote><h2 id="如何分析、统计算法的执行效率和资源消耗？"><a href="#如何分析、统计算法的执行效率和资源消耗？" class="headerlink" title="如何分析、统计算法的执行效率和资源消耗？"></a>如何分析、统计算法的执行效率和资源消耗？</h2><h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><p>算法的执行效率，粗略地讲，就是算法代码执行的时间。但是，如何在不运行代码的情况下，用“肉眼”得到一段代码的执行时间呢？</p><p>这里有段非常简单的代码，求 1,2,3…n 的累加和。现在，我就带你一块来估算一下这段代码的执行时间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        sum = sum + i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时间是多少呢？</p><p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n<em>unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)</em>unit_time。可以看出来，所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</p><p>按照这个分析思路，我们再来看这段代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span> </span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    j := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> ; i &lt; n; i++ &#123;</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">       <span class="keyword">for</span> ; j &lt; n; j++ &#123;</span><br><span class="line">        sum = sum + i * j</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们依旧假设每个语句的执行时间是 unit_time。那这段代码的总执行时间 T(n) 是多少呢？</p><p>第 2、3、4 行代码，每行都需要 1 个 unit_time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n * unit_time 的执行时间，第 7、8 行代码循环执行了 n2遍，所以需要 2n2 * unit_time 的执行时间。所以，整段代码总的执行时间 T(n) = (2n2+2n+3)*unit_time。</p><p>尽管我们不知道 unit_time 的具体值，但是通过这两段代码执行时间的推导过程，我们可以得到一个非常重要的规律，那就是，所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。</p><p>我们可以把这个规律总结成一个公式。注意，大 O 就要登场了！</p><p>我来具体解释一下这个公式。其中，T(n) 我们已经讲过了，它表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。</p><p>所以，第一个例子中的 T(n) = O(2n+2)，第二个例子中的 T(n) = O(2n2+2n+3)。这就是大 O 时间复杂度表示法。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。</p><p>当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：T(n) = O(n)； T(n) = O(n2)。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><h4 id="时间复杂度分析方法"><a href="#时间复杂度分析方法" class="headerlink" title="时间复杂度分析方法"></a>时间复杂度分析方法</h4><h5 id="1、只关注循环执行次数最多的一段代码"><a href="#1、只关注循环执行次数最多的一段代码" class="headerlink" title="1、只关注循环执行次数最多的一段代码"></a>1、只关注循环执行次数最多的一段代码</h5><p>我刚才说了，大 O 这种复杂度表示方法只是表示一种变化趋势。我们通常会忽略掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，我们在分析一个算法、一段代码的时间复杂度的时候，也只关注循环执行次数最多的那一段代码就可以了。这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。</p><p>为了便于你理解，我还是拿前面的例子来说明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span> <span class="comment">// 常量级语句不算做复杂度部分</span></span><br><span class="line">    <span class="comment">// 时间复杂度为 O(n) n为执行了多少次</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        sum = sum + i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中第 2、3 行代码都是常量级的执行时间，与 n 的大小无关，所以对于复杂度并没有影响。循环执行次数最多的是第 4、5 行代码，所以这块代码要重点分析。前面我们也讲过，这两行代码被执行了 n 次，所以总的时间复杂度就是 O(n)。</p><h5 id="2、加法法则：总时间复杂度等于量级最大的那段代码的复杂度-O-n-2"><a href="#2、加法法则：总时间复杂度等于量级最大的那段代码的复杂度-O-n-2" class="headerlink" title="2、加法法则：总时间复杂度等于量级最大的那段代码的复杂度 O(n^2)"></a>2、加法法则：总时间复杂度等于量级最大的那段代码的复杂度 O(n^2)</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sum_1 := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 此段代码为常量级代码，因为他和n的增长无关，是固定的</span></span><br><span class="line">    <span class="keyword">for</span> p := <span class="number">1</span>; p &lt; <span class="number">100</span>; ++p &#123;</span><br><span class="line">        sum_1 = sum_1 + p</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum_2 := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 此段代码时间复杂度为 O(n)</span></span><br><span class="line">    <span class="keyword">for</span> q := <span class="number">1</span>; q &lt; n; ++q &#123;</span><br><span class="line">        sum_2 = sum_2 + q</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum_3 := <span class="number">0</span></span><br><span class="line">    j := <span class="number">1</span></span><br><span class="line">    <span class="comment">// 此段代码时间复杂度为 O(n^2)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; ++i &#123;</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> ; j &lt;= n; ++j &#123;</span><br><span class="line">            sum_3 = sum_3 + i * j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 那么加法法则就是，总的时间复杂度等于量级最大的那段代码时间复杂度，本例为 O(n^2)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum_1 + sum_2 + sum_3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码分为三部分，分别是求 sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。</p><p>第一段的时间复杂度是多少呢？这段代码循环执行了 100 次，所以是一个常量的执行时间，跟 n 的规模无关。</p><p>这里我要再强调一下，即便这段代码循环 10000 次、100000 次，只要是一个已知的数，跟 n 无关，照样也是常量级的执行时间。当 n 无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉。因为它本身对增长趋势并没有影响。</p><p>那第二段代码和第三段代码的时间复杂度是多少呢？答案是 O(n) 和 O(n2)，你应该能容易就分析出来，我就不啰嗦了。</p><p>综合这三段代码的时间复杂度，我们取其中最大的量级。所以，整段代码的时间复杂度就为 O(n2)。也就是说：总的时间复杂度就等于量级最大的那段代码的时间复杂度。那我们将这个规律抽象成公式就是：</p><p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).</p><h5 id="3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"><a href="#3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积" class="headerlink" title="3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"></a>3、乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h5><p>我刚讲了一个复杂度分析中的加法法则，这儿还有一个乘法法则。类比一下，你应该能“猜到”公式是什么样子的吧？</p><p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)<em>T2(n)=O(f(n))</em>O(g(n))=O(f(n)*g(n)).也就是说，假设 T1(n) = O(n)，T2(n) = O(n2)，则 T1(n) * T2(n) = O(n3)。落实到具体的代码上，我们可以把乘法法则看成是嵌套循环，我举个例子给你解释一下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    ret := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 此段代码原本时间复杂度为 O(n)，但是由于f()函数不是简单的语句，它的时间复杂度为 O(n)</span></span><br><span class="line">    <span class="comment">// 所以函数 cal 总的时间复杂度为 T(n) = O(n) * O(n) = O(n * n) = O(n^2)</span></span><br><span class="line">    <span class="comment">// 这就是乘法法则</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; ++i &#123;</span><br><span class="line">      ret = ret + f(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数时间复杂度为 O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; ++i &#123;</span><br><span class="line">        sum = sum + i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们单独看 cal() 函数。假设 f() 只是一个普通的操作，那第 4～6 行的时间复杂度就是，T1(n) = O(n)。但 f() 函数本身不是一个简单的操作，它的时间复杂度是 T2(n) = O(n)，所以，整个 cal() 函数的时间复杂度就是，T(n) = T1(n) * T2(n) = O(n*n) = O(n2)。</p><p>我刚刚讲了三种复杂度的分析技巧。不过，你并不用刻意去记忆。实际上，复杂度分析这个东西关键在于“熟练”。你只要多看案例，多分析，就能做到“无招胜有招”。</p><h4 id="常用时间复杂度量级（按数量级递增）"><a href="#常用时间复杂度量级（按数量级递增）" class="headerlink" title="常用时间复杂度量级（按数量级递增）"></a>常用时间复杂度量级（按数量级递增）</h4><ul><li>常量阶 O(1)</li><li>对数阶 O(logn)</li><li>线性阶 O(n)</li><li>线性对数阶 O(nlogn)</li><li>平方阶 O(n^2)、立方阶 O(n^3)、k次方阶 O(n^k)</li><li>指数阶 O(2^n)</li><li>阶乘阶 O(n!)</li><li>其中可以分为<code>多项式量级</code>和<code>非多项式量级</code>，非多项式量级只有两个：O(2^n)和O(n!)</li></ul><h4 id="几种常用多项式复杂度"><a href="#几种常用多项式复杂度" class="headerlink" title="几种常用多项式复杂度"></a>几种常用多项式复杂度</h4><ul><li>O(1): 是指常量级时间复杂度，即代码全为常量级，不管多少代码量，都为 O(1)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">8</span></span><br><span class="line">j := <span class="number">6</span></span><br><span class="line">sum := i + j</span><br></pre></td></tr></table></figure><p>我稍微总结一下，只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)。或者说，一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</p><ul><li>O(logn)、O(nlogn):</li></ul><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。我通过一个例子来说明一下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    <span class="comment">// 变量i从1开始取值，每循环一次就乘2，当i&gt;n时，循环结束；</span></span><br><span class="line">    <span class="comment">// 此时i的取值过程其实就是一个等比数列：i = &#123;2^0, 2^1, 2^2, 2^x&#125;，即 2^x=i</span></span><br><span class="line">    <span class="comment">// 所以求解x则为 x=log2*n</span></span><br><span class="line">    <span class="comment">// 所以这段代码时间复杂度为 O(log2n)</span></span><br><span class="line">    <span class="comment">// PS. 如果将 i = i * 2 改为 i = i * 3，则为 O(log3n)，所以不管是底数为2或3，都为O(logn)</span></span><br><span class="line">    <span class="comment">// 如果一段代码的时间复杂度为O(logn)，那么执行n遍就为 O(nlogn)</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; n &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = i * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PS. 由于golang 没有while循环，所以该段代码表示的是其它支持while语言中的while循环，如下:</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">while(i &lt;= n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。</p><p>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：<br><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/algorithm/20210407180743590.png" alt=""></p><p>所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。通过 2x=n 求解 x 这个问题我们想高中应该就学过了，我就不多说了。x=log2n，所以，这段代码的时间复杂度就是 O(log2n)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span></span> &#123;</span><br><span class="line">    i := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; n &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        i = i * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据我刚刚讲的思路，很简单就能看出来，这段代码的时间复杂度为 O(log3n)。</p><p>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)。为什么呢？</p><p>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 * log2n，所以 O(log3n) = O(C * log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p><p>如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</p><ul><li>O(m+n)、O(m*n):</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当加法法则由两个数据规模决定，并且不能评估出哪一个的量级更大时，</span></span><br><span class="line"><span class="comment">// 就不能使用加法法则而省略掉其中一个，需要将两个都相加，即 O(m+n)</span></span><br><span class="line"><span class="comment">// 但乘法法则继续有效 O(m*n)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum_1 := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 时间复杂度为 O(m)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; m; ++i &#123;</span><br><span class="line">        sum_1 = sum_1 + i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum_2 := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 时间复杂度为 O(n)</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; n; ++j &#123;</span><br><span class="line">        sum_2 = sum_2 + j</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总的时间复杂度为 O(m+n)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum_1 + sum_2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</p><p>针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)*T2(n) = O(f(m) * f(n))。</p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>表示算法的存储空间与数据规模之间的增长关系</p><p>前面，咱们花了很长时间讲大 O 表示法和时间复杂度分析，理解了前面讲的内容，空间复杂度分析方法学起来就非常简单了。</p><p>前面我讲过，时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。</p><p>我还是拿具体的例子来给你说明。（这段代码有点“傻”，一般没人会这么写，我这么写只是为了方便给你解释。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(n <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 常量级存储空间，和n无关，可以忽略</span></span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请了大小为n的int型数组，占用了n的空间大小</span></span><br><span class="line">    <span class="keyword">var</span> array [n]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面代码没有占用更多的空间</span></span><br><span class="line">    <span class="keyword">for</span> ; i &lt; n; ++i &#123;</span><br><span class="line">        array[i] = i * i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i &#123;</span><br><span class="line">        fmt.Println(array[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所以整段代码空间复杂度为 O(n)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常见的空间复杂度有: O(1)、O(n)、O(n^2)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p><p>我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。</p><h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>基础复杂度分析的知识到此就讲完了，我们来总结一下。</p><p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。等你学完整个专栏之后，你就会发现几乎所有的数据结构和算法的复杂度都跑不出这几个。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/algorithm/2021040718083419.png" alt=""></p><h2 id="浅析最好、最坏、平均、均摊时间复杂度"><a href="#浅析最好、最坏、平均、均摊时间复杂度" class="headerlink" title="浅析最好、最坏、平均、均摊时间复杂度"></a>浅析最好、最坏、平均、均摊时间复杂度</h2><p>我们讲了复杂度的大 O 表示法和几个分析技巧，还举了一些常见复杂度分析的例子，比如 O(1)、O(logn)、O(n)、O(nlogn) 复杂度分析。掌握了这些内容，对于复杂度分析这个知识点，你已经可以到及格线了。但是，我想你肯定不会满足于此。</p><p>今天我会继续给你讲四个复杂度分析方面的知识点，最好情况时间复杂度（best case time complexity）、最坏情况时间复杂度（worst case time complexity）、平均情况时间复杂度（average case time complexity）、均摊时间复杂度（amortized time complexity）。如果这几个概念你都能掌握，那对你来说，复杂度分析这部分内容就没什么大问题了。</p><h3 id="最好、最坏情况时间复杂度"><a href="#最好、最坏情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度"></a>最好、最坏情况时间复杂度</h3><p>上一节我举的分析复杂度的例子都很简单，今天我们来看一个稍微复杂的。你可以用我上节教你的分析技巧，自己先试着分析一下这段代码的时间复杂度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n表示数组array的长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(array []<span class="keyword">int</span>,n <span class="keyword">int</span>,x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    pos := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> ;i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> array[i] == x &#123;</span><br><span class="line">pos = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reture pos</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你应该可以看出来，这段代码要实现的功能是，在一个无序的数组（array）中，查找变量 x 出现的位置。如果没有找到，就返回 -1。按照上节课讲的分析方法，这段代码的复杂度是 O(n)，其中，n 代表数组的长度。</p><p>我们在数组中查找一个数据，并不需要每次都把整个数组都遍历一遍，因为有可能中途找到就可以提前结束循环了。但是，这段代码写得不够高效。我们可以这样优化一下这段查找代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n表示数组array的长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(array []<span class="keyword">int</span>,n <span class="keyword">int</span>,x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    pos := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> ;i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> array[i] == x &#123;</span><br><span class="line">pos = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reture pos</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候，问题就来了。我们优化完之后，这段代码的时间复杂度还是 O(n) 吗？很显然，咱们上一节讲的分析方法，解决不了这个问题。</p><p>因为，要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。</p><p>所以，不同的情况下，这段代码的时间复杂度是不一样的。</p><p>为了表示代码在不同情况下的不同时间复杂度，我们需要引入三个概念：最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。</p><p>顾名思义，最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。就像我们刚刚讲到的，在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。</p><p>同理，最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。就像刚举的那个例子，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p><h3 id="平均情况时间复杂度"><a href="#平均情况时间复杂度" class="headerlink" title="平均情况时间复杂度"></a>平均情况时间复杂度</h3><p>我们都知道，最好情况时间复杂度和最坏情况时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大。为了更好地表示平均情况下的复杂度，我们需要引入另一个概念：平均情况时间复杂度，后面我简称为平均时间复杂度。</p><p>平均时间复杂度又该怎么分析呢？我还是借助刚才查找变量 x 的例子来给你解释。</p><p>要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：<br><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/algorithm/20210407180920181.png" alt=""></p><p>我们知道，时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，咱们把刚刚这个公式简化之后，得到的平均时间复杂度就是 O(n)。</p><p>这个结论虽然是正确的，但是计算过程稍微有点儿问题。究竟是什么问题呢？我们刚讲的这 n+1 种情况，出现的概率并不是一样的。我带你具体分析一下。（这里要稍微用到一点儿概率论的知识，不过非常简单，你不用担心。）</p><p>我们知道，要查找的变量 x，要么在数组里，要么就不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便你理解，我们假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p><p>因此，前面的推导过程中存在的最大问题就是，没有将各种情况发生的概率考虑进去。如果我们把每种情况发生的概率也考虑进去，那平均时间复杂度的计算过程就变成了这样：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/algorithm/20210407180930669.png" alt=""></p><p>这个值就是概率论中的加权平均值，也叫作期望值，所以平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。</p><p>引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p><p>你可能会说，平均时间复杂度分析好复杂啊，还要涉及概率论的知识。实际上，在大多数情况下，我们并不需要区分最好、最坏、平均情况时间复杂度三种情况。像我们上一节课举的那些例子那样，很多时候，我们使用一个复杂度就可以满足需求了。只有同一块代码在不同的情况下，时间复杂度有量级的差距，我们才会使用这三种复杂度表示法来区分。</p><h3 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h3><p>到此为止，你应该已经掌握了算法复杂度分析的大部分内容了。下面我要给你讲一个更加高级的概念，均摊时间复杂度，以及它对应的分析方法，摊还分析（或者叫平摊分析）。</p><p>均摊时间复杂度，听起来跟平均时间复杂度有点儿像。对于初学者来说，这两个概念确实非常容易弄混。我前面说了，大部分情况下，我们并不需要区分最好、最坏、平均三种复杂度。平均复杂度只在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p><p>老规矩，我还是借助一个具体的例子来帮助你理解。（当然，这个例子只是我为了方便讲解想出来的，实际上没人会这么写。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n表示数组array的长度</span></span><br><span class="line">array := <span class="built_in">make</span>([]<span class="keyword">int</span>,n)</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(val <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> count == <span class="built_in">len</span>(array) &#123;</span><br><span class="line">        sum := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(array); i++ &#123;</span><br><span class="line">            sum = sum + array[i]</span><br><span class="line">        &#125;</span><br><span class="line">        array[<span class="number">0</span>] = sum</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    array[count] = val</span><br><span class="line">    ++count</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我先来解释一下这段代码。这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p><p>那这段代码的时间复杂度是多少呢？你可以先用我们刚讲到的三种时间复杂度的分析方法来分析一下。</p><p>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p><p>那平均时间复杂度是多少呢？答案是 O(1)。我们还是可以通过前面讲的概率论的方法来分析。</p><p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/algorithm/20210407180952797.png" alt=""></p><p>至此为止，前面的最好、最坏、平均时间复杂度的计算，理解起来应该都没有问题。但是这个例子里的平均复杂度分析其实并不需要这么复杂，不需要引入概率论的知识。这是为什么呢？我们先来对比一下这个 insert() 的例子和前面那个 find() 的例子，你就会发现这两者有很大差别。</p><p>首先，find() 函数在极端情况下，复杂度才为 O(1)。但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。</p><p>我们再来看第二个不同的地方。对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。所以，针对这样一种特殊场景的复杂度分析，我们并不需要像之前讲平均复杂度分析方法那样，找出所有的输入情况及相应的发生概率，然后再计算加权平均值。</p><p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：摊还分析法，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。</p><p>那究竟如何使用摊还分析法来分析算法的均摊时间复杂度呢？</p><p>我们还是继续看在数组中插入数据的这个例子。每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。这就是均摊分析的大致思路。你都理解了吗？</p><p>均摊时间复杂度和摊还分析应用场景比较特殊，所以我们并不会经常用到。为了方便你理解、记忆，我这里简单总结一下它们的应用场景。如果你遇到了，知道是怎么回事儿就行了。</p><p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p><p>尽管很多数据结构和算法书籍都花了很大力气来区分平均时间复杂度和均摊时间复杂度，但其实我个人认为，均摊时间复杂度就是一种特殊的平均时间复杂度，我们没必要花太多精力去区分它们。你最应该掌握的是它的分析方法，摊还分析。至于分析出来的结果是叫平均还是叫均摊，这只是个说法，并不重要。</p><h3 id="内容小结-1"><a href="#内容小结-1" class="headerlink" title="内容小结"></a>内容小结</h3><p>今天我们学习了几个复杂度分析相关的概念，分别有：最好情况时间复杂度、最坏情况时间复杂度、平均情况时间复杂度、均摊时间复杂度。之所以引入这几个复杂度概念，是因为，同一段代码，在不同输入的情况下，复杂度量级有可能是不一样的。</p><p>在引入这几个概念之后，我们可以更加全面地表示一段代码的执行效率。而且，这几个概念理解起来都不难。最好、最坏情况下的时间复杂度分析起来比较简单，但平均、均摊两个复杂度分析相对比较复杂。如果你觉得理解得还不是很深入，不用担心，在后续具体的数据结构和算法学习中，我们可以继续慢慢实践！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Baron_ND/artic
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://wangyangyangisme.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Actions入门教程</title>
    <link href="http://wangyangyangisme.github.io/posts/2fcceac/"/>
    <id>http://wangyangyangisme.github.io/posts/2fcceac/</id>
    <published>2021-05-18T15:00:40.000Z</published>
    <updated>2021-05-18T15:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Actions入门教程"><a href="#GitHub-Actions入门教程" class="headerlink" title="GitHub Actions入门教程"></a>GitHub Actions入门教程</h1><blockquote><p><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p><p><a href="https://www.cnblogs.com/i-code/p/12869046.html">https://www.cnblogs.com/i-code/p/12869046.html</a></p><p><a href="https://segmentfault.com/a/1190000022360769">https://segmentfault.com/a/1190000022360769</a></p></blockquote><h2 id="一、GitHub-Actions-是什么？"><a href="#一、GitHub-Actions-是什么？" class="headerlink" title="一、GitHub Actions 是什么？"></a>一、GitHub Actions 是什么？</h2><p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p><p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p><p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p><p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 action。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/git/2021-05-18_230758.png" alt="img"></p><p>上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 action。比如，<code>actions/setup-node</code>就表示<code>github.com/actions/setup-node</code>这个<a href="https://github.com/actions/setup-node">仓库</a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions">github.com/actions</a> 里面。</p><p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href="https://help.github.com/en/articles/about-actions#versioning-your-action">官方文档</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actions/setup-node@74bc508 <span class="comment"># 指向一个 commit</span></span><br><span class="line">actions/setup-node@v1.0    <span class="comment"># 指向一个标签</span></span><br><span class="line">actions/setup-node@master  <span class="comment"># 指向一个分支</span></span><br></pre></td></tr></table></figure><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>GitHub Actions 有一些自己的术语。</p><p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h2 id="三、workflow-文件"><a href="#三、workflow-文件" class="headerlink" title="三、workflow 文件"></a>三、workflow 文件</h2><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p><p>workflow 文件采用 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 格式</a>，文件名可以任意取，但是后缀名统一为<code>.yml</code>，比如<code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p><p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions">官方文档</a>。下面是一些基本字段。</p><p><strong>（1）<code>name</code></strong></p><p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">GitHub</span> <span class="string">Actions</span> <span class="string">Demo</span></span><br></pre></td></tr></table></figure><p><strong>（2）<code>on</code></strong></p><p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br></pre></td></tr></table></figure><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br></pre></td></tr></table></figure><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p><p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p><p><strong>（3）<code>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</code></strong></p><p>指定触发事件时，可以限定分支或标签。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span>    </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p><p><strong>（4）<code>jobs.&lt;job_id&gt;.name</code></strong></p><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">my_first_job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">job</span></span><br><span class="line">  <span class="attr">my_second_job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">second</span> <span class="string">job</span></span><br></pre></td></tr></table></figure><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><p><strong>（5）<code>jobs.&lt;job_id&gt;.needs</code></strong></p><p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">job1:</span></span><br><span class="line">  <span class="attr">job2:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">job1</span></span><br><span class="line">  <span class="attr">job3:</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">job1</span>, <span class="string">job2</span>]</span><br></pre></td></tr></table></figure><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><p><strong>（6）<code>jobs.&lt;job_id&gt;.runs-on</code></strong></p><p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><ul><li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li><li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li><li><code>macOS-latest</code>或<code>macOS-10.14</code></li></ul><p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br></pre></td></tr></table></figure><p><strong>（7）<code>jobs.&lt;job_id&gt;.steps</code></strong></p><p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><ul><li><code>jobs.&lt;job_id&gt;.steps.name</code>：步骤名称。</li><li><code>jobs.&lt;job_id&gt;.steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs.&lt;job_id&gt;.steps.env</code>：该步骤所需的环境变量。</li></ul><p>下面是一个完整的 workflow 文件的范例。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Greeting</span> <span class="string">from</span> <span class="string">Mona</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">my-job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">Job</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">a</span> <span class="string">greeting</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">MY_VAR:</span> <span class="string">Hi</span> <span class="string">there!</span> <span class="string">My</span> <span class="string">name</span> <span class="string">is</span></span><br><span class="line">        <span class="attr">FIRST_NAME:</span> <span class="string">Mona</span></span><br><span class="line">        <span class="attr">MIDDLE_NAME:</span> <span class="string">The</span></span><br><span class="line">        <span class="attr">LAST_NAME:</span> <span class="string">Octocat</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">$MY_VAR</span> <span class="string">$FIRST_NAME</span> <span class="string">$MIDDLE_NAME</span> <span class="string">$LAST_NAME.</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h2 id="四、项目发布到-GitHub-Pages"><a href="#四、项目发布到-GitHub-Pages" class="headerlink" title="四、项目发布到 GitHub Pages"></a>四、项目发布到 GitHub Pages</h2><blockquote><p><a href="https://github.com/sma11black/hexo-action">https://github.com/sma11black/hexo-action</a></p></blockquote><p><strong>如何添加您的ssh密钥对？</strong></p><p>1.运行以下终端命令，将电子邮件替换为连接到您的GitHub帐户的电子邮件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;626562203@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>2.在<em>Github Pages</em>存储库中：在存储库部署密钥菜单中添加公共密钥的内容。 您可以通过转到“Settings &gt; Deploy Keys”找到此选项，可以随意命名公用密钥，但是您确实需要授予其写访问权限。</p><p>3.在“ hexo源代码”存储库中：将私钥的内容作为DEPLOY_KEY添加到“Settings &gt; Secrets”菜单中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else).</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">wangyyovo</span>  <span class="comment"># (or delete this input setting to use bot account)</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="number">626562203</span><span class="string">@qq.com</span>  <span class="comment"># (or delete this input setting to use bot account)</span></span><br><span class="line">        <span class="attr">commit_msg:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span>  <span class="comment"># (or delete this input setting to use hexo default settings)</span></span><br><span class="line">    <span class="comment"># Use the output from the `deploy` step(use for test action)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><a href="https://help.github.com/en/categories/automating-your-workflow-with-github-actions">GitHub Pages 官方文档</a></li><li><a href="https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/">Github Actions for web apps</a>, Luke Boyle</li><li><a href="https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851">My First Week With GitHub Actions</a>, Adam Zolyak</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub-Actions入门教程&quot;&gt;&lt;a href=&quot;#GitHub-Actions入门教程&quot; class=&quot;headerlink&quot; title=&quot;GitHub Actions入门教程&quot;&gt;&lt;/a&gt;GitHub Actions入门教程&lt;/h1&gt;&lt;blockquo
      
    
    </summary>
    
    
      <category term="git" scheme="http://wangyangyangisme.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://wangyangyangisme.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>图解设计模式</title>
    <link href="http://wangyangyangisme.github.io/posts/54deb0e2/"/>
    <id>http://wangyangyangisme.github.io/posts/54deb0e2/</id>
    <published>2021-05-16T15:30:56.000Z</published>
    <updated>2021-05-16T15:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图解设计模式"><a href="#图解设计模式" class="headerlink" title="图解设计模式"></a>图解设计模式</h1><blockquote><p><a href="http://tigerb.cn/2021/03/07/patterns-picture/">http://tigerb.cn/2021/03/07/patterns-picture/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>常常听别人说设计模式不太容易理解，以及学习设计模式到底能帮我们解决什么问题，今天我们就用几张图来看看：</p><ul><li>设计模式到底是什么？</li><li>为什么我们需要学习设计模式？</li></ul><h2 id="我也写过烂代码"><a href="#我也写过烂代码" class="headerlink" title="我也写过烂代码"></a><strong>我也写过烂代码</strong></h2><p>是的，没什么，我也写过烂代码，刚毕业时业务逻辑也会一个函数干到底，只知道能实现功能就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">func YourFunc() &#123;</span><br><span class="line">&#x2F;&#x2F; 所有的逻辑代码一股脑写完......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307142851.png" alt="图片"></p><h2 id="知道了拆分函数"><a href="#知道了拆分函数" class="headerlink" title="知道了拆分函数"></a><strong>知道了拆分函数</strong></h2><p>自然而然知道了需要合理拆分函数。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144449.png" alt="图片"></p><p>然后把各个函数组织起来。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144537.png" alt="图片"></p><h2 id="面临新的困境"><a href="#面临新的困境" class="headerlink" title="面临新的困境"></a><strong>面临新的困境</strong></h2><p>某一天产品的需求需要支持新的场景，发现某一处的代码逻辑有变动需要支持新的场景，怎么办？</p><ol><li>整个代码拷贝一份？不会有人这么干吧？(其实我还真见过，你们呢😏)</li><li>把绿色变动的代码块，复制成一个新的函数，修改为新场景使用的函数？</li><li>把变动的代码再提为两个新函数，一个绿色为老代码，一个蓝色为新场景代码？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144548.png" alt="图片"></p><p>上面这种解决问题的方式就是面向过程的编程思想。</p><h2 id="我们都在变优秀"><a href="#我们都在变优秀" class="headerlink" title="我们都在变优秀"></a><strong>我们都在变优秀</strong></h2><p>随着我们不断的学习，学会使用了面向对象的特性。</p><p>以往函数式编程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 函数式编程</span><br><span class="line">&#x2F;&#x2F; 把一个个你以为可以独立的逻辑封住到一个函数里</span><br><span class="line">func YourFunc() &#123;</span><br><span class="line">&#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象编程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 面向对象编程</span><br><span class="line">&#x2F;&#x2F; 把不同的逻辑独立成一个对象</span><br><span class="line">type DemoStruct struct&#123;&#125;</span><br><span class="line"> </span><br><span class="line">func (d *DemoStruct) YourFunc() &#123;</span><br><span class="line">&#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144805.png" alt="图片"></p><p>所以，我们如何用面向对象的思想组织上面的代码呢？</p><p>答案：继承。</p><h2 id="学会了使用继承"><a href="#学会了使用继承" class="headerlink" title="学会了使用继承"></a><strong>学会了使用继承</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">特别备注：Go里面用合成复用</span><br></pre></td></tr></table></figure><p>定义一个父类，并把差异业务代码抽象为一个抽象函数，其他代码逻辑都实现在父类。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145233.png" alt="图片"></p><p>不同的场景定义为不同的子类，子类继承父类，并实现抽象方法(也就是写差异代码)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">灰色：父类</span><br><span class="line">绿色：场景一子类</span><br><span class="line">蓝色：场景二子类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145350.png" alt="图片"></p><p>是不是很优雅的解决上面的场景的问题。</p><h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a><strong>什么是设计模式？</strong></h2><p>优雅的解决上面场景问题时，利用面向对象特性的经验总结，就是设计模式。然而在历史的长河中，已经为我们总结了20+的常用设计模式，我们只需要学习和加以灵活运用即可。比如：</p><h3 id="这！就是模板模式"><a href="#这！就是模板模式" class="headerlink" title="这！就是模板模式"></a><strong>这！就是模板模式</strong></h3><p>还记得上面使用继承的过程吗？其实我们只需要做一件事情，就是经典的模板模式了，是什么？</p><p>答案：保证该场景下父类中封装的方法调用过程是稳定不变的，只是其中的方法可能变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">灰色：父类</span><br><span class="line">绿色：场景一子类</span><br><span class="line">蓝色：场景二子类</span><br><span class="line">黄色：场景三子类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145530.png" alt="图片"></p><h3 id="这！就是策略模式"><a href="#这！就是策略模式" class="headerlink" title="这！就是策略模式"></a><strong>这！就是策略模式</strong></h3><p>我们把上面代码做些改动：</p><ol><li>不使用继承。</li><li>定义一个接口interface类型。</li><li>变更原抽象方法为调用一个接口interface类型的函数。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; DemoInterface 接口</span><br><span class="line">type DemoInterface interface &#123;</span><br><span class="line">    DoSomething(ctx *Context) error </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var CurrentStrategyInstance DemoInterface</span><br><span class="line"> </span><br><span class="line">func Demo() &#123;</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">CurrentStrategyInstance.DoSomething(c)</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">&#125;</span><br><span class="line">灰色：主业务类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145603.png" alt="图片"></p><ol><li>不同的场景定义为一个具体的类，且实现上面的interface。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">灰色：主业务类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145617.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">灰色：主业务类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145643.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">灰色：主业务类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br><span class="line">黄色：场景三DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145705.png" alt="图片"></p><ol><li>最后我们判断不同的场景初始化不同的具体类，再调用即可。</li></ol><h2 id="这！就是简单工厂模式-策略模式"><a href="#这！就是简单工厂模式-策略模式" class="headerlink" title="这！就是简单工厂模式 + 策略模式"></a><strong>这！就是简单工厂模式 + 策略模式</strong></h2><p>接着我们把判断不同的场景初始化不同的具体类单独封装起来，这就是简单工厂模式 + 策略模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">type DemoFactory struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Get 获取实例</span><br><span class="line">func (f *DemoFactory) Get(instanceType string) DemoInterface &#123;</span><br><span class="line">switch instanceType &#123;</span><br><span class="line">case &quot;DemoA&quot;:</span><br><span class="line">return &amp;DemoA&#123;&#125;</span><br><span class="line">case &quot;DemoB&quot;:</span><br><span class="line">return &amp;DemoB&#123;&#125;</span><br><span class="line">case &quot;DemoC&quot;:</span><br><span class="line">return &amp;DemoC&#123;&#125;</span><br><span class="line"> </span><br><span class="line">default:</span><br><span class="line">panic(&quot;不支持的类型&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; DemoInterface 接口</span><br><span class="line">type DemoInterface interface &#123;</span><br><span class="line">    DoSomething(ctx *Context) error </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var CurrentStrategyInstance DemoInterface</span><br><span class="line"> </span><br><span class="line">func Demo() &#123;</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">  CurrentStrategyInstance &#x3D; (DemoFactory&#123;&#125;).Get(&quot;DemoA&quot;)</span><br><span class="line">CurrentStrategyInstance.DoSomething(c)</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">&#125;</span><br><span class="line">灰色(大)：主业务类</span><br><span class="line">灰色(小)：简单工厂类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br><span class="line">黄色：场景三DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307154154.png" alt="图片"></p><h2 id="这！就是状态模式"><a href="#这！就是状态模式" class="headerlink" title="这！就是状态模式"></a><strong>这！就是状态模式</strong></h2><p>假设判断上面使用何种策略不是依赖外部，而是依赖内部状态，则我们调整下代码，则就变成了状态模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"></span><br><span class="line">var currentStateInstance DemoInterface</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">    &#x2F;&#x2F; 定时器更新状态</span><br><span class="line">    go func() &#123;</span><br><span class="line">        for &#123;</span><br><span class="line">            select &#123;</span><br><span class="line">            case t :&#x3D; &lt;-time.NewTicker(1 * time.Second).C:</span><br><span class="line">                &#x2F;&#x2F; 模拟变成状态 StateA</span><br><span class="line">                currentStateInstance &#x3D; setState(&quot;StateA&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Get 获取实例</span><br><span class="line">func setState(State string) DemoInterface &#123;</span><br><span class="line">  &#x2F;&#x2F; 变更状态</span><br><span class="line">switch State &#123;</span><br><span class="line">case &quot;StateA&quot;:</span><br><span class="line">return &amp;StateA&#123;&#125;</span><br><span class="line">case &quot;StateB&quot;:</span><br><span class="line">return &amp;StateB&#123;&#125;</span><br><span class="line">case &quot;StateC&quot;:</span><br><span class="line">return &amp;StateC&#123;&#125;</span><br><span class="line"> </span><br><span class="line">default:</span><br><span class="line">panic(&quot;不支持的状态&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; DemoInterface 接口</span><br><span class="line">type DemoInterface interface &#123;</span><br><span class="line">    DoSomething(ctx *Context) error </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; type StateA StateB StateC 略</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 模拟</span><br><span class="line">func Demo() &#123;</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">CurrentStateInstance.DoSomething(c)</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">&#125;</span><br><span class="line">灰色(大)：主业务类</span><br><span class="line">灰色(小)：修改内部状态的函数</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br><span class="line">黄色：场景三DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307160512.png" alt="图片"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>举了这么多🌰，所以关于：</p><ul><li>设计模式到底是什么？</li><li>为什么我们需要学习设计模式？</li></ul><p>你有答案了吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图解设计模式&quot;&gt;&lt;a href=&quot;#图解设计模式&quot; class=&quot;headerlink&quot; title=&quot;图解设计模式&quot;&gt;&lt;/a&gt;图解设计模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tigerb.cn/2021/03/07/patt
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的设计过程</title>
    <link href="http://wangyangyangisme.github.io/posts/88f78d2f/"/>
    <id>http://wangyangyangisme.github.io/posts/88f78d2f/</id>
    <published>2021-05-16T15:24:56.000Z</published>
    <updated>2021-05-16T15:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的设计过程"><a href="#面向对象的设计过程" class="headerlink" title="面向对象的设计过程"></a>面向对象的设计过程</h1><blockquote><p><a href="http://tigerb.cn/2019/10/11/oop/">http://tigerb.cn/2019/10/11/oop/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我一直认为分享的目的不是炫技。</p><ul><li>一是，自我学习的总结。</li><li>二是，降低他人的学习成本。</li><li>三是，别人对自己学习结果的审核。</li></ul><p>同时，本次分享有下面四个要素：</p><table><thead><tr><th align="left">观点</th><th align="left">本次分享的观点是一个软件工程中的思维方法，不限于编程语言</th></tr></thead><tbody><tr><td align="left"><strong>探讨</strong></td><td align="left"><strong>我可能理解错的，或者大家没理解的，欢迎大家积极评论，尽可能多互动，目的增加理解</strong></td></tr><tr><td align="left"><strong>理解</strong></td><td align="left"><strong>真的希望大家能理解</strong></td></tr><tr><td align="left"><strong>运用</strong></td><td align="left"><strong>最重要的，如果你觉着有帮助，一定要去在实际业务中实战</strong></td></tr></tbody></table><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中，几乎大家经常抱怨别人写的代码：</p><ul><li>没法改</li><li>耦合高</li><li>无法扩展</li></ul><blockquote><p>今天就来探讨如何<strong>克服</strong>上面的问题～</p></blockquote><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>首先问个问题：</p><blockquote><p>平常工作中来了一个业务需求，我们是如何开始写代码的？</p></blockquote><p>我推测大多数人可能：</p><ul><li>1、梳理业务</li><li>2、设计数据库、接口、缓存</li><li>3、评审</li><li>4、于是就开始了 <code>怎么怎么样...如果怎么怎么样...怎么怎么样...</code>愉快的码代码的过程</li></ul><blockquote><p>此处有人觉着有啥问题么？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">备注：说出来问题的，本次分享就可以略过了~</span><br></pre></td></tr></table></figure><h3 id="一个简单的业务场景"><a href="#一个简单的业务场景" class="headerlink" title="一个简单的业务场景"></a>一个简单的业务场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">比如产品提了个需求：</span><br><span class="line">描述“我一个同事”一天的生活，简单来看看他一天干些啥：</span><br><span class="line"></span><br><span class="line">1.0 饿了吃饭</span><br><span class="line">1.1 到点吃饭</span><br><span class="line"></span><br><span class="line">2.0 渴了喝水</span><br><span class="line">2.1 到点喝水</span><br><span class="line"></span><br><span class="line">3.0 困了睡觉</span><br><span class="line">3.1 到点睡觉</span><br><span class="line">3.2 有可能一个人睡觉，也有可能... 是吧？复杂</span><br></pre></td></tr></table></figure><p>刚开始，一个业务逻辑从头写到尾</p><p><a href="http://cdn.tigerb.cn/20191020234013.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234013.png" alt="img"></a></p><p>一个业务逻辑(拆成多个函数)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020234051.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234051.png" alt="img"></a></p><p>一个业务逻辑(引入类)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020234118.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234118.png" alt="img"></a></p><p>一个业务逻辑(拆成多个类方法)从头写到尾，也许、可能、貌似、猜测大多数人停留到了这个阶段。<br>问题：某一天多了社交的能力，咋办？</p><p><a href="http://cdn.tigerb.cn/20191020234526.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234526.png" alt="img"></a></p><p>一个业务逻辑(拆成多类)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020234848.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234848.png" alt="img"></a></p><p>一个业务逻辑(拆成类、抽象类、接口)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020235015.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235015.png" alt="img"></a></p><blockquote><p>思考🤔：上面的代码就没啥问题了吗？</p></blockquote><p>上面就是面向对象设计的代码结果。</p><blockquote><p>所以，如何设计出完全面向对象的代码？</p></blockquote><h2 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h2><blockquote><p>什么是代码建模？</p></blockquote><p>把业务抽象成事物(类class、抽象类abstact class)和行为(接口interface)的过程。</p><h3 id="实栗🌰分析"><a href="#实栗🌰分析" class="headerlink" title="实栗🌰分析"></a>实栗🌰分析</h3><p>又来看一个实际的业务场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最近“我一个同事”开始创业了，刚创立了一家电商公司，B2C，自营书籍《3分钟学会交际》。最近开始写提交订单的代码。</span><br><span class="line"></span><br><span class="line">⚠️注意场景 1.刚创业 2.简单的单体应用 3.此处不探讨架构</span><br></pre></td></tr></table></figure><p>一般来说，我们根据业务需求一顿分析，开始定义接口API、设计数据库、缓存、技术评审等就开始码代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">接口参数：</span><br><span class="line">uid</span><br><span class="line">address_id</span><br><span class="line">coupon_id</span><br><span class="line">.etc</span><br><span class="line"></span><br><span class="line">业务逻辑：</span><br><span class="line">参数校验-&gt;</span><br><span class="line">地址校验-&gt;</span><br><span class="line">其他校验-&gt;</span><br><span class="line">写订单表-&gt;</span><br><span class="line">写订单商品信息表-&gt;</span><br><span class="line">写日志-&gt;</span><br><span class="line">扣减商品库存-&gt;</span><br><span class="line">清理购物车-&gt;</span><br><span class="line">扣减各种促销优惠活动的库存-&gt;</span><br><span class="line">使用优惠券-&gt;</span><br><span class="line">其他营销逻辑等等-&gt;</span><br><span class="line">发送消息-&gt;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure><p>就开始写代码了<code>怎么怎么样...如果怎么怎么样...怎么怎么样...</code>一蹴而就、思路清晰、逻辑清楚、很快搞定完代码，很优秀是不是，值得鼓励。</p><p>但是，上面的结果就是大概所有人都见过的连续上千行的代码等等。上面的流程没啥问题啊，那正确的做法是什么了？就是接着要说的<strong>代码建模</strong>。</p><p>我们根据上面的场景，开始建模。</p><h3 id="业务分析少不了"><a href="#业务分析少不了" class="headerlink" title="业务分析少不了"></a>业务分析少不了</h3><p>同样，首先，我们看看<code>提交订单</code>这个业务场景要做的事情:</p><blockquote><p>换个角度看业务其实很简单：根据用户相关信息生成一个订单。</p></blockquote><ol><li><p>梳理得到业务逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参数校验-&gt;</span><br><span class="line">地址校验-&gt;</span><br><span class="line">其他校验-&gt;</span><br><span class="line">写订单表-&gt;</span><br><span class="line">写订单商品信息表-&gt;</span><br><span class="line">写日志-&gt;</span><br><span class="line">扣减商品库存-&gt;</span><br><span class="line">清理购物车-&gt;</span><br><span class="line">扣减各种促销优惠活动的库存-&gt;</span><br><span class="line">使用优惠券-&gt;</span><br><span class="line">其他营销逻辑等等-&gt;</span><br><span class="line">发送消息-&gt;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure></li><li><p>梳理业务逻辑依赖信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户信息</span><br><span class="line">商品信息</span><br><span class="line">地址信息</span><br><span class="line">优惠券信息</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure></li></ol><p>再次回归概念</p><blockquote><p>什么是代码建模？把业务抽象成事物(类class、抽象类abstact class)和行为(接口interface)的过程。</p></blockquote><h3 id="获取事物"><a href="#获取事物" class="headerlink" title="获取事物"></a>获取事物</h3><p>比如我们把订单生成的过程可以想象成<code>机器人</code>，一个生成订单的<code>订单生成机器人</code>，或者订单生成机器啥的，这样我们就得到了<code>代码建模</code>过程中的一个事物。</p><p>从而我们就可以把这个事物转化成一个类(或结构体)，或者抽象类。</p><p><a href="http://cdn.tigerb.cn/20191020223812.jpg"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020223812.jpg" alt="img"></a></p><h3 id="获取行为"><a href="#获取行为" class="headerlink" title="获取行为"></a>获取行为</h3><p>这些操作就是上面机器人要做的事情。</p><p>事物有了：<code>订单生成机器人</code><br>行为呢？毫无疑问就是上面各种业务逻辑。把具体的行为抽象成一个订单创建行为接口：</p><p><a href="http://cdn.tigerb.cn/20191020224230.jpg"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020224230.jpg" alt="img"></a></p><h3 id="得到UML"><a href="#得到UML" class="headerlink" title="得到UML"></a>得到UML</h3><p><a href="http://cdn.tigerb.cn/20191020233121.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020233121.png" alt="img"></a></p><h3 id="设计代码"><a href="#设计代码" class="headerlink" title="设计代码"></a>设计代码</h3><ol><li>定义一个类</li></ol><p><a href="http://cdn.tigerb.cn/20191020235309.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235309.png" alt="img"></a></p><ol><li>定义一个订单创建行为的接口</li></ol><p><a href="http://cdn.tigerb.cn/20191020235643.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235643.png" alt="img"></a></p><ol><li><p>定义具体的不同订单创建行为类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参数校验-&gt;</span><br><span class="line">地址校验-&gt;</span><br><span class="line">其他校验-&gt;</span><br><span class="line">写订单表-&gt;</span><br><span class="line">写订单商品信息表-&gt;</span><br><span class="line">写日志-&gt;</span><br><span class="line">扣减商品库存-&gt;</span><br><span class="line">清理购物车-&gt;</span><br><span class="line">扣减各种促销优惠活动的库存-&gt;</span><br><span class="line">使用优惠券-&gt;</span><br><span class="line">其他营销逻辑等等-&gt;</span><br><span class="line">发送消息-&gt;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure></li></ol><p><a href="http://cdn.tigerb.cn/20191020235840.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235840.png" alt="img"></a></p><ol><li>创建订单</li></ol><p>这里的代码该怎么写，这样？</p><p><a href="http://cdn.tigerb.cn/20191021000742.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021000742.png" alt="img"></a></p><p>还可以继续优化吗？</p><p><a href="http://cdn.tigerb.cn/20191021001002.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021001002.png" alt="img"></a></p><p>使用闭包。</p><p><a href="http://cdn.tigerb.cn/20191021001305.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021001305.png" alt="img"></a></p><h3 id="PHP版完整代码"><a href="#PHP版完整代码" class="headerlink" title="PHP版完整代码"></a>PHP版完整代码</h3><p><a href="http://cdn.tigerb.cn/20191024143840.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191024143840.png" alt="img"></a></p><h3 id="GO版完整代码"><a href="#GO版完整代码" class="headerlink" title="GO版完整代码"></a>GO版完整代码</h3><p><a href="http://cdn.tigerb.cn/20191024144623.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191024144623.png" alt="img"></a></p><blockquote><p>上面的代码有什么好处？</p></blockquote><p>假如“我一个同事”又要新开发一个新的应用，新的应用创建订单的时候又有新的逻辑，比如没有优惠逻辑、新增了增加用户积分的逻辑等等，复用上面的代码，是不是就很简单了。</p><p><a href="http://cdn.tigerb.cn/20191021001739.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021001739.png" alt="img"></a></p><blockquote><p>所以现在，什么是面向对象？</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h3><ul><li>对接口编程而不是对实现编程</li><li>优先使用对象组合而不是继承</li><li>抽象用于不同的事物，而接口用于事物的行为</li></ul><p>针对上面的概念，我们再回头开我们上面的代码</p><blockquote><p>对接口编程而不是对实现编程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：RobotOrderCreate依赖了BehaviorOrderCreateInterface抽象接口</span><br></pre></td></tr></table></figure><blockquote><p>优先使用对象组合而不是继承</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：完全没有使用继承，多个行为不同场景组合使用</span><br></pre></td></tr></table></figure><blockquote><p>抽象用于不同的事物，而接口用于事物的行为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">1. 抽象了一个创建订单的机器人 RobotOrderCreate</span><br><span class="line">2. 机器人又有不同的创建行为</span><br><span class="line">3. 机器人的创建行为最终依赖于BehaviorOrderCreateInterface接口</span><br></pre></td></tr></table></figure><p>是不是完美契合，所以这就是“面向对象的设计过程”。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码建模过程就是“面向对象的设计过程”的具体实现方式.</span><br></pre></td></tr></table></figure><h2 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><blockquote><p>最后，设计模式又是什么？</p></blockquote><p>同样，我们下结合上面的场景和概念预习下设计模式。</p><h4 id="设计模式的设计原则"><a href="#设计模式的设计原则" class="headerlink" title="设计模式的设计原则"></a>设计模式的设计原则</h4><blockquote><p>开闭原则（Open Close Principle）：对扩展开放，对修改封闭</p></blockquote><p>看看上面的最终的代码是不是完美契合。</p><p><a href="http://cdn.tigerb.cn/20191022131439.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191022131439.png" alt="img"></a></p><blockquote><p>依赖倒转原则：对接口编程，依赖于抽象而不依赖于具体</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：创建订单的逻辑从依赖具体的业务转变为依赖于抽象接口BehaviorOrderCreateInterface</span><br></pre></td></tr></table></figure><blockquote><p>接口隔离原则：使用多个接口，而不是对一个接口编程，去依赖降低耦合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">结果：上面的场景，我们只简单定义了订单创建的接BehaviorOrderCreateInterface。由于订单创建过程可能出现异常回滚，我们就需要再定义一个订单创建回滚的接口</span><br><span class="line">BehaviorOrderCreateRollBackInterface.</span><br></pre></td></tr></table></figure><blockquote><p>迪米特法则，又称最少知道原则：减少内部依赖，尽可能的独立</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：还是上面那段代码，我们把RobotOrderCreate机器人依赖的行为通过外部注入的方式使用。</span><br></pre></td></tr></table></figure><blockquote><p>合成复用原则：多个独立的实体合成聚合，而不是使用继承</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：RobotOrderCreate依赖了多个实际的订单创建行为类。</span><br></pre></td></tr></table></figure><blockquote><p>里氏代换：超类（父类）出现的地方，派生类（子类）都可以出现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：不好意思，我们完全没用继承。（备注：继承容易造成父类膨胀。）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象的设计过程&quot;&gt;&lt;a href=&quot;#面向对象的设计过程&quot; class=&quot;headerlink&quot; title=&quot;面向对象的设计过程&quot;&gt;&lt;/a&gt;面向对象的设计过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tigerb.cn/201
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/bfac6395/"/>
    <id>http://wangyangyangisme.github.io/posts/bfac6395/</id>
    <published>2021-05-16T06:31:03.000Z</published>
    <updated>2021-05-16T06:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><p>我的代码没有<code>else</code>系列-简单工厂</p><p>结合实际业务谈设计模式</p><p>业务场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用一个服务生成静态页面</span><br><span class="line">不同的页面拥有不同的模块</span><br></pre></td></tr></table></figure><p>不同的页面的数据结构不一样<br>生成不同的页面对象</p><p>正常代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header      <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">footer      <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header  <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">footer  <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := &amp;Context&#123;</span><br><span class="line">URI: <span class="string">&quot;cart/list&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pageObject PageInterface</span><br><span class="line"><span class="keyword">switch</span> c.URI &#123;</span><br><span class="line"><span class="keyword">case</span> CartConst:</span><br><span class="line">pageObject = &amp;Cart&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProductConst:</span><br><span class="line">pageObject = &amp;Product&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;不支持的页面&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pageObject.MakeData(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单工厂模式的概念<br>简单理解，一句话：</p><blockquote><p>统一封装生产对象的过程</p></blockquote><p>简单工厂模式下的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//简单工厂模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageFactory 构建页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> PageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> p.Ctx.URI &#123;</span><br><span class="line"><span class="keyword">case</span> CartConst:</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProductConst:</span><br><span class="line"><span class="keyword">return</span> &amp;Product&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;不支持的页面&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">URI: <span class="string">&quot;cart/list&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">pageFactory := &amp;PageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;</span><br><span class="line">pageFactory.Get().MakeData(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageFactoryInterface 页面简单工厂接口</span></span><br><span class="line"><span class="keyword">type</span> PageFactoryInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Get() PageInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> CartPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *CartPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProductPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> ProductPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *ProductPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成购物车页面数据对象</span></span><br><span class="line">(&amp;CartPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成spu详情页面数据对象</span></span><br><span class="line">(&amp;ProductPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抽象工厂</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//抽象工厂模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageFactoryInterface 页面简单工厂接口</span></span><br><span class="line"><span class="keyword">type</span> PageFactoryInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Get() PageInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> CartPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *CartPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProductPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> ProductPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *ProductPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成购物车页面数据对象</span></span><br><span class="line">(&amp;CartPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成spu详情页面数据对象</span></span><br><span class="line">(&amp;ProductPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tigerb.cn/&quot;&gt;http://tigerb.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的代码没有&lt;code&gt;else&lt;/code&gt;系列-简单工厂&lt;/p&gt;
&lt;p&gt;结合实际业务谈设计模式&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>并发组件 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/11cee220/"/>
    <id>http://wangyangyangisme.github.io/posts/11cee220/</id>
    <published>2021-05-16T06:31:02.000Z</published>
    <updated>2021-05-16T06:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发组件-Go设计模式实战"><a href="#并发组件-Go设计模式实战" class="headerlink" title="并发组件 | Go设计模式实战"></a>并发组件 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「组合模式」结合Go语言天生的并发特性，如何在真实业务场景中使用。</p><p>之前文章<a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">《代码组件 | Go设计模式实战》</a>已经介绍了「组合模式」的概念，以及在业务中的使用。今天我们结合Go语言天生的并发特性，升级「组合模式」为「并发组合模式」。</p><p>我们先来简单回顾下「组合模式」的知识，详细可以查看上篇文章<a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">《代码组件 | Go设计模式实战》</a></p><h2 id="什么是「并发组合模式」？"><a href="#什么是「并发组合模式」？" class="headerlink" title="什么是「并发组合模式」？"></a>什么是「并发组合模式」？</h2><p>组合模式的概念：</p><blockquote><p>一个具有层级关系的对象由一系列拥有父子关系的对象通过树形结构组成。</p></blockquote><p>并发组合模式的概念：</p><blockquote><p>一个具有层级关系的对象由一系列拥有父子关系的对象通过树形结构组成，子对象即可被串行执行，也可被并发执行</p></blockquote><p>并发组合模式的优势：</p><ul><li>原本串行的业务(存在阻塞的部分，比如网络IO等)可以被并发执行，利用多核优势提升性能。</li></ul><h2 id="什么真实业务场景可以用「并发组合模式」？"><a href="#什么真实业务场景可以用「并发组合模式」？" class="headerlink" title="什么真实业务场景可以用「并发组合模式」？"></a>什么真实业务场景可以用「并发组合模式」？</h2><p>我们还是以「组合模式」中的“订单结算页面”为例，继续来看看某东的订单结算页面：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200331124724.jpeg" style="width:30%"></p><p>从页面的展示形式上，可以看出：</p><ul><li>页面由多个模块构成，比如：<ul><li>地址模块：获取用户地址数据</li><li>支付方式模块：获取支付方式列表</li><li>店铺模块：获取店铺、购物车选中商品等信息</li><li>发票模块：获取发票类型列表</li><li>优惠券模块：获取用户优惠券列表</li><li>某豆模块：获取用户积分信息</li><li>礼品卡模块：获取礼品卡列表列表</li><li>订单详细金额模块：获取订单金额信息</li></ul></li><li>单个模块可以由多个子模块构成<ul><li>店铺模块，又由如下模块构成：<ul><li>商品模块：获取购物车选中商品信息</li><li>售后模块：获取商品售后信息</li><li>优惠模块：获取商品参与的优惠活动信息</li><li>物流模块：获取商品支持的配送方式列表</li></ul></li></ul></li></ul><p>按照「组合模式」的业务逻辑执行流程：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20201103203539.png" style="width:38%"></p><p>但是，我们很清楚有些模块之间并没有依赖，<strong>且该模块涉及服务远程调用等阻塞操作</strong>，比如：</p><ul><li>地址模块调用地址服务获取用户地址数据时。</li><li>支付方式模块也可以同时去读redis获取支付方式列表数据等等。</li></ul><p>所以:<strong>有的模块其实可以被并发的执行</strong>。</p><p>如果把上面不存在依赖关系的模块修改为并发的执行，则我们得到如下的执行流程：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20201103203735.png" style="width:100%"></p><h2 id="怎么用「并发组合模式」？"><a href="#怎么用「并发组合模式」？" class="headerlink" title="怎么用「并发组合模式」？"></a>怎么用「并发组合模式」？</h2><p>关于「并发组合模式」的建模过程完全可以参考之前文章<a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">《代码组件 | Go设计模式实战》</a>，我们这里只说说需要着重注意的地方。</p><p>「并发组合模式」的核心还是<code>Component</code>组件接口，我们先看看「组合模式」的<code>Component</code>组件接口如下(再之前的文章上做了优化，进一步封装提取了<code>BusinessLogicDo</code>方法)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务和执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line">Do(ctx *Context, currentConponent Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务业务逻辑</span></span><br><span class="line">BusinessLogicDo(ctx *Context) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看「并发组合模式」的Component`组件接口，如下(重点看和「组合模式」的区别)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务:`BusinessLogicDo`和执行子组件:`ChildsDo`</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的WaitGroup对象</span></span><br><span class="line"><span class="comment">// 区别1：增加了WaitGroup对象参数，目的是等待并发子组件的执行完成。</span></span><br><span class="line">Do(ctx *Context, currentConponent Component, wg *sync.WaitGroup) error</span><br><span class="line"><span class="comment">// 执行当前组件业务逻辑</span></span><br><span class="line"><span class="comment">// resChan 回写当前组件业务执行结果的channel</span></span><br><span class="line"><span class="comment">// 区别2：增加了一个channel参数，目的是并发组件执行逻辑时引入了超时机制，需要一个channel接受组件的执行结果</span></span><br><span class="line">BusinessLogicDo(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们详细再来看，相对于「组合模式」，引入并发之后需要着重关注如下几点：</p><ul><li>并发子组件需要设置超时时间：防止子组件执行时间过长，解决方案关键字<code>context.WithTimeout</code></li><li>区分普通组件和并发组件：合成复用基础组件，封装为并发基础组件</li><li>拥有并发子组件的父组件需要等待并发子组件执行完毕(包含超时)，解决方案关键字<code>sync.WaitGroup</code></li><li>并发子组件执行自身业务逻辑是需检测超时：防止子组件内部执行业务逻辑时间过长，解决方案关键字<code>select</code>和<code>&lt;-ctx.Done()</code></li></ul><h3 id="第一点：并发子组件需要设置超时时间"><a href="#第一点：并发子组件需要设置超时时间" class="headerlink" title="第一点：并发子组件需要设置超时时间"></a>第一点：并发子组件需要设置超时时间</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context 业务上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// context.WithTimeout派生的子上下文</span></span><br><span class="line">TimeoutCtx context.Context</span><br><span class="line"><span class="comment">// 超时函数</span></span><br><span class="line">context.CancelFunc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二点：区分普通组件和并发组件"><a href="#第二点：区分普通组件和并发组件" class="headerlink" title="第二点：区分普通组件和并发组件"></a>第二点：区分普通组件和并发组件</h3><p>增加新的并发基础组件结构体<code>BaseConcurrencyComponent</code>，并合成复用「组合模式」中的基础组件<code>BaseComponent</code>，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseConcurrencyComponent 并发基础组件</span></span><br><span class="line"><span class="keyword">type</span> BaseConcurrencyComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line"><span class="comment">// 当前组件是否有并发子组件</span></span><br><span class="line">HasChildConcurrencyComponents <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 并发子组件列表</span></span><br><span class="line">ChildConcurrencyComponents []Component</span><br><span class="line"><span class="comment">// wg 对象</span></span><br><span class="line">*sync.WaitGroup</span><br><span class="line"><span class="comment">// 当前组件业务执行结果channel</span></span><br><span class="line">logicResChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当前组件执行过程中的错误信息</span></span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕-包含超时"><a href="#第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕-包含超时" class="headerlink" title="第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕(包含超时)"></a>第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕(包含超时)</h3><p>修改「组合模式」中的<code>ChildsDo</code>方法，使其支持并发执行子组件，主要修改和实现如下：</p><ul><li>通过<code>go</code>关键字执行子组件</li><li>通过<code>*WaitGroup.Wait()</code>等待子组件执行结果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bc.WaitGroup == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.WaitGroup = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行并发子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line">bc.WaitGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> childComponent.Do(ctx, childComponent, bc.WaitGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bc.HasChildConcurrencyComponents &#123;</span><br><span class="line"><span class="comment">// 等待并发组件执行结果</span></span><br><span class="line">bc.WaitGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四点：并发子组件执行自身业务逻辑是需检测超时"><a href="#第四点：并发子组件执行自身业务逻辑是需检测超时" class="headerlink" title="第四点：并发子组件执行自身业务逻辑是需检测超时"></a>第四点：并发子组件执行自身业务逻辑是需检测超时</h3><p><code>select</code>关键字context.WithTimeout()派生的子上下文Done()方案返回的channel，发生超时该channel会被关闭。具体实现代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 初始化并发子组件channel</span></span><br><span class="line"><span class="keyword">if</span> bc.logicResChan == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.logicResChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> currentConponent.BusinessLogicDo(bc.logicResChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 等待业务执行结果</span></span><br><span class="line"><span class="keyword">case</span> &lt;-bc.logicResChan:</span><br><span class="line"><span class="comment">// 业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo wait.done...&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">// 超时等待</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.TimeoutCtx.Done():</span><br><span class="line"><span class="comment">// 超时退出</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo timeout...&quot;</span>)</span><br><span class="line">bc.Err = ErrConcurrencyComponentTimeout</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">err = currentConponent.ChildsDo(ctx)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//Go设计模式实战系列</span></span><br><span class="line"><span class="comment">//组合模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example:</span></span><br><span class="line"><span class="comment">// 创建一个根组件</span></span><br><span class="line"><span class="comment">// 如果子组件存在并发组件则父组件必须为并发组件</span></span><br><span class="line"><span class="comment">// type RootComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *RootComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // do nothing</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个并发组件</span></span><br><span class="line"><span class="comment">// type DemoConcurrenyComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoConcurrenyComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 并发组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个普通组件</span></span><br><span class="line"><span class="comment">// type DemoComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 普通组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 普通组件</span></span><br><span class="line"><span class="comment">// root.Mount(</span></span><br><span class="line"><span class="comment">// &amp;DemoComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 并发组件</span></span><br><span class="line"><span class="comment">// root := &amp;RootComponent&#123;&#125;</span></span><br><span class="line"><span class="comment">// root.MountConcurrency(</span></span><br><span class="line"><span class="comment">// &amp;DemoConcurrenyComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 初始化业务上下文 并设置超时时间</span></span><br><span class="line"><span class="comment">// ctx := GetContext(5 * time.Second)</span></span><br><span class="line"><span class="comment">// defer ctx.CancelFunc()</span></span><br><span class="line"><span class="comment">// // 开始执行子组件</span></span><br><span class="line"><span class="comment">// root.ChildsDo(ctx)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ErrConcurrencyComponentTimeout 并发组件业务超时</span></span><br><span class="line">ErrConcurrencyComponentTimeout = errors.New(<span class="string">&quot;Concurrency Component Timeout&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 业务上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// context.WithTimeout派生的子上下文</span></span><br><span class="line">TimeoutCtx context.Context</span><br><span class="line"><span class="comment">// 超时函数</span></span><br><span class="line">context.CancelFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetContext 获取业务上下文实例</span></span><br><span class="line"><span class="comment">// d 超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetContext</span><span class="params">(d time.Duration)</span> *<span class="title">Context</span></span> &#123;</span><br><span class="line">c := &amp;Context&#123;&#125;</span><br><span class="line">c.TimeoutCtx, c.CancelFunc = context.WithTimeout(context.Background(), d)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务:`BusinessLogicDo`和执行子组件:`ChildsDo`</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line">Do(ctx *Context, currentConponent Component, wg *sync.WaitGroup) error</span><br><span class="line"><span class="comment">// 执行当前组件业务逻辑</span></span><br><span class="line"><span class="comment">// resChan 回写当前组件业务执行结果的channel</span></span><br><span class="line">BusinessLogicDo(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseComponent 基础组件</span></span><br><span class="line"><span class="comment">// 实现Add:添加一个子组件</span></span><br><span class="line"><span class="comment">// 实现Remove:移除一个子组件</span></span><br><span class="line"><span class="keyword">type</span> BaseComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 子组件列表</span></span><br><span class="line">ChildComponents []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mount 挂载一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Mount</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//执行当前组件业务代码</span></span><br><span class="line">err = currentConponent.BusinessLogicDo(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">return</span> currentConponent.ChildsDo(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent 并发基础组件</span></span><br><span class="line"><span class="keyword">type</span> BaseConcurrencyComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line"><span class="comment">// 当前组件是否有并发子组件</span></span><br><span class="line">HasChildConcurrencyComponents <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 并发子组件列表</span></span><br><span class="line">ChildConcurrencyComponents []Component</span><br><span class="line"><span class="comment">// wg 对象</span></span><br><span class="line">*sync.WaitGroup</span><br><span class="line"><span class="comment">// 当前组件业务执行结果channel</span></span><br><span class="line">logicResChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当前组件执行过程中的错误信息</span></span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MountConcurrency 挂载一个并发子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">MountConcurrency</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.HasChildConcurrencyComponents = <span class="literal">true</span></span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bc.WaitGroup == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.WaitGroup = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行并发子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line">bc.WaitGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> childComponent.Do(ctx, childComponent, bc.WaitGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bc.HasChildConcurrencyComponents &#123;</span><br><span class="line"><span class="comment">// 等待并发组件执行结果</span></span><br><span class="line">bc.WaitGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 初始化并发子组件channel</span></span><br><span class="line"><span class="keyword">if</span> bc.logicResChan == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.logicResChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> currentConponent.BusinessLogicDo(bc.logicResChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 等待业务执行结果</span></span><br><span class="line"><span class="keyword">case</span> &lt;-bc.logicResChan:</span><br><span class="line"><span class="comment">// 业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo wait.done...&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">// 超时等待</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.TimeoutCtx.Done():</span><br><span class="line"><span class="comment">// 超时退出</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo timeout...&quot;</span>)</span><br><span class="line">bc.Err = ErrConcurrencyComponentTimeout</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">err = currentConponent.ChildsDo(ctx)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckoutPageComponent 订单结算页面组件</span></span><br><span class="line"><span class="keyword">type</span> CheckoutPageComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CheckoutPageComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单结算页面组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddressComponent 地址组件</span></span><br><span class="line"><span class="keyword">type</span> AddressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AddressComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;地址组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取地址信息 ing...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟远程调用地址服务</span></span><br><span class="line">http.Get(<span class="string">&quot;http://example.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 写入业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取地址信息 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PayMethodComponent 支付方式组件</span></span><br><span class="line"><span class="keyword">type</span> PayMethodComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PayMethodComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;支付方式组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取支付方式 ing...&quot;</span>)</span><br><span class="line"><span class="comment">// 模拟远程调用地址服务 略</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取支付方式 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreComponent 店铺组件</span></span><br><span class="line"><span class="keyword">type</span> StoreComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *StoreComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;店铺组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SkuComponent 商品组件</span></span><br><span class="line"><span class="keyword">type</span> SkuComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *SkuComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;商品组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionComponent 优惠信息组件</span></span><br><span class="line"><span class="keyword">type</span> PromotionComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PromotionComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠信息组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressComponent 物流组件</span></span><br><span class="line"><span class="keyword">type</span> ExpressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *ExpressComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;物流组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AftersaleComponent 售后组件</span></span><br><span class="line"><span class="keyword">type</span> AftersaleComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AftersaleComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;售后组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InvoiceComponent 发票组件</span></span><br><span class="line"><span class="keyword">type</span> InvoiceComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *InvoiceComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发票组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取发票信息 ing...&quot;</span>)</span><br><span class="line"><span class="comment">// 模拟远程调用地址服务 略</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 写入业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取发票信息 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CouponComponent 优惠券组件</span></span><br><span class="line"><span class="keyword">type</span> CouponComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CouponComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠券组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取最优优惠券 ing...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟远程调用优惠券服务</span></span><br><span class="line">http.Get(<span class="string">&quot;http://example.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入业务执行结果</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取最优优惠券 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GiftCardComponent 礼品卡组件</span></span><br><span class="line"><span class="keyword">type</span> GiftCardComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *GiftCardComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;礼品卡组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取礼品卡信息 ing...&quot;</span>)</span><br><span class="line"><span class="comment">// 模拟远程调用地址服务 略</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 写入业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取礼品卡信息 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderComponent 订单金额详细信息组件</span></span><br><span class="line"><span class="keyword">type</span> OrderComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *OrderComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单金额详细信息组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Demo 示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Demo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化订单结算页面 这个大组件</span></span><br><span class="line">checkoutPage := &amp;CheckoutPageComponent&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载子组件</span></span><br><span class="line">storeComponent := &amp;StoreComponent&#123;&#125;</span><br><span class="line">skuComponent := &amp;SkuComponent&#123;&#125;</span><br><span class="line">skuComponent.Mount(</span><br><span class="line">&amp;PromotionComponent&#123;&#125;,</span><br><span class="line">&amp;AftersaleComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">storeComponent.Mount(</span><br><span class="line">skuComponent,</span><br><span class="line">&amp;ExpressComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---挂载组件---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通组件</span></span><br><span class="line">checkoutPage.Mount(</span><br><span class="line">storeComponent,</span><br><span class="line">&amp;OrderComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 并发组件</span></span><br><span class="line">checkoutPage.MountConcurrency(</span><br><span class="line">&amp;AddressComponent&#123;&#125;,</span><br><span class="line">&amp;PayMethodComponent&#123;&#125;,</span><br><span class="line">&amp;InvoiceComponent&#123;&#125;,</span><br><span class="line">&amp;CouponComponent&#123;&#125;,</span><br><span class="line">&amp;GiftCardComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化业务上下文 并设置超时时间</span></span><br><span class="line">ctx := GetContext(<span class="number">5</span> * time.Second)</span><br><span class="line"><span class="keyword">defer</span> ctx.CancelFunc()</span><br><span class="line"><span class="comment">// 开始构建页面组件数据</span></span><br><span class="line">checkoutPage.ChildsDo(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">runtime.GOMAXPROCS(runtime.NumCPU() - <span class="number">1</span>)</span><br><span class="line">Demo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;patterns&#x2F;composite&#x2F;concurrency&#x2F;composite-concurrency.go&quot;</span><br><span class="line">main.(*StoreComponent).BusinessLogicDo 店铺组件...</span><br><span class="line">main.(*SkuComponent).BusinessLogicDo 商品组件...</span><br><span class="line">main.(*PromotionComponent).BusinessLogicDo 优惠信息组件...</span><br><span class="line">main.(*AftersaleComponent).BusinessLogicDo 售后组件...</span><br><span class="line">main.(*ExpressComponent).BusinessLogicDo 物流组件...</span><br><span class="line">main.(*OrderComponent).BusinessLogicDo 订单金额详细信息组件...</span><br><span class="line">main.(*PayMethodComponent).BusinessLogicDo 支付方式组件...</span><br><span class="line">main.(*PayMethodComponent).BusinessLogicDo 获取支付方式 ing...</span><br><span class="line">main.(*InvoiceComponent).BusinessLogicDo 发票组件...</span><br><span class="line">main.(*InvoiceComponent).BusinessLogicDo 获取发票信息 ing...</span><br><span class="line">main.(*GiftCardComponent).BusinessLogicDo 礼品卡组件...</span><br><span class="line">main.(*GiftCardComponent).BusinessLogicDo 获取礼品卡信息 ing...</span><br><span class="line">main.(*CouponComponent).BusinessLogicDo 优惠券组件...</span><br><span class="line">main.(*CouponComponent).BusinessLogicDo 获取发票信息 ing...</span><br><span class="line">main.(*AddressComponent).BusinessLogicDo 地址组件...</span><br><span class="line">main.(*AddressComponent).BusinessLogicDo 获取地址信息 ing...</span><br><span class="line">main.(*InvoiceComponent).BusinessLogicDo 获取发票信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*PayMethodComponent).BusinessLogicDo 获取支付方式 done...</span><br><span class="line">main.(*AddressComponent).BusinessLogicDo 获取地址信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*CouponComponent).BusinessLogicDo 获取发票信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*GiftCardComponent).BusinessLogicDo 获取礼品卡信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br></pre></td></tr></table></figure><h4 id="「组合模式」和「并发组合模式」基准测试对比"><a href="#「组合模式」和「并发组合模式」基准测试对比" class="headerlink" title="「组合模式」和「并发组合模式」基准测试对比"></a>「组合模式」和「并发组合模式」基准测试对比</h4><p>基准测试代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> composite</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;easy-tips/go/patterns/composite/concurrency&quot;</span></span><br><span class="line"><span class="string">&quot;easy-tips/go/patterns/composite/normal&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go test -benchmem -run=^$ easy-tips/go/patterns/composite -bench . -v -count=1 --benchtime 20s</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark_Normal</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">b.SetParallelism(runtime.NumCPU())</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">normal.Demo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark_Concurrency</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">b.SetParallelism(runtime.NumCPU())</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">concurrency.Demo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地机器Benchmark对比测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(TIGERB) 🤔 ➜  composite git:(master) ✗ go test -benchmem -run&#x3D;^$ easy-tips&#x2F;go&#x2F;patterns&#x2F;composite -bench . -v -count&#x3D;1 --benchtime 20s </span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: easy-tips&#x2F;go&#x2F;patterns&#x2F;composite</span><br><span class="line">Benchmark_Normal-4                   376          56666895 ns&#x2F;op           35339 B&#x2F;op        286 allocs&#x2F;op</span><br><span class="line">Benchmark_Concurrency-4              715          32669301 ns&#x2F;op           36445 B&#x2F;op        299 allocs&#x2F;op</span><br><span class="line">PASS</span><br><span class="line">ok      easy-tips&#x2F;go&#x2F;patterns&#x2F;composite 68.835s</span><br></pre></td></tr></table></figure><p>从上面的基准测试结果可以看出来<code>Benchmark_Concurrency-4</code>平均每次的执行时间是<code>32669301 ns</code>是要优于<code>Benchmark_Normal</code>的<code>56666895 ns</code>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>「并发组合模式」是一个由特定的设计模式结合Go语言天生的并发特性，通过适当封装形成的“新模式”。</p><h2 id="附录「并发组合模式」的基础代码模板与使用说明"><a href="#附录「并发组合模式」的基础代码模板与使用说明" class="headerlink" title="附录「并发组合模式」的基础代码模板与使用说明"></a>附录「并发组合模式」的基础代码模板与使用说明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//Go设计模式实战系列</span></span><br><span class="line"><span class="comment">//组合模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example:</span></span><br><span class="line"><span class="comment">// 创建一个根组件</span></span><br><span class="line"><span class="comment">// 如果子组件存在并发组件则父组件必须为并发组件</span></span><br><span class="line"><span class="comment">// type RootComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *RootComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // do nothing</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个并发组件</span></span><br><span class="line"><span class="comment">// type DemoConcurrenyComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoConcurrenyComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 并发组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个普通组件</span></span><br><span class="line"><span class="comment">// type DemoComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 普通组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 普通组件</span></span><br><span class="line"><span class="comment">// root.Mount(</span></span><br><span class="line"><span class="comment">// &amp;DemoComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 并发组件</span></span><br><span class="line"><span class="comment">// root := &amp;RootComponent&#123;&#125;</span></span><br><span class="line"><span class="comment">// root.MountConcurrency(</span></span><br><span class="line"><span class="comment">// &amp;DemoConcurrenyComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 初始化业务上下文 并设置超时时间</span></span><br><span class="line"><span class="comment">// ctx := GetContext(5 * time.Second)</span></span><br><span class="line"><span class="comment">// defer ctx.CancelFunc()</span></span><br><span class="line"><span class="comment">// // 开始执行子组件</span></span><br><span class="line"><span class="comment">// root.ChildsDo(ctx)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ErrConcurrencyComponentTimeout 并发组件业务超时</span></span><br><span class="line">ErrConcurrencyComponentTimeout = errors.New(<span class="string">&quot;Concurrency Component Timeout&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 业务上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// context.WithTimeout派生的子上下文</span></span><br><span class="line">TimeoutCtx context.Context</span><br><span class="line"><span class="comment">// 超时函数</span></span><br><span class="line">context.CancelFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetContext 获取业务上下文实例</span></span><br><span class="line"><span class="comment">// d 超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetContext</span><span class="params">(d time.Duration)</span> *<span class="title">Context</span></span> &#123;</span><br><span class="line">c := &amp;Context&#123;&#125;</span><br><span class="line">c.TimeoutCtx, c.CancelFunc = context.WithTimeout(context.Background(), d)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务:`BusinessLogicDo`和执行子组件:`ChildsDo`</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line">Do(ctx *Context, currentConponent Component, wg *sync.WaitGroup) error</span><br><span class="line"><span class="comment">// 执行当前组件业务逻辑</span></span><br><span class="line"><span class="comment">// resChan 回写当前组件业务执行结果的channel</span></span><br><span class="line">BusinessLogicDo(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseComponent 基础组件</span></span><br><span class="line"><span class="comment">// 实现Add:添加一个子组件</span></span><br><span class="line"><span class="comment">// 实现Remove:移除一个子组件</span></span><br><span class="line"><span class="keyword">type</span> BaseComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 子组件列表</span></span><br><span class="line">ChildComponents []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mount 挂载一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Mount</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//执行当前组件业务代码</span></span><br><span class="line">err = currentConponent.BusinessLogicDo(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">return</span> currentConponent.ChildsDo(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent 并发基础组件</span></span><br><span class="line"><span class="keyword">type</span> BaseConcurrencyComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line"><span class="comment">// 当前组件是否有并发子组件</span></span><br><span class="line">HasChildConcurrencyComponents <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 并发子组件列表</span></span><br><span class="line">ChildConcurrencyComponents []Component</span><br><span class="line"><span class="comment">// wg 对象</span></span><br><span class="line">*sync.WaitGroup</span><br><span class="line"><span class="comment">// 当前组件业务执行结果channel</span></span><br><span class="line">logicResChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当前组件执行过程中的错误信息</span></span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MountConcurrency 挂载一个并发子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">MountConcurrency</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.HasChildConcurrencyComponents = <span class="literal">true</span></span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bc.WaitGroup == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.WaitGroup = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行并发子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line">bc.WaitGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> childComponent.Do(ctx, childComponent, bc.WaitGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bc.HasChildConcurrencyComponents &#123;</span><br><span class="line"><span class="comment">// 等待并发组件执行结果</span></span><br><span class="line">bc.WaitGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 初始化并发子组件channel</span></span><br><span class="line"><span class="keyword">if</span> bc.logicResChan == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.logicResChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> currentConponent.BusinessLogicDo(bc.logicResChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 等待业务执行结果</span></span><br><span class="line"><span class="keyword">case</span> &lt;-bc.logicResChan:</span><br><span class="line"><span class="comment">// 业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo wait.done...&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">// 超时等待</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.TimeoutCtx.Done():</span><br><span class="line"><span class="comment">// 超时退出</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo timeout...&quot;</span>)</span><br><span class="line">bc.Err = ErrConcurrencyComponentTimeout</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">err = currentConponent.ChildsDo(ctx)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;并发组件-Go设计模式实战&quot;&gt;&lt;a href=&quot;#并发组件-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;并发组件 | Go设计模式实战&quot;&gt;&lt;/a&gt;并发组件 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>状态变换 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/20ee7783/"/>
    <id>http://wangyangyangisme.github.io/posts/20ee7783/</id>
    <published>2021-05-16T06:31:01.000Z</published>
    <updated>2021-05-16T06:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态变换-Go设计模式实战"><a href="#状态变换-Go设计模式实战" class="headerlink" title="状态变换 | Go设计模式实战"></a>状态变换 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「状态模式」如何在真实业务场景中使用。</p><p>「状态模式」比较简单，就是算法的选取取决于于自己的内部状态。相较于「策略模式」算法的选取由用户决策变成内部状态决策，「策略模式」是用户(客户端)选择具体的算法，「状态模式」只是通过内部不同的状态选择具体的算法。</p><h2 id="什么是「状态模式」？"><a href="#什么是「状态模式」？" class="headerlink" title="什么是「状态模式」？"></a>什么是「状态模式」？</h2><blockquote><p>不同的算法按照统一的标准封装，根据不同的<strong>内部状态</strong>，决策使用何种算法</p></blockquote><h3 id="「状态模式」和「策略模式」的区别"><a href="#「状态模式」和「策略模式」的区别" class="headerlink" title="「状态模式」和「策略模式」的区别"></a>「状态模式」和「策略模式」的区别</h3><ul><li>策略模式：依靠客户决策</li><li>状态模式：依靠内部状态决策</li></ul><h2 id="什么真实业务场景可以用「状态模式」？"><a href="#什么真实业务场景可以用「状态模式」？" class="headerlink" title="什么真实业务场景可以用「状态模式」？"></a>什么真实业务场景可以用「状态模式」？</h2><blockquote><p>具体算法的选取是由内部状态决定的</p></blockquote><ul><li>首先，内部存在多种状态</li><li>其次，不同的状态的业务逻辑各不相同</li></ul><blockquote><p>我们有哪些真实业务场景可以用「状态模式」呢？</p></blockquote><p>比如，发送短信接口、限流等等。</p><ul><li>短信接口<ul><li>服务内部根据最优算法，实时推举出最优的短信服务商，并修改<strong>使用何种短信服务商的状态</strong></li></ul></li><li>限流<ul><li>服务内部根据当前的实时流量，选择不同的限流算法，并修改<strong>使用何种限流算法的状态</strong></li></ul></li></ul><h2 id="怎么用「状态模式」？"><a href="#怎么用「状态模式」？" class="headerlink" title="怎么用「状态模式」？"></a>怎么用「状态模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>先来看看一个短信验证码登录的界面。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200522131127.png" style="width:100%"></p><p>可以得到：</p><ul><li>发送短信，用户只需要输入手机号即可</li><li>至于短信服务使用何种短信服务商，是由短信服务自身的<strong>当前短信服务商实例的状态</strong>决定</li><li><strong>当前短信服务商实例的状态</strong>又是由服务自身的算法修改</li></ul><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200522130715.png" style="width:100%"></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>「状态模式」的核心是：</p><ul><li>一个接口:<ul><li>短信服务接口<code>SmsServiceInterface</code></li></ul></li><li>一个实体类:<ul><li>状态管理实体类<code>StateManager</code></li></ul></li></ul><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个短信服务接口</span><br><span class="line">- 接口&#96;SmsServiceInterface&#96;</span><br><span class="line">+ 抽象方法&#96;Send(ctx *Context) error&#96;发送短信的抽象方法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义具体的短信服务实体类 实现接口&#96;SmsServiceInterface&#96;</span><br><span class="line"></span><br><span class="line">- 实体类&#96;ServiceProviderAliyun&#96;</span><br><span class="line">+ 成员方法&#96;Send(ctx *Context) error&#96;具体的发送短信逻辑</span><br><span class="line">- 实体类&#96;ServiceProviderTencent&#96;</span><br><span class="line">+ 成员方法&#96;Send(ctx *Context) error&#96;具体的发送短信逻辑</span><br><span class="line">- 实体类&#96;ServiceProviderYunpian&#96;</span><br><span class="line">+ 成员方法&#96;Send(ctx *Context) error&#96;具体的发送短信逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义状态管理实体类&#96;StateManager&#96;</span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;currentProviderType ProviderType&#96;当前使用的服务提供商类型</span><br><span class="line">+ &#96;currentProvider SmsServiceInterface&#96;当前使用的服务提供商实例</span><br><span class="line">+ &#96;setStateDuration time.Duration&#96;更新状态时间间隔</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;initState(duration time.Duration)&#96;初始化状态</span><br><span class="line">+ &#96;setState(t time.Time)&#96;设置状态</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200527141350.jpg" style="width:100%"></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//状态模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">Tel        <span class="keyword">string</span> <span class="comment">// 手机号</span></span><br><span class="line">Text       <span class="keyword">string</span> <span class="comment">// 短信内容</span></span><br><span class="line">TemplateID <span class="keyword">string</span> <span class="comment">// 短信模板ID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmsServiceInterface 短信服务接口</span></span><br><span class="line"><span class="keyword">type</span> SmsServiceInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Send(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceProviderAliyun 阿里云</span></span><br><span class="line"><span class="keyword">type</span> ServiceProviderAliyun <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send Send</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServiceProviderAliyun)</span> <span class="title">Send</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;【阿里云】短信发送成功，手机号:&quot;</span>+ctx.Tel)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceProviderTencent 腾讯云</span></span><br><span class="line"><span class="keyword">type</span> ServiceProviderTencent <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send Send</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServiceProviderTencent)</span> <span class="title">Send</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;【腾讯云】短信发送成功，手机号:&quot;</span>+ctx.Tel)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceProviderYunpian 云片</span></span><br><span class="line"><span class="keyword">type</span> ServiceProviderYunpian <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send Send</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServiceProviderYunpian)</span> <span class="title">Send</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;【云片】短信发送成功，手机号:&quot;</span>+ctx.Tel)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProviderType 短信服务提供商类型</span></span><br><span class="line"><span class="keyword">type</span> ProviderType <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ProviderTypeAliyun 阿里云</span></span><br><span class="line">ProviderTypeAliyun ProviderType = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line"><span class="comment">// ProviderTypeTencent 腾讯云</span></span><br><span class="line">ProviderTypeTencent ProviderType = <span class="string">&quot;tencent&quot;</span></span><br><span class="line"><span class="comment">// ProviderTypeYunpian 云片</span></span><br><span class="line">ProviderTypeYunpian ProviderType = <span class="string">&quot;yunpian&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// stateManagerInstance 当前使用的服务提供商实例</span></span><br><span class="line"><span class="comment">// 默认aliyun</span></span><br><span class="line">stateManagerInstance *StateManager</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// StateManager 状态管理</span></span><br><span class="line"><span class="keyword">type</span> StateManager <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// CurrentProviderType 当前使用的服务提供商类型</span></span><br><span class="line"><span class="comment">// 默认aliyun</span></span><br><span class="line">currentProviderType ProviderType</span><br><span class="line"></span><br><span class="line"><span class="comment">// CurrentProvider 当前使用的服务提供商实例</span></span><br><span class="line"><span class="comment">// 默认aliyun</span></span><br><span class="line">currentProvider SmsServiceInterface</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新状态时间间隔</span></span><br><span class="line">setStateDuration time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initState 初始化状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *StateManager)</span> <span class="title">initState</span><span class="params">(duration time.Duration)</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">m.setStateDuration = duration</span><br><span class="line">m.setState(time.Now())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器更新状态</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 每一段时间后根据回调的发送成功率 计算得到当前应该使用的 厂商</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t := &lt;-time.NewTicker(m.setStateDuration).C:</span><br><span class="line">m.setState(t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setState 设置状态</span></span><br><span class="line"><span class="comment">// 根据短信云商回调的短信发送成功率 得到下阶段发送短信使用哪个厂商的服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *StateManager)</span> <span class="title">setState</span><span class="params">(t time.Time)</span></span> &#123;</span><br><span class="line"><span class="comment">// 这里用随机模拟</span></span><br><span class="line">ProviderTypeArray := [<span class="number">3</span>]ProviderType&#123;</span><br><span class="line">ProviderTypeAliyun,</span><br><span class="line">ProviderTypeTencent,</span><br><span class="line">ProviderTypeYunpian,</span><br><span class="line">&#125;</span><br><span class="line">m.currentProviderType = ProviderTypeArray[rand.Intn(<span class="built_in">len</span>(ProviderTypeArray))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> m.currentProviderType &#123;</span><br><span class="line"><span class="keyword">case</span> ProviderTypeAliyun:</span><br><span class="line">m.currentProvider = &amp;ServiceProviderAliyun&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProviderTypeTencent:</span><br><span class="line">m.currentProvider = &amp;ServiceProviderTencent&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProviderTypeYunpian:</span><br><span class="line">m.currentProvider = &amp;ServiceProviderYunpian&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;无效的短信服务商&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;时间：%s| 变更短信发送厂商为: %s \n&quot;</span>, t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>), m.currentProviderType)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getState 获取当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *StateManager)</span> <span class="title">getState</span><span class="params">()</span> <span class="title">SmsServiceInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> m.currentProvider</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetState 获取当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetState</span><span class="params">()</span> <span class="title">SmsServiceInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> stateManagerInstance.getState()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化状态管理</span></span><br><span class="line">stateManagerInstance = &amp;StateManager&#123;&#125;</span><br><span class="line">stateManagerInstance.initState(<span class="number">300</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟发送短信的接口</span></span><br><span class="line">sendSms := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 发送短信</span></span><br><span class="line">GetState().Send(&amp;Context&#123;</span><br><span class="line">Tel:        <span class="string">&quot;+8613666666666&quot;</span>,</span><br><span class="line">Text:       <span class="string">&quot;3232&quot;</span>,</span><br><span class="line">TemplateID: <span class="string">&quot;TYSHK_01&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟用户调用发送短信的接口</span></span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;.&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;state&#x2F;state.go&quot;</span><br><span class="line">时间：2020-05-30 18:02:37| 变更短信发送厂商为: yunpian </span><br><span class="line">main.(*ServiceProviderYunpian).Send 【云片】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:37| 变更短信发送厂商为: aliyun </span><br><span class="line">时间：2020-05-30 18:02:38| 变更短信发送厂商为: yunpian </span><br><span class="line">时间：2020-05-30 18:02:38| 变更短信发送厂商为: yunpian </span><br><span class="line">main.(*ServiceProviderYunpian).Send 【云片】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:38| 变更短信发送厂商为: tencent </span><br><span class="line">时间：2020-05-30 18:02:39| 变更短信发送厂商为: aliyun </span><br><span class="line">时间：2020-05-30 18:02:39| 变更短信发送厂商为: tencent </span><br><span class="line">main.(*ServiceProviderTencent).Send 【腾讯云】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:39| 变更短信发送厂商为: yunpian </span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: tencent </span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: aliyun </span><br><span class="line">main.(*ServiceProviderAliyun).Send 【阿里云】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: yunpian </span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: tencent </span><br><span class="line">时间：2020-05-30 18:02:41| 变更短信发送厂商为: aliyun </span><br><span class="line">时间：2020-05-30 18:02:41| 变更短信发送厂商为: yunpian </span><br><span class="line">main.(*ServiceProviderYunpian).Send 【云片】短信发送成功，手机号:+8613666666666</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「状态模式」抽象过程的核心是：</p><ul><li>每一个状态映射对应行为</li><li>行为实现同一个接口<code>interface</code></li><li>行为是内部的一个状态</li><li>状态是不断变化的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;状态变换-Go设计模式实战&quot;&gt;&lt;a href=&quot;#状态变换-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;状态变换 | Go设计模式实战&quot;&gt;&lt;/a&gt;状态变换 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>客户决策 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/aee36e49/"/>
    <id>http://wangyangyangisme.github.io/posts/aee36e49/</id>
    <published>2021-05-16T06:31:00.000Z</published>
    <updated>2021-05-16T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户决策-Go设计模式实战"><a href="#客户决策-Go设计模式实战" class="headerlink" title="客户决策 | Go设计模式实战"></a>客户决策 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「策略模式」如何在真实业务场景中使用。</p><h2 id="什么是「策略模式」？"><a href="#什么是「策略模式」？" class="headerlink" title="什么是「策略模式」？"></a>什么是「策略模式」？</h2><p>「策略模式」比较简单，大家平常工作中应该经常使用到，所以本文作为复习，帮助大家温故知新。我们先来看下定义：</p><blockquote><p>不同的算法按照统一的标准封装，客户端根据不同的场景，决策使用何种算法。</p></blockquote><p>上面的概念的关键词：</p><ul><li>算法：就是行为</li><li>标准：就是interface</li><li>客户端：客户端是相对的，谁调用谁就是客户端</li><li>场景：判断条件</li><li>决策：判断的过程</li></ul><p>概念很容易理解，不多说。</p><p>「策略模式」的优势：</p><ul><li>典型的高内聚：算法和算法之间完全独立、互不干扰</li><li>典型的松耦合：客户端依赖的是接口的抽象方法</li><li>沉淀：每一个封装好的算法都是这个技术团队的财富，且未来可以被轻易的修改、复用</li></ul><h2 id="什么真实业务场景可以用「策略模式」？"><a href="#什么真实业务场景可以用「策略模式」？" class="headerlink" title="什么真实业务场景可以用「策略模式」？"></a>什么真实业务场景可以用「策略模式」？</h2><blockquote><p>每一行代码下面的十字路口</p></blockquote><p>当代码的下一步面临选择的时候都可以使用「策略模式」，我们把不同选择的算法按照统一的标准封装，得到一类算法集的过程，就是实现「策略模式」的过程。</p><blockquote><p>我们有哪些真实业务场景可以用「策略模式」呢？</p></blockquote><p>比如：</p><ul><li>缓存: 使用什么样的nosql</li><li>存储: 使用什么样的DB</li><li>支付: 使用什么样的支付方式</li><li>等等... </li></ul><p>本文以<strong>支付接口</strong>举例，说明「策略模式」的具体使用。</p><h2 id="怎么用「策略模式」？"><a href="#怎么用「策略模式」？" class="headerlink" title="怎么用「策略模式」？"></a>怎么用「策略模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>我们以某团的订单支付页面为例，页面上的每一个支付选项都是一个支付策略。如下：</p><p>用户可以使用：</p><ul><li>美团支付(策略)</li><li>微信支付(策略)</li><li>支付宝支付(策略)</li></ul><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200424131625.png" style="width:50%"></p><p>用户决定使用美团支付下的银行卡支付方式的参数</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200424132214.png" style="width:50%"></p><p>用户决定使用支付宝网页版支付方式的参数</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200424132232.png" style="width:50%"></p><blockquote><p>注：不一定完全准确。</p></blockquote><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200425192752.png" style="width:100%"></p><blockquote><p>注：流程不一定完全准确。</p></blockquote><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>「策略模式」的核心是接口：</p><ul><li><code>PaymentInterface</code><ul><li><code>Pay(ctx *Context) error</code> 当前支付方式的支付逻辑</li><li><code>Refund(ctx *Context) error</code> 当前支付方式的退款逻辑</li></ul></li></ul><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个支付接口</span><br><span class="line">- &#96;PaymentInterface&#96;</span><br><span class="line">    + 抽象方法&#96;Pay(ctx *Context) error&#96;: 当前支付方式的支付逻辑</span><br><span class="line">+ 抽象方法&#96;Refund(ctx *Context) error&#96;: 当前支付方式的退款逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义具体的支付方式 实现接口&#96;PaymentInterface&#96;</span><br><span class="line"></span><br><span class="line">- 具体的微信支付方式&#96;WechatPay&#96;</span><br><span class="line">    +  实现方法&#96;Pay&#96;: 支付逻辑</span><br><span class="line">+  实现方法&#96;Refund&#96;: 支付逻辑</span><br><span class="line">- 具体的支付宝支付网页版方式&#96;AliPayWap&#96;</span><br><span class="line">    +  实现方法&#96;Pay&#96;: 支付逻辑</span><br><span class="line">+  实现方法&#96;Refund&#96;: 支付逻辑</span><br><span class="line">- 具体的支付宝支付网页版方式&#96;BankPay&#96;</span><br><span class="line">    +  实现方法&#96;Pay&#96;: 支付逻辑</span><br><span class="line">+  实现方法&#96;Refund&#96;: 支付逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 客户端代码</span><br><span class="line">通过接口参数pay_type的值判断是哪种支付方式策略</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200425151733.jpg" style="width:100%"></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//策略模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ConstWechatPay 微信支付</span></span><br><span class="line">ConstWechatPay = <span class="string">&quot;wechat_pay&quot;</span></span><br><span class="line"><span class="comment">// ConstAliPayWap 支付宝支付 网页版</span></span><br><span class="line">ConstAliPayWap = <span class="string">&quot;AliPayWapwap&quot;</span></span><br><span class="line"><span class="comment">// ConstBankPay 银行卡支付</span></span><br><span class="line">ConstBankPay = <span class="string">&quot;quickbank&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 用户选择的支付方式</span></span><br><span class="line">PayType <span class="keyword">string</span> <span class="string">`json:&quot;pay_type&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PaymentInterface 支付方式接口</span></span><br><span class="line"><span class="keyword">type</span> PaymentInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Pay(ctx *Context) error    <span class="comment">// 支付</span></span><br><span class="line">Refund(ctx *Context) error <span class="comment">// 退款</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WechatPay 微信支付</span></span><br><span class="line"><span class="keyword">type</span> WechatPay <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *WechatPay)</span> <span class="title">Pay</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用微信支付...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *WechatPay)</span> <span class="title">Refund</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用微信退款...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AliPayWap 支付宝网页版</span></span><br><span class="line"><span class="keyword">type</span> AliPayWap <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *AliPayWap)</span> <span class="title">Pay</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用支付宝网页版支付...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *AliPayWap)</span> <span class="title">Refund</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用支付宝网页版退款...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BankPay 银行卡支付</span></span><br><span class="line"><span class="keyword">type</span> BankPay <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *BankPay)</span> <span class="title">Pay</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用银行卡支付...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *BankPay)</span> <span class="title">Refund</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用银行卡退款...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 相对于被调用的支付策略 这里就是支付策略的客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务上下文</span></span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">PayType: <span class="string">&quot;wechat_pay&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取支付方式</span></span><br><span class="line"><span class="keyword">var</span> instance PaymentInterface</span><br><span class="line"><span class="keyword">switch</span> ctx.PayType &#123;</span><br><span class="line"><span class="keyword">case</span> ConstWechatPay:</span><br><span class="line">instance = &amp;WechatPay&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ConstAliPayWap:</span><br><span class="line">instance = &amp;AliPayWap&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ConstBankPay:</span><br><span class="line">instance = &amp;BankPay&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;无效的支付方式&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付</span></span><br><span class="line">instance.Pay(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;strategy&#x2F;strategy.go&quot;</span><br><span class="line">main.(*WechatPay).Pay 使用微信支付...</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「策略模式」抽象过程的核心是：</p><p>在<code>每一行代码下面的十字路口</code></p><ul><li>声明标准：定义<code>interface</code></li><li>封装算法：按照标准<code>interface</code>封装分支代码，得到每一个具体策略</li><li>构建算法集：每一个具体策略构成策略池子 -&gt; 这就是沉淀的过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;客户决策-Go设计模式实战&quot;&gt;&lt;a href=&quot;#客户决策-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;客户决策 | Go设计模式实战&quot;&gt;&lt;/a&gt;客户决策 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>订阅通知 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/32bdf73d/"/>
    <id>http://wangyangyangisme.github.io/posts/32bdf73d/</id>
    <published>2021-05-16T06:30:59.000Z</published>
    <updated>2021-05-16T06:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="订阅通知-Go设计模式实战"><a href="#订阅通知-Go设计模式实战" class="headerlink" title="订阅通知 | Go设计模式实战"></a>订阅通知 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>虽然本文的题目叫做“订阅通知”，但是呢，本文却主要介绍「观察者模式」如何在真实业务场景中使用。是不是有些不理解？解释下：</p><ul><li>原因一，「观察者模式」其实看起来像“订阅通知”</li><li>原因二，“订阅通知”更容易被理解</li></ul><h2 id="什么是「观察者模式」？"><a href="#什么是「观察者模式」？" class="headerlink" title="什么是「观察者模式」？"></a>什么是「观察者模式」？</h2><blockquote><p>观察者观察被观察者，被观察者通知观察者</p></blockquote><p>我们用“订阅通知”翻译下「观察者模式」的概念，结果：</p><blockquote><p>“订阅者订阅主题，主题通知订阅者”</p></blockquote><p>是不是容易理解多了，我们再来拆解下这句话，得到：</p><ul><li>两个对象<ul><li>被观察者 -&gt; 主题</li><li>观察者 -&gt; 订阅者</li></ul></li><li>两个动作<ul><li>订阅 -&gt; 订阅者<strong>订阅</strong>主题</li><li>通知 -&gt; 主题发生变动<strong>通知</strong>订阅者</li></ul></li></ul><p>观察者模式的优势：</p><ul><li>高内聚 -&gt; 不同业务代码变动互不影响</li><li>可复用 -&gt; 新的业务(就是新的订阅者)订阅不同接口(主题，就是这里的接口)</li><li>极易扩展 -&gt; 新增接口(就是新增主题)；新增业务(就是新增订阅者)；</li></ul><p>其实说白了，就是分布式架构中使用消息机制MQ解耦业务的优势，是不是这么一想很容易理解了。</p><h2 id="什么真实业务场景可以用「观察者模式」？"><a href="#什么真实业务场景可以用「观察者模式」？" class="headerlink" title="什么真实业务场景可以用「观察者模式」？"></a>什么真实业务场景可以用「观察者模式」？</h2><blockquote><p>所有发生变更，需要通知的业务场景</p></blockquote><p>详细说：只要发生了某些变化，需要通知依赖了这些变化的具体事物的业务场景。</p><blockquote><p>我们有哪些真实业务场景可以用「观察者模式」呢？</p></blockquote><p>比如，订单逆向流，也就是订单成立之后的各种取消操作(本文不讨论售后)，主要有如下取消类型：</p><table><thead><tr><th>订单取消类型</th></tr></thead><tbody><tr><td>未支付取消订单</td></tr><tr><td>超时关单</td></tr><tr><td>已支付取消订单</td></tr><tr><td>取消发货单</td></tr><tr><td>拒收</td></tr></tbody></table><p>在触发这些<strong>取消操作</strong>都要进行各种各样的子操作，显而易见不同的<strong>取消操作</strong>所涉及的子操作是存在交集的。其次，已支付取消订单的子操作应该是所有订单取消类型最全的，其他类型的复用代码即可，除了分装成函数片段，还有什么更好的封装方式吗？答案：「观察者模式」。</p><p>接着我们来分析下订单逆向流业务中的<strong>变</strong>与<strong>不变</strong>：</p><ul><li>变<ul><li>新增取消类型</li><li>新增子操作</li><li>修改某个子操作的逻辑</li><li>取消类型和子操作的对应关系</li></ul></li><li>不变<ul><li>已存在的取消类型</li><li>已存在的子操作(在外界看来)</li></ul></li></ul><h2 id="怎么用「观察者模式」？"><a href="#怎么用「观察者模式」？" class="headerlink" title="怎么用「观察者模式」？"></a>怎么用「观察者模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：本文于单体架构背景探讨业务的实现过程，简单容易理解。</span><br></pre></td></tr></table></figure><p>第一步，梳理出所有存在的的逆向业务的子操作，如下：</p><table><thead><tr><th>所有子操作</th></tr></thead><tbody><tr><td>修改订单状态</td></tr><tr><td>记录订单状态变更日志</td></tr><tr><td>退优惠券</td></tr><tr><td>还优惠活动资格</td></tr><tr><td>还库存</td></tr><tr><td>还礼品卡</td></tr><tr><td>退钱包余额</td></tr><tr><td>修改发货单状态</td></tr><tr><td>记录发货单状态变更日志</td></tr><tr><td>生成退款单</td></tr><tr><td>生成发票-红票</td></tr><tr><td>发邮件</td></tr><tr><td>发短信</td></tr><tr><td>发微信消息</td></tr></tbody></table><p>第二步，找到不同订单取消类型和这些子操作的关系，如下：</p><table><thead><tr><th>订单取消类型(“主题”)(被观察者)</th><th>子操作(“订阅者”)(观察者)</th></tr></thead><tbody><tr><td>取消未支付订单</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>退优惠券</td></tr><tr><td>-</td><td>还优惠活动资格</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>超时关单</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>退优惠券</td></tr><tr><td>-</td><td>还优惠活动资格</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr><tr><td>已支付取消订单(未生成发货单)</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>还优惠活动资格(看情况)</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>还礼品卡</td></tr><tr><td>-</td><td>退钱包余额</td></tr><tr><td>-</td><td>生成退款单</td></tr><tr><td>-</td><td>生成发票-红票</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr><tr><td>取消发货单(未发货)</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>修改发货单状态</td></tr><tr><td>-</td><td>记录发货单状态变更日志</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>还礼品卡</td></tr><tr><td>-</td><td>退钱包余额</td></tr><tr><td>-</td><td>生成退款单</td></tr><tr><td>-</td><td>生成发票-红票</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr><tr><td>拒收</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>修改发货单状态</td></tr><tr><td>-</td><td>记录发货单状态变更日志</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>还礼品卡</td></tr><tr><td>-</td><td>退钱包余额</td></tr><tr><td>-</td><td>生成退款单</td></tr><tr><td>-</td><td>生成发票-红票</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr></tbody></table><blockquote><p>注：流程不一定完全准确、全面。</p></blockquote><p>结论：</p><ul><li>不同的订单取消类型的子操作存在交集，子操作可被复用。</li><li>子操作可被看作“订阅者”(也就是观察者)</li><li>订单取消类型可被看作是“主题”(也就是被观察者)</li><li>不同子操作(“订阅者”)(观察者)<strong>订阅</strong>订单取消类型(“主题”)(被观察者)</li><li>订单取消类型(“主题”)(被观察者)<strong>通知</strong>子操作(“订阅者”)(观察者)</li></ul><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：本文于单体架构背景探讨业务的实现过程，简单容易理解。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200410131427.png" alt=""></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>「观察者模式」的核心是两个接口：</p><ul><li>“主题”(被观察者)接口<code>Observable</code><ul><li>抽象方法<code>Attach</code>: 增加“订阅者”</li><li>抽象方法<code>Detach</code>: 删除“订阅者”</li><li>抽象方法<code>Notify</code>: 通知“订阅者”</li></ul></li><li>“订阅者”(观察者)接口<code>ObserverInterface</code><ul><li>抽象方法<code>Do</code>: 自身的业务</li></ul></li></ul><p>订单逆向流的业务下，我们需要实现这两个接口:</p><ul><li>具体订单取消的动作实现“主题”接口<code>Observable</code></li><li>子逻辑实现“订阅者”接口<code>ObserverInterface</code></li></ul><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ------------这里实现一个具体的“主题”------------</span><br><span class="line"></span><br><span class="line">具体订单取消的动作实现“主题”(被观察者)接口&#96;Observable&#96;。得到一个具体的“主题”:</span><br><span class="line"></span><br><span class="line">- 订单取消的动作的“主题”结构体&#96;ObservableConcrete&#96;</span><br><span class="line">    +  成员属性&#96;observerList []ObserverInterface&#96;:订阅者列表</span><br><span class="line">    +  具体方法&#96;Attach&#96;: 增加子逻辑</span><br><span class="line">    +  具体方法&#96;Detach&#96;: 删除子逻辑</span><br><span class="line">    +  具体方法&#96;Notify&#96;: 通知子逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ------------这里实现所有具体的“订阅者”------------</span><br><span class="line"></span><br><span class="line">子逻辑实现“订阅者”接口&#96;ObserverInterface&#96;:</span><br><span class="line"></span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;OrderStatus&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 修改订单状态</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;OrderStatusLog&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 记录订单状态变更日志</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;CouponRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 退优惠券</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;PromotionRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 还优惠活动资格</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;StockRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 还库存</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;GiftCardRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 还礼品卡</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;WalletRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 退钱包余额</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;DeliverBillStatus&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 修改发货单状态</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;DeliverBillStatusLog&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 记录发货单状态变更日志</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Refund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 生成退款单</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Invoice&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 生成发票-红票</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Email&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 发邮件</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Sms&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 发短信</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;WechatNotify&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 发微信消息</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200411181215.jpg" alt=""></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//观察者模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Observable 被观察者</span></span><br><span class="line"><span class="keyword">type</span> Observable <span class="keyword">interface</span> &#123;</span><br><span class="line">Attach(observer ...ObserverInterface) Observable</span><br><span class="line">Detach(observer ObserverInterface) Observable</span><br><span class="line">Notify() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObservableConcrete 一个具体的 订单状态变化的被观察者</span></span><br><span class="line"><span class="keyword">type</span> ObservableConcrete <span class="keyword">struct</span> &#123;</span><br><span class="line">observerList []ObserverInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach 注册观察者</span></span><br><span class="line"><span class="comment">// @param $observer ObserverInterface 观察者列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *ObservableConcrete)</span> <span class="title">Attach</span><span class="params">(observer ...ObserverInterface)</span> <span class="title">Observable</span></span> &#123;</span><br><span class="line">o.observerList = <span class="built_in">append</span>(o.observerList, observer...)</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detach 注销观察者</span></span><br><span class="line"><span class="comment">// @param $observer ObserverInterface 待注销的观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *ObservableConcrete)</span> <span class="title">Detach</span><span class="params">(observer ObserverInterface)</span> <span class="title">Observable</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(o.observerList) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, observerItem := <span class="keyword">range</span> o.observerList &#123;</span><br><span class="line"><span class="keyword">if</span> observer == observerItem &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;注销:&quot;</span>, reflect.TypeOf(observer))</span><br><span class="line">o.observerList = <span class="built_in">append</span>(o.observerList[:k], o.observerList[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notify 通知观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *ObservableConcrete)</span> <span class="title">Notify</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code ...</span></span><br><span class="line"><span class="keyword">for</span> _, observer := <span class="keyword">range</span> o.observerList &#123;</span><br><span class="line"><span class="keyword">if</span> err = observer.Do(o); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObserverInterface 定义一个观察者的接口</span></span><br><span class="line"><span class="keyword">type</span> ObserverInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 自身的业务</span></span><br><span class="line">Do(o Observable) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderStatus 修改订单状态</span></span><br><span class="line"><span class="keyword">type</span> OrderStatus <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *OrderStatus)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;修改订单状态...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderStatusLog 记录订单状态变更日志</span></span><br><span class="line"><span class="keyword">type</span> OrderStatusLog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *OrderStatusLog)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;记录订单状态变更日志...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CouponRefund 退优惠券</span></span><br><span class="line"><span class="keyword">type</span> CouponRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *CouponRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;退优惠券...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionRefund 还优惠活动资格</span></span><br><span class="line"><span class="keyword">type</span> PromotionRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *PromotionRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;还优惠活动资格...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StockRefund 还库存</span></span><br><span class="line"><span class="keyword">type</span> StockRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *StockRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;还库存...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GiftCardRefund 还礼品卡</span></span><br><span class="line"><span class="keyword">type</span> GiftCardRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *GiftCardRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;还礼品卡...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WalletRefund 退钱包余额</span></span><br><span class="line"><span class="keyword">type</span> WalletRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *WalletRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;退钱包余额...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeliverBillStatus 修改发货单状态</span></span><br><span class="line"><span class="keyword">type</span> DeliverBillStatus <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *DeliverBillStatus)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;修改发货单状态...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeliverBillStatusLog 记录发货单状态变更日志</span></span><br><span class="line"><span class="keyword">type</span> DeliverBillStatusLog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *DeliverBillStatusLog)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;记录发货单状态变更日志...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 生成退款单</span></span><br><span class="line"><span class="keyword">type</span> Refund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Refund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;生成退款单...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoice 生成发票-红票</span></span><br><span class="line"><span class="keyword">type</span> Invoice <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Invoice)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;生成发票-红票...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Email 发邮件</span></span><br><span class="line"><span class="keyword">type</span> Email <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Email)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发邮件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sms 发短信</span></span><br><span class="line"><span class="keyword">type</span> Sms <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Sms)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发短信...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WechatNotify 发微信消息</span></span><br><span class="line"><span class="keyword">type</span> WechatNotify <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *WechatNotify)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发微信消息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 未支付取消订单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 未支付取消订单 “主题”&quot;</span>)</span><br><span class="line">orderUnPaidCancelSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">orderUnPaidCancelSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;CouponRefund&#123;&#125;,</span><br><span class="line">&amp;PromotionRefund&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">orderUnPaidCancelSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 超时关单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 超时关单 “主题”&quot;</span>)</span><br><span class="line">orderOverTimeSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">orderOverTimeSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;CouponRefund&#123;&#125;,</span><br><span class="line">&amp;PromotionRefund&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">orderOverTimeSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 已支付取消订单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 已支付取消订单 “主题”&quot;</span>)</span><br><span class="line">orderPaidCancelSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">orderPaidCancelSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;CouponRefund&#123;&#125;,</span><br><span class="line">&amp;PromotionRefund&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;GiftCardRefund&#123;&#125;,</span><br><span class="line">&amp;WalletRefund&#123;&#125;,</span><br><span class="line">&amp;Refund&#123;&#125;,</span><br><span class="line">&amp;Invoice&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">orderPaidCancelSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 取消发货单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 取消发货单 “主题”&quot;</span>)</span><br><span class="line">deliverBillCancelSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">deliverBillCancelSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatus&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatusLog&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;GiftCardRefund&#123;&#125;,</span><br><span class="line">&amp;WalletRefund&#123;&#125;,</span><br><span class="line">&amp;Refund&#123;&#125;,</span><br><span class="line">&amp;Invoice&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">deliverBillCancelSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 拒收 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 拒收 “主题”&quot;</span>)</span><br><span class="line">deliverBillRejectSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">deliverBillRejectSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatus&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatusLog&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;GiftCardRefund&#123;&#125;,</span><br><span class="line">&amp;WalletRefund&#123;&#125;,</span><br><span class="line">&amp;Refund&#123;&#125;,</span><br><span class="line">&amp;Invoice&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">deliverBillRejectSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未来可以快速的根据业务的变化 创建新的主题 从而快速构建新的业务接口</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 未来的扩展...&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;observer&#x2F;observer.go&quot;</span><br><span class="line">----------------------- 未支付取消订单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*CouponRefund).Do 退优惠券...</span><br><span class="line">main.(*PromotionRefund).Do 还优惠活动资格...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">----------------------- 超时关单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*CouponRefund).Do 退优惠券...</span><br><span class="line">main.(*PromotionRefund).Do 还优惠活动资格...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line">----------------------- 已支付取消订单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*CouponRefund).Do 退优惠券...</span><br><span class="line">main.(*PromotionRefund).Do 还优惠活动资格...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*GiftCardRefund).Do 还礼品卡...</span><br><span class="line">main.(*WalletRefund).Do 退钱包余额...</span><br><span class="line">main.(*Refund).Do 生成退款单...</span><br><span class="line">main.(*Invoice).Do 生成发票-红票...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line">----------------------- 取消发货单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*DeliverBillStatus).Do 修改发货单状态...</span><br><span class="line">main.(*DeliverBillStatusLog).Do 记录发货单状态变更日志...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*GiftCardRefund).Do 还礼品卡...</span><br><span class="line">main.(*WalletRefund).Do 退钱包余额...</span><br><span class="line">main.(*Refund).Do 生成退款单...</span><br><span class="line">main.(*Invoice).Do 生成发票-红票...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line">----------------------- 拒收 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*DeliverBillStatus).Do 修改发货单状态...</span><br><span class="line">main.(*DeliverBillStatusLog).Do 记录发货单状态变更日志...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*GiftCardRefund).Do 还礼品卡...</span><br><span class="line">main.(*WalletRefund).Do 退钱包余额...</span><br><span class="line">main.(*Refund).Do 生成退款单...</span><br><span class="line">main.(*Invoice).Do 生成发票-红票...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「观察者模式」抽象过程的核心是：</p><ul><li>被依赖的“主题”</li><li>被通知的“订阅者”</li><li>“订阅者”按需<strong>订阅</strong>“主题”</li><li>“主题”变化<strong>通知</strong>“订阅者”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br><span class="line">3. 观察者模式与订阅通知实际还是有差异，本文均加上了双引号。订阅通知：订阅方不是直接依赖主题方(联想下mq等消息中间件的使用)；而观察者模式：观察者是直接依赖了被观察者，从上面的代码我们也可以清晰的看出来这个差异。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;订阅通知-Go设计模式实战&quot;&gt;&lt;a href=&quot;#订阅通知-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;订阅通知 | Go设计模式实战&quot;&gt;&lt;/a&gt;订阅通知 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>代码组件 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/b38a76c0/"/>
    <id>http://wangyangyangisme.github.io/posts/b38a76c0/</id>
    <published>2021-05-16T06:30:58.000Z</published>
    <updated>2021-05-16T06:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码组件-Go设计模式实战"><a href="#代码组件-Go设计模式实战" class="headerlink" title="代码组件 | Go设计模式实战"></a>代码组件 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「组合模式」如何在真实业务场景中使用。</p><h2 id="什么是「组合模式」？"><a href="#什么是「组合模式」？" class="headerlink" title="什么是「组合模式」？"></a>什么是「组合模式」？</h2><blockquote><p>一个具有层级关系的对象由一系列拥有父子关系的对象通过树形结构组成。</p></blockquote><p>组合模式的优势：</p><ul><li>所见即所码：你所看见的代码结构就是业务真实的层级关系，比如Ui界面你真实看到的那样。</li><li>高度封装：单一职责。</li><li>可复用：不同业务场景，相同的组件可被重复使用。</li></ul><h2 id="什么真实业务场景可以用「组合模式」？"><a href="#什么真实业务场景可以用「组合模式」？" class="headerlink" title="什么真实业务场景可以用「组合模式」？"></a>什么真实业务场景可以用「组合模式」？</h2><p>满足如下要求的所有场景:</p><blockquote><p>Get请求获取页面数据的所有接口</p></blockquote><p>前端大行组件化的当今，我们在写后端接口代码的时候还是按照业务思路一头写到尾吗？我们是否可以思索，「后端接口业务代码如何可以简单快速组件化？」，答案是肯定的，这就是「组合模式」的作用。</p><p>我们利用「组合模式」的定义和前端模块的划分去构建后端业务代码结构：</p><ul><li>前端单个模块 -&gt; 对应后端：具体单个类 -&gt; 封装的过程</li><li>前端模块父子组件 -&gt;  对应后端：父类内部持有多个子类(非继承关系，合成复用关系) -&gt; 父子关系的树形结构</li></ul><blockquote><p>我们有哪些真实业务场景可以用「组合模式」呢？</p></blockquote><p>比如我们以“复杂的订单结算页面”为例，下面是某东的订单结算页面：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200331124724.jpeg" style="width:38%"></p><p>从页面的展示形式上，可以看出：</p><ul><li>页面由多个模块构成，比如：<ul><li>地址模块</li><li>支付方式模块</li><li>店铺模块</li><li>发票模块</li><li>优惠券模块</li><li>某豆模块</li><li>礼品卡模块</li><li>订单详细金额模块</li></ul></li><li>单个模块可以由多个子模块构成<ul><li>店铺模块，又由如下模块构成：<ul><li>商品模块</li><li>售后模块</li><li>优惠模块</li><li>物流模块</li></ul></li></ul></li></ul><h2 id="怎么用「组合模式」？"><a href="#怎么用「组合模式」？" class="headerlink" title="怎么用「组合模式」？"></a>怎么用「组合模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>按照如上某东的订单结算页面的示例，我们得到了如下的订单结算页面模块组成图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200329222214.png" style="width:46%"></p><blockquote><p>注：模块不一定完全准确</p></blockquote><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>责任链模式主要类主要包含如下特性：</p><ul><li>成员属性<ul><li><code>ChildComponents</code>: 子组件列表 -&gt; 稳定不变的</li></ul></li><li>成员方法<ul><li><code>Mount</code>: 添加一个子组件 -&gt; 稳定不变的</li><li><code>Remove</code>: 移除一个子组件 -&gt; 稳定不变的</li><li><code>Do</code>: 执行组件&amp;子组件 -&gt; 变化的</li></ul></li></ul><p>套用到订单结算页面信息接口伪代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">一个父类(抽象类)：</span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;ChildComponents&#96;: 子组件列表</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Mount&#96;: 实现添加一个子组件</span><br><span class="line">+ &#96;Remove&#96;: 实现移除一个子组件</span><br><span class="line">+ &#96;Do&#96;: 抽象方法</span><br><span class="line"></span><br><span class="line">组件一，订单结算页面组件类(继承父类、看成一个大的组件)： </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件二，地址组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件三，支付方式组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件四，店铺组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件五，商品组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件六，优惠信息组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件七，物流组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件八，发票组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件九，优惠券组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件十，礼品卡组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件十一，订单金额详细信息组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line">组件十二，售后组件(继承父类，未来扩展的组件)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br></pre></td></tr></table></figure><p>但是，golang里没有的继承的概念，要复用成员属性<code>ChildComponents</code>、成员方法<code>Mount</code>、成员方法<code>Remove</code>怎么办呢？我们使用<code>合成复用</code>的特性变相达到“继承复用”的目的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">一个接口(interface)：</span><br><span class="line">+ 抽象方法&#96;Mount&#96;: 添加一个子组件</span><br><span class="line">+ 抽象方法&#96;Remove&#96;: 移除一个子组件</span><br><span class="line">+ 抽象方法&#96;Do&#96;: 执行组件&amp;子组件</span><br><span class="line"></span><br><span class="line">一个基础结构体&#96;BaseComponent&#96;：</span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;ChildComponents&#96;: 子组件列表</span><br><span class="line">- 成员方法</span><br><span class="line">+ 实体方法&#96;Mount&#96;: 添加一个子组件</span><br><span class="line">+ 实体方法&#96;Remove&#96;: 移除一个子组件</span><br><span class="line">+ 实体方法&#96;ChildsDo&#96;: 执行子组件</span><br><span class="line"></span><br><span class="line">组件一，订单结算页面组件类： </span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件二，地址组件：</span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件三，支付方式组件：</span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">...略</span><br><span class="line"></span><br><span class="line">组件十一，订单金额详细信息组件：</span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200403125814.jpg" style="width:100%"></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//组合模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行组件&amp;子组件</span></span><br><span class="line">Do(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseComponent 基础组件</span></span><br><span class="line"><span class="comment">// 实现Add:添加一个子组件</span></span><br><span class="line"><span class="comment">// 实现Remove:移除一个子组件</span></span><br><span class="line"><span class="keyword">type</span> BaseComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 子组件列表</span></span><br><span class="line">ChildComponents []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mount 挂载一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Mount</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckoutPageComponent 订单结算页面组件</span></span><br><span class="line"><span class="keyword">type</span> CheckoutPageComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CheckoutPageComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单结算页面组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddressComponent 地址组件</span></span><br><span class="line"><span class="keyword">type</span> AddressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AddressComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;地址组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PayMethodComponent 支付方式组件</span></span><br><span class="line"><span class="keyword">type</span> PayMethodComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PayMethodComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;支付方式组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreComponent 店铺组件</span></span><br><span class="line"><span class="keyword">type</span> StoreComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *StoreComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;店铺组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SkuComponent 商品组件</span></span><br><span class="line"><span class="keyword">type</span> SkuComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *SkuComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;商品组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionComponent 优惠信息组件</span></span><br><span class="line"><span class="keyword">type</span> PromotionComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PromotionComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠信息组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressComponent 物流组件</span></span><br><span class="line"><span class="keyword">type</span> ExpressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *ExpressComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;物流组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AftersaleComponent 售后组件</span></span><br><span class="line"><span class="keyword">type</span> AftersaleComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AftersaleComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;售后组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InvoiceComponent 发票组件</span></span><br><span class="line"><span class="keyword">type</span> InvoiceComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *InvoiceComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发票组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CouponComponent 优惠券组件</span></span><br><span class="line"><span class="keyword">type</span> CouponComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CouponComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠券组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GiftCardComponent 礼品卡组件</span></span><br><span class="line"><span class="keyword">type</span> GiftCardComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *GiftCardComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;礼品卡组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderComponent 订单金额详细信息组件</span></span><br><span class="line"><span class="keyword">type</span> OrderComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *OrderComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单金额详细信息组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化订单结算页面 这个大组件</span></span><br><span class="line">checkoutPage := &amp;CheckoutPageComponent&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载子组件</span></span><br><span class="line">storeComponent := &amp;StoreComponent&#123;&#125;</span><br><span class="line">skuComponent := &amp;SkuComponent&#123;&#125;</span><br><span class="line">skuComponent.Mount(</span><br><span class="line">&amp;PromotionComponent&#123;&#125;,</span><br><span class="line">&amp;AftersaleComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">storeComponent.Mount(</span><br><span class="line">skuComponent,</span><br><span class="line">&amp;ExpressComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载组件</span></span><br><span class="line">checkoutPage.Mount(</span><br><span class="line">&amp;AddressComponent&#123;&#125;,</span><br><span class="line">&amp;PayMethodComponent&#123;&#125;,</span><br><span class="line">storeComponent,</span><br><span class="line">&amp;InvoiceComponent&#123;&#125;,</span><br><span class="line">&amp;CouponComponent&#123;&#125;,</span><br><span class="line">&amp;GiftCardComponent&#123;&#125;,</span><br><span class="line">&amp;OrderComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除组件测试</span></span><br><span class="line"><span class="comment">// checkoutPage.Remove(storeComponent)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始构建页面组件数据</span></span><br><span class="line">checkoutPage.Do(&amp;Context&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;composite&#x2F;composite.go&quot;</span><br><span class="line">main.(*CheckoutPageComponent).Do 订单结算页面组件...</span><br><span class="line">main.(*AddressComponent).Do 地址组件...</span><br><span class="line">main.(*PayMethodComponent).Do 支付方式组件...</span><br><span class="line">main.(*StoreComponent).Do 店铺组件...</span><br><span class="line">main.(*SkuComponent).Do 商品组件...</span><br><span class="line">main.(*PromotionComponent).Do 优惠信息组件...</span><br><span class="line">main.(*AftersaleComponent).Do 售后组件...</span><br><span class="line">main.(*ExpressComponent).Do 物流组件...</span><br><span class="line">main.(*InvoiceComponent).Do 发票组件...</span><br><span class="line">main.(*CouponComponent).Do 优惠券组件...</span><br><span class="line">main.(*GiftCardComponent).Do 礼品卡组件...</span><br><span class="line">main.(*OrderComponent).Do 订单金额详细信息组件...</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「组合模式」抽象过程的核心是：</p><ul><li>按模块划分：业务逻辑归类，收敛的过程。</li><li>父子关系(树)：把收敛之后的业务对象按父子关系绑定，依次被执行。</li></ul><p>与「责任链模式」的区别：</p><ul><li>责任链模式: 链表</li><li>组合模式：树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码组件-Go设计模式实战&quot;&gt;&lt;a href=&quot;#代码组件-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;代码组件 | Go设计模式实战&quot;&gt;&lt;/a&gt;代码组件 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>链式调用 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/c59af70a/"/>
    <id>http://wangyangyangisme.github.io/posts/c59af70a/</id>
    <published>2021-05-16T06:30:57.000Z</published>
    <updated>2021-05-16T06:30:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链式调用-Go设计模式实战"><a href="#链式调用-Go设计模式实战" class="headerlink" title="链式调用 | Go设计模式实战"></a>链式调用 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「责任链模式」如何在真实业务场景中使用。</p><h2 id="什么是「责任链模式」？"><a href="#什么是「责任链模式」？" class="headerlink" title="什么是「责任链模式」？"></a>什么是「责任链模式」？</h2><blockquote><p>首先把一系列业务按职责划分成不同的对象，接着把这一系列对象构成一个链，然后在这一系列对象中传递请求对象，直到被处理为止。</p></blockquote><p>我们从概念中可以看出责任链模式有如下明显的优势：</p><ul><li>按职责划分：解耦</li><li>对象链：逻辑清晰</li></ul><p>但是有一点<code>直到被处理为止</code>，代表最终只会被一个实际的业务对象执行了实际的业务逻辑，明显适用的场景并不多。但是除此之外，上面的那两点优势还是让人很心动，所以，为了适用于目前所接触的绝大多数业务场景，把概念进行了简单的调整，如下：</p><blockquote><p>首先把一系列业务按职责划分成不同的对象，接着把这一系列对象构成一个链，直到“链路结束”为止。(结束：异常结束，或链路执行完毕结束)</p></blockquote><p>简单的<code>直到“链路结束”为止</code>转换可以让我们把责任链模式适用于任何复杂的业务场景。</p><p>以下是责任链模式的具体优势：</p><ul><li>直观：一眼可观的业务调用过程</li><li>无限扩展：可无限扩展的业务逻辑</li><li>高度封装：复杂业务代码依然高度封装</li><li>极易被修改：复杂业务代码下修改代码只需要专注对应的业务类(结构体)文件即可，以及极易被调整的业务执行顺序</li></ul><h2 id="什么真实业务场景可以用「责任链模式-改-」？"><a href="#什么真实业务场景可以用「责任链模式-改-」？" class="headerlink" title="什么真实业务场景可以用「责任链模式(改)」？"></a>什么真实业务场景可以用「责任链模式(改)」？</h2><p>满足如下要求的场景:</p><blockquote><p>业务极度复杂的所有场景</p></blockquote><p>任何杂乱无章的业务代码，都可以使用责任链模式(改)去重构、设计。</p><blockquote><p>我们有哪些真实业务场景可以用「责任链模式(改)」呢？</p></blockquote><p>比如电商系统的下单接口，随着业务发展不断的发展，该接口会充斥着各种各样的业务逻辑。</p><h2 id="怎么用「责任链模式-改-」？"><a href="#怎么用「责任链模式-改-」？" class="headerlink" title="怎么用「责任链模式(改)」？"></a>怎么用「责任链模式(改)」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><table><thead><tr><th>步骤</th><th>逻辑</th></tr></thead><tbody><tr><td>1</td><td>参数校验</td></tr><tr><td>2</td><td>获取地址信息</td></tr><tr><td>3</td><td>地址信息校验</td></tr><tr><td>4</td><td>获取购物车数据</td></tr><tr><td>5</td><td>获取商品库存信息</td></tr><tr><td>6</td><td>商品库存校验</td></tr><tr><td>7</td><td>获取优惠信息</td></tr><tr><td>8</td><td>获取运费信息</td></tr><tr><td>9</td><td>使用优惠信息</td></tr><tr><td>10</td><td>扣库存</td></tr><tr><td>11</td><td>清理购物车</td></tr><tr><td>12</td><td>写订单表</td></tr><tr><td>13</td><td>写订单商品表</td></tr><tr><td>14</td><td>写订单优惠信息表</td></tr><tr><td>XX</td><td>以及未来会增加的逻辑...</td></tr></tbody></table><p>业务的不断发展变化的：</p><ul><li>新的业务被增加</li><li>旧的业务被修改</li></ul><p>比如增加的新的业务，订金预售：</p><ul><li>在<code>4|获取购物车数据</code>后，需要校验商品参见订金预售活动的有效性等逻辑。</li><li>等等逻辑</li></ul><blockquote><p>注：流程不一定完全准确</p></blockquote><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200327205310.png" alt=""></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>责任链模式主要类主要包含如下特性：</p><ul><li>成员属性<ul><li><code>nextHandler</code>: 下一个等待被调用的对象实例 -&gt; 稳定不变的</li></ul></li><li>成员方法<ul><li><code>SetNext</code>: 把下一个对象的实例绑定到当前对象的<code>nextHandler</code>属性上 -&gt; 稳定不变的</li><li><code>Do</code>: 当前对象业务逻辑入口 -&gt; 变化的</li><li><code>Run</code>: 调用当前对象的<code>Do</code>，<code>nextHandler</code>不为空则调用<code>nextHandler.Do</code> -&gt; 稳定不变的</li></ul></li></ul><p>套用到下单接口伪代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">一个父类(抽象类)：</span><br><span class="line"></span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;nextHandler&#96;: 下一个等待被调用的对象实例</span><br><span class="line">- 成员方法</span><br><span class="line">+ 实体方法&#96;SetNext&#96;: 实现把下一个对象的实例绑定到当前对象的&#96;nextHandler&#96;属性上</span><br><span class="line">+ 抽象方法&#96;Do&#96;: 当前对象业务逻辑入口</span><br><span class="line">+ 实体方法&#96;Run&#96;: 实现调用当前对象的&#96;Do&#96;，&#96;nextHandler&#96;不为空则调用&#96;nextHandler.Do&#96;</span><br><span class="line"></span><br><span class="line">子类一(参数校验)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体的参数校验逻辑</span><br><span class="line"></span><br><span class="line">子类二(获取地址信息)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取地址信息的逻辑</span><br><span class="line"></span><br><span class="line">子类三(获取购物车数据)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取购物车数据的逻辑</span><br><span class="line"></span><br><span class="line">......略</span><br><span class="line"></span><br><span class="line">子类X(以及未来会增加的逻辑)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：以及未来会增加的逻辑</span><br></pre></td></tr></table></figure><p>但是，golang里没有的继承的概念，要复用成员属性<code>nextHandler</code>、成员方法<code>SetNext</code>、成员方法<code>Run</code>怎么办呢？我们使用<code>合成复用</code>的特性变相达到“继承复用”的目的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一个接口(interface)：</span><br><span class="line"></span><br><span class="line">- 抽象方法&#96;SetNext&#96;: 待实现把下一个对象的实例绑定到当前对象的&#96;nextHandler&#96;属性上</span><br><span class="line">- 抽象方法&#96;Do&#96;: 待实现当前对象业务逻辑入口</span><br><span class="line">- 抽象方法&#96;Run&#96;: 待实现调用当前对象的&#96;Do&#96;，&#96;nextHandler&#96;不为空则调用&#96;nextHandler.Do&#96;</span><br><span class="line"></span><br><span class="line">一个基础结构体：</span><br><span class="line"></span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;nextHandler&#96;: 下一个等待被调用的对象实例</span><br><span class="line">- 成员方法</span><br><span class="line">+ 实体方法&#96;SetNext&#96;: 实现把下一个对象的实例绑定到当前对象的&#96;nextHandler&#96;属性上</span><br><span class="line">+ 实体方法&#96;Run&#96;: 实现调用当前对象的&#96;Do&#96;，&#96;nextHandler&#96;不为空则调用&#96;nextHandler.Do&#96;</span><br><span class="line"></span><br><span class="line">子类一(参数校验)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体的参数校验逻辑</span><br><span class="line"></span><br><span class="line">子类二(获取地址信息)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取地址信息的逻辑</span><br><span class="line"></span><br><span class="line">子类三(获取购物车数据)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取购物车数据的逻辑</span><br><span class="line"></span><br><span class="line">......略</span><br><span class="line"></span><br><span class="line">子类X(以及未来会增加的逻辑)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：以及未来会增加的逻辑</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200328220913.jpg" alt=""></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//责任链模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context Context</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler 处理</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 自身的业务</span></span><br><span class="line">Do(c *Context) error</span><br><span class="line"><span class="comment">// 设置下一个对象</span></span><br><span class="line">SetNext(h Handler) Handler</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">Run(c *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next 抽象出来的 可被合成复用的结构体</span></span><br><span class="line"><span class="keyword">type</span> Next <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 下一个对象</span></span><br><span class="line">nextHandler Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetNext 实现好的 可被复用的SetNext方法</span></span><br><span class="line"><span class="comment">// 返回值是下一个对象 方便写成链式代码优雅</span></span><br><span class="line"><span class="comment">// 例如 nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">SetNext</span><span class="params">(h Handler)</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">n.nextHandler = h</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">Run</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 由于go无继承的概念 这里无法执行当前handler的Do</span></span><br><span class="line"><span class="comment">// n.Do(c)</span></span><br><span class="line"><span class="keyword">if</span> n.nextHandler != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用下的变种</span></span><br><span class="line"><span class="comment">// 执行下一个handler的Do</span></span><br><span class="line"><span class="keyword">if</span> err = (n.nextHandler).Do(c); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行下一个handler的Run</span></span><br><span class="line"><span class="keyword">return</span> (n.nextHandler).Run(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NullHandler 空Handler</span></span><br><span class="line"><span class="comment">// 由于go无继承的概念 作为链式调用的第一个载体 设置实际的下一个对象</span></span><br><span class="line"><span class="keyword">type</span> NullHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next的`nextHandler`成员属性、`SetNext`成员方法、`Run`成员方法</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 空Handler的Do</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *NullHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 空Handler 这里什么也不做 只是载体 do nothing...</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArgumentsHandler 校验参数的handler</span></span><br><span class="line"><span class="keyword">type</span> ArgumentsHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ArgumentsHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验参数成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddressInfoHandler 地址信息handler</span></span><br><span class="line"><span class="keyword">type</span> AddressInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *AddressInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取地址信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;地址信息校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartInfoHandler 获取购物车数据handler</span></span><br><span class="line"><span class="keyword">type</span> CartInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *CartInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取购物车数据...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StockInfoHandler 商品库存handler</span></span><br><span class="line"><span class="keyword">type</span> StockInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *StockInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取商品库存信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;商品库存校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionInfoHandler 获取优惠信息handler</span></span><br><span class="line"><span class="keyword">type</span> PromotionInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *PromotionInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取优惠信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShipmentInfoHandler 获取运费信息handler</span></span><br><span class="line"><span class="keyword">type</span> ShipmentInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ShipmentInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取运费信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionUseHandler 使用优惠信息handler</span></span><br><span class="line"><span class="keyword">type</span> PromotionUseHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *PromotionUseHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用优惠信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StockSubtractHandler 库存操作handler</span></span><br><span class="line"><span class="keyword">type</span> StockSubtractHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *StockSubtractHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;扣库存...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartDelHandler 清理购物车handler</span></span><br><span class="line"><span class="keyword">type</span> CartDelHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *CartDelHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;清理购物车...&quot;</span>)</span><br><span class="line"><span class="comment">// err = fmt.Errorf(&quot;CartDelHandler.Do fail&quot;)</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBTableOrderHandler 写订单表handler</span></span><br><span class="line"><span class="keyword">type</span> DBTableOrderHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DBTableOrderHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;写订单表...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBTableOrderSkusHandler 写订单商品表handler</span></span><br><span class="line"><span class="keyword">type</span> DBTableOrderSkusHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DBTableOrderSkusHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;写订单商品表...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBTableOrderPromotionsHandler 写订单优惠信息表handler</span></span><br><span class="line"><span class="keyword">type</span> DBTableOrderPromotionsHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DBTableOrderPromotionsHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;写订单优惠信息表...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化空handler</span></span><br><span class="line">nullHandler := &amp;NullHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用 代码是不是很优雅</span></span><br><span class="line"><span class="comment">// 很明显的链 逻辑关系一览无余</span></span><br><span class="line">nullHandler.SetNext(&amp;ArgumentsHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;AddressInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;CartInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;StockInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;PromotionInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;ShipmentInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;PromotionUseHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;StockSubtractHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;CartDelHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;DBTableOrderHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;DBTableOrderSkusHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;DBTableOrderPromotionsHandler&#123;&#125;)</span><br><span class="line"><span class="comment">//无限扩展代码...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始执行业务</span></span><br><span class="line"><span class="keyword">if</span> err := nullHandler.Run(&amp;Context&#123;&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 异常</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Fail | Error:&quot;</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;responsibility&#x2F;responsibility-order-submit.go&quot;</span><br><span class="line">main.(*ArgumentsHandler).Do 校验参数成功...</span><br><span class="line">main.(*AddressInfoHandler).Do 获取地址信息...</span><br><span class="line">main.(*AddressInfoHandler).Do 地址信息校验...</span><br><span class="line">main.(*CartInfoHandler).Do 获取购物车数据...</span><br><span class="line">main.(*StockInfoHandler).Do 获取商品库存信息...</span><br><span class="line">main.(*StockInfoHandler).Do 商品库存校验...</span><br><span class="line">main.(*PromotionInfoHandler).Do 获取优惠信息...</span><br><span class="line">main.(*ShipmentInfoHandler).Do 获取运费信息...</span><br><span class="line">main.(*PromotionUseHandler).Do 使用优惠信息...</span><br><span class="line">main.(*StockSubtractHandler).Do 扣库存...</span><br><span class="line">main.(*CartDelHandler).Do 清理购物车...</span><br><span class="line">main.(*DBTableOrderHandler).Do 写订单表...</span><br><span class="line">main.(*DBTableOrderSkusHandler).Do 写订单商品表...</span><br><span class="line">main.(*DBTableOrderPromotionsHandler).Do 写订单优惠信息表...</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><p>middlewares</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//责任链模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context Context</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler 处理</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 自身的业务</span></span><br><span class="line">Do(c *Context) error</span><br><span class="line"><span class="comment">// 设置下一个对象</span></span><br><span class="line">SetNext(h Handler) Handler</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">Run(c *Context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next 抽象出来的 可被合成复用的结构体</span></span><br><span class="line"><span class="keyword">type</span> Next <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 下一个对象</span></span><br><span class="line">nextHandler Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetNext 实现好的 可被复用的SetNext方法</span></span><br><span class="line"><span class="comment">// 返回值是下一个对象 方便写成链式代码优雅</span></span><br><span class="line"><span class="comment">// 例如 nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">SetNext</span><span class="params">(h Handler)</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">n.nextHandler = h</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">Run</span><span class="params">(c *Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 由于go无继承的概念 这里无法执行当前handler的Do</span></span><br><span class="line"><span class="comment">// n.Do(c)</span></span><br><span class="line"><span class="keyword">if</span> n.nextHandler != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用下的变种</span></span><br><span class="line"><span class="comment">// 执行下一个handler的Do</span></span><br><span class="line">(n.nextHandler).Do(c)</span><br><span class="line"><span class="comment">// 执行下一个handler的Run</span></span><br><span class="line">(n.nextHandler).Run(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NullHandler 空Handler</span></span><br><span class="line"><span class="comment">// 由于go无继承的概念 作为链式调用的第一个载体 设置实际的下一个对象</span></span><br><span class="line"><span class="keyword">type</span> NullHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next的`nextHandler`成员属性、`SetNext`成员方法、`Run`成员方法</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 空Handler的Do</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *NullHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 空Handler 这里什么也不做 只是载体 do nothing...</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SignHandler 校验请求签名的handler</span></span><br><span class="line"><span class="keyword">type</span> SignHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验请求签名逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *SignHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验签名成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArgumentsHandler 校验参数的handler</span></span><br><span class="line"><span class="keyword">type</span> ArgumentsHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ArgumentsHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验参数成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FrequentHandler 校验请求频率的hanlder</span></span><br><span class="line"><span class="keyword">type</span> FrequentHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验请求频率逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *FrequentHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验请求频率成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化空handler</span></span><br><span class="line">nullHandler := &amp;NullHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化参数handler</span></span><br><span class="line">argumentsHandler := &amp;ArgumentsHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化签名handler</span></span><br><span class="line">signHandler := &amp;SignHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化频率handler</span></span><br><span class="line">frequentHandler := &amp;FrequentHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用 代码是不是很优雅</span></span><br><span class="line"><span class="comment">// 很明显的链 逻辑关系一览无余</span></span><br><span class="line">nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span><br><span class="line">nullHandler.Run(&amp;Context&#123;&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">middlewares := <span class="built_in">make</span>([]Handler, <span class="number">0</span>)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, nullHandler)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, argumentsHandler)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, signHandler)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, frequentHandler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, handler := <span class="keyword">range</span> middlewares &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">middlewares[k<span class="number">-1</span>].SetNext(handler)</span><br><span class="line">&#125;</span><br><span class="line">nullHandler.Run(&amp;Context&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「责任链模式(改)」抽象过程的核心是：</p><ul><li>按职责划分：业务逻辑归类，收敛的过程。</li><li>对象链：把收敛之后的业务对象构成对象链，依次被执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链式调用-Go设计模式实战&quot;&gt;&lt;a href=&quot;#链式调用-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;链式调用 | Go设计模式实战&quot;&gt;&lt;/a&gt;链式调用 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>代码模板 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/e7bf6f31/"/>
    <id>http://wangyangyangisme.github.io/posts/e7bf6f31/</id>
    <published>2021-05-16T06:30:56.000Z</published>
    <updated>2021-05-16T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码模板-Go设计模式实战"><a href="#代码模板-Go设计模式实战" class="headerlink" title="代码模板 | Go设计模式实战"></a>代码模板 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「模板模式」如何在真实业务场景中使用。</p><h2 id="什么是「模板模式」？"><a href="#什么是「模板模式」？" class="headerlink" title="什么是「模板模式」？"></a>什么是「模板模式」？</h2><p>抽象类里定义好<strong>算法的执行步骤</strong>和<strong>具体算法</strong>，以及可能发生变化的算法定义为<strong>抽象方法</strong>。不同的子类继承该抽象类，并实现父类的抽象方法。</p><p>模板模式的优势：</p><ul><li>不变的算法被继承复用：不变的部分高度封装、复用。</li><li>变化的算法子类继承并具体实现：变化的部分子类只需要具体实现抽象的部分即可，方便扩展，且可无限扩展。</li></ul><h2 id="什么真实业务场景可以用「模板模式」？"><a href="#什么真实业务场景可以用「模板模式」？" class="headerlink" title="什么真实业务场景可以用「模板模式」？"></a>什么真实业务场景可以用「模板模式」？</h2><p>满足如下要求的所有场景:</p><blockquote><p>算法执行的步骤是稳定<strong>不变的</strong>，但是具体的某些算法可能存在<strong>变</strong>化的场景。</p></blockquote><p>怎么理解，举个例子：<code>比如说你煮个面，必然需要先烧水，水烧开之后再放面进去</code>，以上的流程我们称之为<code>煮面过程</code>。可知：这个<code>煮面过程</code>的步骤是稳定不变的，但是在不同的环境烧水的方式可能不尽相同，也许有的人用天然气烧水、有的人用电磁炉烧水、有的人用柴火烧水，等等。我们可以得到以下结论：</p><ul><li><code>煮面过程</code>的步骤是稳定不变的</li><li><code>煮面过程</code>的烧水方式是可变的</li></ul><blockquote><p>我们有哪些真实业务场景可以用「模板模式」呢？</p></blockquote><p>比如抽奖系统的抽奖接口，为什么：</p><ul><li>抽奖的步骤是稳定不变的 -&gt; <strong>不变的</strong>算法执行步骤</li><li>不同抽奖类型活动在某些逻辑处理方式可能不同 -&gt; <strong>变的</strong>某些算法</li></ul><h2 id="怎么用「模板模式」？"><a href="#怎么用「模板模式」？" class="headerlink" title="怎么用「模板模式」？"></a>怎么用「模板模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>我通过历史上接触过的各种抽奖场景（红包雨、糖果雨、打地鼠、大转盘(九宫格)、考眼力、答题闯关、游戏闯关、支付刮刮乐、积分刮刮乐等等），按照真实业务需求梳理了以下抽奖业务抽奖接口的大致文本流程。</p><p>了解具体业务请点击<a href="http://tigerb.cn/2019/12/23/skr-lottery/">《通用抽奖工具之需求分析 | SkrShop》</a></p><table><thead><tr><th>主步骤</th><th>主逻辑</th><th>抽奖类型</th><th>子步骤</th><th>子逻辑</th></tr></thead><tbody><tr><td>1</td><td>校验活动编号(serial_no)是否存在、并获取活动信息</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td>校验活动、场次是否正在进行</td><td>-</td><td>-</td><td>-</td></tr><tr><td>3</td><td>其他参数校验(<strong>不同活动类型实现不同</strong>)</td><td>-</td><td>-</td><td>-</td></tr><tr><td>4</td><td>活动抽奖次数校验(同时扣减)</td><td>-</td><td>-</td><td>-</td></tr><tr><td>5</td><td>活动是否需要消费积分</td><td>-</td><td>-</td><td>-</td></tr><tr><td>6</td><td>场次抽奖次数校验(同时扣减)</td><td>-</td><td>-</td><td>-</td></tr><tr><td>7</td><td>获取场次奖品信息</td><td>-</td><td>-</td><td>-</td></tr><tr><td>8</td><td>获取node奖品信息(<strong>不同活动类型实现不同</strong>)</td><td><strong>按时间抽奖类型</strong></td><td>1</td><td>do nothing(抽取该场次的奖品即可，无需其他逻辑)</td></tr><tr><td>8</td><td></td><td><strong>按抽奖次数抽奖类型</strong></td><td>1</td><td>判断是该用户第几次抽奖</td></tr><tr><td>8</td><td></td><td></td><td>2</td><td>获取对应node的奖品信息</td></tr><tr><td>8</td><td></td><td></td><td>3</td><td>复写原所有奖品信息(抽取该node节点的奖品)</td></tr><tr><td>8</td><td></td><td><strong>按数额范围区间抽奖</strong></td><td>1</td><td>判断属于哪个数额区间</td></tr><tr><td>8</td><td></td><td></td><td>2</td><td>获取对应node的奖品信息</td></tr><tr><td>8</td><td></td><td></td><td>3</td><td>复写原所有奖品信息(抽取该node节点的奖品)</td></tr><tr><td>9</td><td>抽奖</td><td>-</td><td>-</td><td>-</td></tr><tr><td>10</td><td>奖品数量判断</td><td>-</td><td>-</td><td>-</td></tr><tr><td>11</td><td>组装奖品信息</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><blockquote><p>注：流程不一定完全准确</p></blockquote><p>结论：</p><ul><li><code>主逻辑</code>是稳定不变的</li><li><code>其他参数校验</code>和<code>获取node奖品信息</code>的算法是可变的</li></ul><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200325205347.png" alt=""></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>通过上面的分析我们可以得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">一个抽象类</span><br><span class="line">- 具体共有方法&#96;Run&#96;，里面定义了算法的执行步骤</span><br><span class="line">- 具体私有方法，不会发生变化的具体方法</span><br><span class="line">- 抽象方法，会发生变化的方法</span><br><span class="line"></span><br><span class="line">子类一(按时间抽奖类型)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法</span><br><span class="line"></span><br><span class="line">子类二(按抽奖次数抽奖类型)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法</span><br><span class="line"></span><br><span class="line">子类三(按数额范围区间抽奖)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法</span><br></pre></td></tr></table></figure><p>但是golang里面没有继承的概念，我们就把对抽象类里抽象方法的依赖转化成对接口<code>interface</code>里抽象方法的依赖，同时也可以利用<code>合成复用</code>的方式“继承”模板:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">抽象行为的接口&#96;BehaviorInterface&#96;(包含如下需要实现的方法)</span><br><span class="line">- 其他参数校验的方法&#96;checkParams&#96;</span><br><span class="line">- 获取node奖品信息的方法&#96;getPrizesByNode&#96;</span><br><span class="line"></span><br><span class="line">抽奖结构体类</span><br><span class="line">- 具体共有方法&#96;Run&#96;，里面定义了算法的执行步骤</span><br><span class="line">- 具体私有方法&#96;checkParams&#96; 里面的逻辑实际依赖的接口BehaviorInterface.checkParams(ctx)的抽象方法</span><br><span class="line">- 具体私有方法&#96;getPrizesByNode&#96; 里面的逻辑实际依赖的接口BehaviorInterface.getPrizesByNode(ctx)的抽象方法</span><br><span class="line">- 其他具体私有方法，不会发生变化的具体方法</span><br><span class="line"></span><br><span class="line">实现&#96;BehaviorInterface&#96;的结构体一(按时间抽奖类型)</span><br><span class="line">- 实现接口方法</span><br><span class="line"></span><br><span class="line">实现&#96;BehaviorInterface&#96;的结构体二(按抽奖次数抽奖类型)</span><br><span class="line">- 实现接口方法</span><br><span class="line"></span><br><span class="line">实现&#96;BehaviorInterface&#96;的结构体三(按数额范围区间抽奖)</span><br><span class="line">- 实现接口方法</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200326201327.jpg" alt=""></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//模板模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ConstActTypeTime 按时间抽奖类型</span></span><br><span class="line">ConstActTypeTime <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// ConstActTypeTimes 按抽奖次数抽奖</span></span><br><span class="line">ConstActTypeTimes <span class="keyword">int32</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// ConstActTypeAmount 按数额范围区间抽奖</span></span><br><span class="line">ConstActTypeAmount <span class="keyword">int32</span> = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">ActInfo *ActInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ActInfo 上下文</span></span><br><span class="line"><span class="keyword">type</span> ActInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖</span></span><br><span class="line">ActivityType <span class="keyword">int32</span></span><br><span class="line"><span class="comment">// 其他字段略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BehaviorInterface 不同抽奖类型的行为差异的抽象接口</span></span><br><span class="line"><span class="keyword">type</span> BehaviorInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line">checkParams(ctx *Context) error</span><br><span class="line"><span class="comment">// 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line">getPrizesByNode(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimeDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按时间抽奖类型 比如红包雨</span></span><br><span class="line"><span class="keyword">type</span> TimeDraw <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按时间抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;do nothing(抽取该场次的奖品即可，无需其他逻辑)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimesDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按抽奖次数抽奖类型 比如答题闯关</span></span><br><span class="line"><span class="keyword">type</span> TimesDraw <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按抽奖次数抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断是该用户第几次抽奖...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AmountDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按数额范围区间抽奖 比如订单金额刮奖</span></span><br><span class="line"><span class="keyword">type</span> AmountDraw <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按数额范围区间抽奖:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断属于哪个数额区间...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lottery 抽奖模板</span></span><br><span class="line"><span class="keyword">type</span> Lottery <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 不同抽奖类型的抽象行为</span></span><br><span class="line">concreteBehavior BehaviorInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 抽奖算法</span></span><br><span class="line"><span class="comment">// 稳定不变的算法步骤</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">Run</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 具体方法：校验活动编号(serial_no)是否存在、并获取活动信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkSerialNo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：校验活动、场次是否正在进行</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkStatus(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：其他参数校验</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkParams(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动是否需要消费积分</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.consumePointsByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：场次抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：获取场次奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：获取node奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesByNode(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：抽奖</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.drawPrizes(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：奖品数量判断</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkPrizesStock(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：组装奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.packagePrizeInfo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkSerialNo 校验活动编号(serial_no)是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkSerialNo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动编号(serial_no)是否存在、并获取活动信息...&quot;</span>)</span><br><span class="line"><span class="comment">// 获取活动信息伪代码</span></span><br><span class="line">ctx.ActInfo = &amp;ActInfo&#123;</span><br><span class="line"><span class="comment">// 假设当前的活动类型为按抽奖次数抽奖</span></span><br><span class="line">ActivityType: ConstActTypeTimes,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前抽奖类型的具体行为</span></span><br><span class="line"><span class="keyword">switch</span> ctx.ActInfo.ActivityType &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// 按时间抽奖</span></span><br><span class="line">lottery.concreteBehavior = &amp;TimeDraw&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">// 按抽奖次数抽奖</span></span><br><span class="line">lottery.concreteBehavior = &amp;TimesDraw&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">// 按数额范围区间抽奖</span></span><br><span class="line">lottery.concreteBehavior = &amp;AmountDraw&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;不存在的活动类型&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkStatus 校验活动、场次是否正在进行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkStatus</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动、场次是否正在进行...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.concreteBehavior.checkParams(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesByAct 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// consumePointsByAct 活动是否需要消费积分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">consumePointsByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动是否需要消费积分...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesBySession 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesBySession 获取场次奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取场次奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.concreteBehavior.getPrizesByNode(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// drawPrizes 抽奖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">drawPrizes</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;抽奖...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPrizesStock 奖品数量判断</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkPrizesStock</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;奖品数量判断...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packagePrizeInfo 组装奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">packagePrizeInfo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;组装奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">(&amp;Lottery&#123;&#125;).Run(&amp;Context&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是代码执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;...&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;template&#x2F;template.go&quot;</span><br><span class="line">main.(*Lottery).checkSerialNo 校验活动编号(serial_no)是否存在、并获取活动信息...</span><br><span class="line">main.(*Lottery).checkStatus 校验活动、场次是否正在进行...</span><br><span class="line">main.TimesDraw.checkParams 按抽奖次数抽奖类型:特殊参数校验...</span><br><span class="line">main.(*Lottery).checkTimesByAct 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).consumePointsByAct 活动是否需要消费积分...</span><br><span class="line">main.(*Lottery).checkTimesBySession 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).getPrizesBySession 获取场次奖品信息...</span><br><span class="line">main.TimesDraw.getPrizesByNode 1. 判断是该用户第几次抽奖...</span><br><span class="line">main.TimesDraw.getPrizesByNode 2. 获取对应node的奖品信息...</span><br><span class="line">main.TimesDraw.getPrizesByNode 3. 复写原所有奖品信息(抽取该node节点的奖品)...</span><br><span class="line">main.(*Lottery).drawPrizes 抽奖...</span><br><span class="line">main.(*Lottery).checkPrizesStock 奖品数量判断...</span><br><span class="line">main.(*Lottery).packagePrizeInfo 组装奖品信息...</span><br></pre></td></tr></table></figure><p>demo代码地址：<a href="https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/template.go">https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/template.go</a></p><h4 id="代码demo2-利用golang的合成复用特性实现"><a href="#代码demo2-利用golang的合成复用特性实现" class="headerlink" title="代码demo2(利用golang的合成复用特性实现)"></a>代码demo2(利用golang的<code>合成复用</code>特性实现)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//模板模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ConstActTypeTime 按时间抽奖类型</span></span><br><span class="line">ConstActTypeTime <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// ConstActTypeTimes 按抽奖次数抽奖</span></span><br><span class="line">ConstActTypeTimes <span class="keyword">int32</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// ConstActTypeAmount 按数额范围区间抽奖</span></span><br><span class="line">ConstActTypeAmount <span class="keyword">int32</span> = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">ActInfo *ActInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ActInfo 上下文</span></span><br><span class="line"><span class="keyword">type</span> ActInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖</span></span><br><span class="line">ActivityType <span class="keyword">int32</span></span><br><span class="line"><span class="comment">// 其他字段略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BehaviorInterface 不同抽奖类型的行为差异的抽象接口</span></span><br><span class="line"><span class="keyword">type</span> BehaviorInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line">checkParams(ctx *Context) error</span><br><span class="line"><span class="comment">// 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line">getPrizesByNode(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimeDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按时间抽奖类型 比如红包雨</span></span><br><span class="line"><span class="keyword">type</span> TimeDraw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用模板</span></span><br><span class="line">Lottery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按时间抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;do nothing(抽取该场次的奖品即可，无需其他逻辑)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimesDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按抽奖次数抽奖类型 比如答题闯关</span></span><br><span class="line"><span class="keyword">type</span> TimesDraw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用模板</span></span><br><span class="line">Lottery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按抽奖次数抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断是该用户第几次抽奖...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AmountDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按数额范围区间抽奖 比如订单金额刮奖</span></span><br><span class="line"><span class="keyword">type</span> AmountDraw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用模板</span></span><br><span class="line">Lottery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按数额范围区间抽奖:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断属于哪个数额区间...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lottery 抽奖模板</span></span><br><span class="line"><span class="keyword">type</span> Lottery <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 不同抽奖类型的抽象行为</span></span><br><span class="line">ConcreteBehavior BehaviorInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 抽奖算法</span></span><br><span class="line"><span class="comment">// 稳定不变的算法步骤</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">Run</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 具体方法：校验活动编号(serial_no)是否存在、并获取活动信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkSerialNo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：校验活动、场次是否正在进行</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkStatus(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：其他参数校验</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkParams(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动是否需要消费积分</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.consumePointsByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：场次抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：获取场次奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：获取node奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesByNode(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：抽奖</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.drawPrizes(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：奖品数量判断</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkPrizesStock(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：组装奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.packagePrizeInfo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkSerialNo 校验活动编号(serial_no)是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkSerialNo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动编号(serial_no)是否存在、并获取活动信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkStatus 校验活动、场次是否正在进行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkStatus</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动、场次是否正在进行...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.ConcreteBehavior.checkParams(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesByAct 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// consumePointsByAct 活动是否需要消费积分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">consumePointsByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动是否需要消费积分...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesBySession 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesBySession 获取场次奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取场次奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.ConcreteBehavior.getPrizesByNode(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// drawPrizes 抽奖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">drawPrizes</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;抽奖...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPrizesStock 奖品数量判断</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkPrizesStock</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;奖品数量判断...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packagePrizeInfo 组装奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">packagePrizeInfo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;组装奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">ActInfo: &amp;ActInfo&#123;</span><br><span class="line">ActivityType: ConstActTypeAmount,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ctx.ActInfo.ActivityType &#123;</span><br><span class="line"><span class="keyword">case</span> ConstActTypeTime: <span class="comment">// 按时间抽奖类型</span></span><br><span class="line">instance := &amp;TimeDraw&#123;&#125;</span><br><span class="line">instance.ConcreteBehavior = instance</span><br><span class="line">instance.Run(ctx)</span><br><span class="line"><span class="keyword">case</span> ConstActTypeTimes: <span class="comment">// 按抽奖次数抽奖</span></span><br><span class="line">instance := &amp;TimesDraw&#123;&#125;</span><br><span class="line">instance.ConcreteBehavior = instance</span><br><span class="line">instance.Run(ctx)</span><br><span class="line"><span class="keyword">case</span> ConstActTypeAmount: <span class="comment">// 按数额范围区间抽奖</span></span><br><span class="line">instance := &amp;AmountDraw&#123;&#125;</span><br><span class="line">instance.ConcreteBehavior = instance</span><br><span class="line">instance.Run(ctx)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是代码执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;...&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;template&#x2F;templateOther.go&quot;</span><br><span class="line">main.(*Lottery).checkSerialNo 校验活动编号(serial_no)是否存在、并获取活动信息...</span><br><span class="line">main.(*Lottery).checkStatus 校验活动、场次是否正在进行...</span><br><span class="line">main.(*AmountDraw).checkParams 按数额范围区间抽奖:特殊参数校验...</span><br><span class="line">main.(*Lottery).checkTimesByAct 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).consumePointsByAct 活动是否需要消费积分...</span><br><span class="line">main.(*Lottery).checkTimesBySession 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).getPrizesBySession 获取场次奖品信息...</span><br><span class="line">main.(*AmountDraw).getPrizesByNode 1. 判断属于哪个数额区间...</span><br><span class="line">main.(*AmountDraw).getPrizesByNode 2. 获取对应node的奖品信息...</span><br><span class="line">main.(*AmountDraw).getPrizesByNode 3. 复写原所有奖品信息(抽取该node节点的奖品)...</span><br><span class="line">main.(*Lottery).drawPrizes 抽奖...</span><br><span class="line">main.(*Lottery).checkPrizesStock 奖品数量判断...</span><br><span class="line">main.(*Lottery).packagePrizeInfo 组装奖品信息...</span><br></pre></td></tr></table></figure><p>demo2代码地址：<a href="https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/templateOther.go">https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/templateOther.go</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「模板模式」抽象过程的核心是把握<strong>不变</strong>与<strong>变</strong>：</p><ul><li>不变：<code>Run</code>方法里的抽奖步骤 -&gt; <code>被继承复用</code></li><li>变：不同场景下 -&gt; <code>被具体实现</code><ul><li><code>checkParams</code>参数校验逻辑</li><li><code>getPrizesByNode</code>获取该节点奖品的逻辑</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码模板-Go设计模式实战&quot;&gt;&lt;a href=&quot;#代码模板-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;代码模板 | Go设计模式实战&quot;&gt;&lt;/a&gt;代码模板 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>访问者和双分派</title>
    <link href="http://wangyangyangisme.github.io/posts/d31de58/"/>
    <id>http://wangyangyangisme.github.io/posts/d31de58/</id>
    <published>2021-05-04T14:50:54.000Z</published>
    <updated>2021-05-04T14:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/visitor-double-dispatch">https://refactoringguru.cn/design-patterns/visitor-double-dispatch</a></p></blockquote><h1 id="访问者和双分派"><a href="#访问者和双分派" class="headerlink" title="访问者和双分派"></a>访问者和双分派</h1><p>让我们看看下面几何图形类的层次结构 （注意伪代码）：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Graphic <span class="keyword">is</span></span><br><span class="line">    method draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Shape <span class="keyword">implements</span> Graphic <span class="keyword">is</span></span><br><span class="line">    field id</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dot extends Shape <span class="keyword">is</span></span><br><span class="line">    field x, y</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle extends Dot <span class="keyword">is</span></span><br><span class="line">    field radius</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rectangle extends Shape <span class="keyword">is</span></span><br><span class="line">    field width, height</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CompoundGraphic <span class="keyword">implements</span> Graphic <span class="keyword">is</span></span><br><span class="line">    field children: <span class="keyword">array</span> <span class="keyword">of</span> Graphic</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>这些代码运行正常且程序处于开发阶段。 但某天你决定开发导出功能。 如果将导出功能的代码放入这些类中， 它们看上去会很奇怪。 因此， 你决定不在层次结构里的类中添加导出功能， 而是在层次结构外创建一个包含所有导出逻辑的新类。 该类将包含将每个对象的公有状态导出为 XML 字符串的方法。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Exporter <span class="keyword">is</span></span><br><span class="line">    method <span class="keyword">export</span>(s: Shape) <span class="keyword">is</span></span><br><span class="line">        print(&quot;导出形状&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(d: Dot)</span><br><span class="line">        print(&quot;导出点&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(c: Circle)</span><br><span class="line">        print(&quot;导出圆形&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(r: Rectangle)</span><br><span class="line">        print(&quot;导出矩形&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(cs: CompoundGraphic)</span><br><span class="line">        print(&quot;导出组合图形&quot;)</span><br></pre></td></tr></table></figure><p>这些代码看上去不错， 让我们运行试试：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> App() <span class="keyword">is</span></span><br><span class="line">    method <span class="keyword">export</span>(shape: Shape) <span class="keyword">is</span></span><br><span class="line">        Exporter exporter = new Exporter()</span><br><span class="line">        exporter.<span class="keyword">export</span>(shape);</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">export</span>(new Circle());</span><br><span class="line"><span class="comment">// 不幸的是，这里将输出“导出形状”。</span></span><br></pre></td></tr></table></figure><p>等等！ 为什么？！</p><h2 id="像编译器一样思考"><a href="#像编译器一样思考" class="headerlink" title="像编译器一样思考"></a>像编译器一样思考</h2><p>注意： 下面的内容对于绝大多数面向对象编程的现代语言 （Java、 C# 和 PHP 等） 来说都是成立的。</p><h3 id="后期-动态绑定"><a href="#后期-动态绑定" class="headerlink" title="后期/动态绑定"></a>后期/动态绑定</h3><p>假设你是一个编译器。 你必须决定如何编译下面的代码：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method drawShape(shape: Shape) <span class="keyword">is</span></span><br><span class="line">    shape.draw();</span><br></pre></td></tr></table></figure><p>让我们看看... <code>Shape</code>形状类中定义了　 <code>draw</code>绘制方法。 稍等， 还有四个子类重写了该方法。 我们能否有把握地决定调用哪个实现呢？ 看上去不太可能。 确认的唯一方式是启动程序并检查传递给该方法的对象所属的类。 我们只知道一件事情： 该对象<strong>将包含</strong> <code>draw</code>方法的实现。</p><p>因此， 最终的机器代码将检查 <code>s</code>参数的类并且从合适的类中选择 <code>draw</code>方法的实现。</p><p>这种动态类型检查被称为后期 （或动态） 绑定：</p><ul><li><strong>后期</strong>， 是因为我们在编译后和运行时才将对象及其实现链接起来。</li><li><strong>动态</strong>， 是因为每个新对象都可能需要链接到不同的实现。</li></ul><h3 id="前期-静态绑定"><a href="#前期-静态绑定" class="headerlink" title="前期/静态绑定"></a>前期/静态绑定</h3><p>现在， 让我们来 “编译” 以下代码：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method exportShape(shape: Shape) <span class="keyword">is</span></span><br><span class="line">    Exporter exporter = new Exporter()</span><br><span class="line">    exporter.<span class="keyword">export</span>(shape);</span><br></pre></td></tr></table></figure><p>第二行代码很清楚：  <code>Exporter</code>类没有构造方法， 因此我们仅能将对象初始化。 那么对 <code>export</code>导出方法的调用呢？  <code>Exporter</code>有五个同名但参数不同的方法。 调用哪一个呢？ 看来我们在这里也需要动态绑定。</p><p>但还有另一个问题。 如果 <code>导出器</code>类中有一个图形类没有相应的 <code>export</code>方法怎么办？ 例如， 一个 <code>Ellipse</code>椭圆对象。 编译器不能确保存在适当的与重写后的方法相对应的重载方法。 编译器无法应对这种模凌两可的情况。</p><p>因此， 编译器开发者会选择安全的方式： 使用前期 （或静态） 绑定来处理重载方法。</p><ul><li><strong>前期</strong>， 是因为它发生在运行程序前编译的时候。 --<strong>静态</strong>， 是因为它无法在运行时更改。</li></ul><p>让我们回到之前的示例。 我们可以确定传递过来的参数类型属于 <code>Shape</code>类层次结构中： 要么是 <code>Shape</code>类， 要么是它的子类。 我们还知道 <code>Exporter</code>类包含支持 <code>Shape</code>类的导出功能基础实现：  <code>export(s: Shape)</code> 。</p><p>这是唯一能够安全链接当前代码而不会造成模凌两可情形的实现。 因此尽管我们将 <code>Rectangle</code>对象传递给了 <code>export­Shape</code> ， 导出类仍将调用 <code>export(s: Shape)</code>方法。</p><h2 id="双分派"><a href="#双分派" class="headerlink" title="双分派"></a>双分派</h2><p><strong>双分派</strong>是一个允许在重载时使用动态绑定的技巧。 下面是其实现方式：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Visitor <span class="keyword">is</span></span><br><span class="line">    method visit(s: Shape) <span class="keyword">is</span></span><br><span class="line">        print(&quot;访问形状&quot;)</span><br><span class="line">    method visit(d: Dot)</span><br><span class="line">        print(&quot;访问点&quot;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Graphic <span class="keyword">is</span></span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Shape <span class="keyword">implements</span> Graphic <span class="keyword">is</span></span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line">        <span class="comment">// 编译器明确知道 `this` 的类型是 `Shape`。</span></span><br><span class="line">        <span class="comment">// 因此可以安全地调用 `visit(s: Shape)`。</span></span><br><span class="line">        v.visit(this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dot extends Shape <span class="keyword">is</span></span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line">        <span class="comment">// 编译器明确知道 `this` 的类型是 `Dot`。</span></span><br><span class="line">        <span class="comment">// 因此可以安全地调用 `visit(s: Dot)`。</span></span><br><span class="line">        v.visit(this)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Visitor v = new Visitor();</span><br><span class="line">Graphic g = new Dot();</span><br><span class="line"></span><br><span class="line"><span class="comment">// `accept` 方法是重写而不是重载的。编译器可以进行动态绑定。</span></span><br><span class="line"><span class="comment">// 因此在对象调用某个方法时，将执行其所属类中的 `accept`</span></span><br><span class="line"><span class="comment">// 方法（在本例中是 `Dot` 类）。</span></span><br><span class="line">g.accept(v);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：&quot;访问点&quot;</span></span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>尽管<a href="https://refactoringguru.cn/design-patterns/visitor">访问者</a>模式基于双分派的原则创建， 但这并不是其主要目的。 访问者的目的是让你能为整个类层次结构添加 “外部” 操作， 而无需修改这些类的已有代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/visitor-double-dispatch&quot;&gt;https://refactoringguru.cn/design-patterns/visi
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式比较</title>
    <link href="http://wangyangyangisme.github.io/posts/63b2a10f/"/>
    <id>http://wangyangyangisme.github.io/posts/63b2a10f/</id>
    <published>2021-05-04T14:24:54.000Z</published>
    <updated>2021-05-04T14:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/factory-comparison">https://refactoringguru.cn/design-patterns/factory-comparison</a></p></blockquote><h1 id="工厂模式比较"><a href="#工厂模式比较" class="headerlink" title="工厂模式比较"></a>工厂模式比较</h1><p>本文将对下列概念之间的差异进行说明：</p><ol><li>工厂</li><li>构建方法</li><li>静态构建 （或工厂） 方法</li><li>简单工厂</li><li><a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a></li><li><a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a></li></ol><p>你可以在网上找到这些术语的参考信息。 尽管它们看上去相似， 但其含义都不一样。 许多人没有意识到这一点， 从而出现了混淆和误解。</p><p>因此让我们搞清楚其中的不同之处， 一劳永逸地解决这个问题。</p><h2 id="1-工厂"><a href="#1-工厂" class="headerlink" title="1. 工厂"></a>1. 工厂</h2><p><strong>工厂</strong>是一个含义模糊的术语， 表示可以创建一些东西的函数、 方法或类。 最常见的情况下， 工厂创建的是对象。 但是它们也可以创建文件和数据库记录等其他东西。</p><p>例如， 下面这些东西都可以非正式地被称为 “工厂”：</p><ul><li>创建程序 GUI 的函数或方法；</li><li>创建用户的类；</li><li>以特定方式调用类构造函数的静态方法。</li><li>一种创建型设计模式。</li></ul><p>当某人说到 “工厂” 这个词时， 其具体含义通常可以根据上下文来确定。 但如果你有疑问， 可以直接提问。 毕竟作者本人有时候也没有搞清楚。</p><h2 id="2-构建方法"><a href="#2-构建方法" class="headerlink" title="2. 构建方法"></a>2. 构建方法</h2><p>构建方法在 《<a href="https://refactoringguru.cn/ref-to-patterns-book">重构与模式</a>》 中被定义为 “创建对象的方法”。 这意味着每个工厂方法模式的结果都是 “构建方法”， 但反过来则并非如此。 这也意味着你可以用 “构建方法” 来替代马丁·福勒在<a href="https://refactoring.guru/ref-book">重构</a>中使用的 “工厂方法” 和乔斯华·布洛克在 《<a href="https://refactoringguru.cn/effective-java-book">Effective Java</a>》 中使用的 “静态工厂方法”。</p><p>在实际中， 构建方法只是构造函数调用的封装器。 它可能只是一个能更好地表达意图的名称。 此外， 它可以让你的代码独立于构造函数的改动， 甚至还可以包含一些特殊的逻辑， 返回已有对象以而不是创建新对象。</p><p>许多人会仅仅因为这些方法创建了新对象而称之为 “工厂方法”。 其中的逻辑很直接： 所有的<em>工厂</em>都会创建对象， 而该方法会创建对象， 所以显然它是一个<em>工厂方法</em>。 当遇到真正的<a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a>时， 这自然会造成许多混淆。</p><p>在下面的示例中，  <code>next</code>是一个构建方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;value = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Number (<span class="keyword">$this</span>-&gt;value + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-静态构建方法"><a href="#3-静态构建方法" class="headerlink" title="3. 静态构建方法"></a>3. 静态构建方法</h2><p><strong>静态构建方法</strong>是被声明为 <code>static</code>的构建方法。 换句话说， 你无需创建对象就能在某个类上调用该方法。</p><p>不要因为某些人将这些方法称为 “静态工厂方法” 而被其迷惑。 这种称呼只是一个坏习惯。 <a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a>是一种依赖于继承的设计模式。 如果将它设置为 <code>static</code> ， 你就不能在子类中对其进行扩展， 这就破坏了该模式的目的。</p><p>当静态构建方法返回一个新对象时， 它就成为了构造函数的替代品。</p><p>在下列情况中， 这可能会非常实用：</p><ul><li>你必须针对不同的目的提供多个不同的构造函数， 但是其签名相同时。 例如， 在 Java、 C++、 C# 以及其他许多语言中不可能同时存在 <code>Random­(int max)</code>和 <code>Random­(int min)</code>函数。 最常用的变通方式是创建多个调用默认构造函数的静态方法， 并于稍后再设置适当的数值。</li><li>你希望复用已有对象而不是初始化新对象时 （参考<a href="https://refactoringguru.cn/design-patterns/singleton">单例</a>模式）。 绝大多数编程语言的构造函数必须都返回一个新的类实例。 静态构建方法是应对该限制的变通方法。 在静态方法内部， 你的代码会决定是调用构造函数创建一个全新实例， 还是返回一个在缓存中已有的对象。</li></ul><p>在下面的例子中，  <code>load</code>方法是一个静态构建方法。 它提供了一种从数据库中获取用户的灵活方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $id, $name, $email, $phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$id, $name, $email, $phone</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($id, $name, $email, $phone) = DB::load_data(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>);</span><br><span class="line">        $user = <span class="keyword">new</span> User($id, $name, $email, $phone);</span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-简单工厂模式"><a href="#4-简单工厂模式" class="headerlink" title="4. 简单工厂模式"></a>4. 简单工厂模式</h2><p><strong>简单工厂</strong>模式 描述了一个类， 它拥有一个包含大量条件语句的构建方法， 可根据方法的参数来选择对何种产品进行初始化并将其返回。</p><p>人们通常会将<em>简单工厂</em>与普通的<em>工厂</em>或其它创建型设计模式混淆。 在绝大多数情况下， 简单工厂是引入<a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a>或<a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a>模式时的一个中间步骤。</p><p>简单工厂通常没有子类。 但当从一个简单工厂中抽取出子类后， 它看上去就会更像经典的<em>工厂方法</em>模式了。</p><p>顺便提一句， 如果你将一个简单工厂声明为 <code>abstract</code>类型， 它并不会神奇地变成<em>抽象工厂</em>模式。</p><p>这里是一个<em>简单工厂</em>的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">$type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>: <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;customer&#x27;</span>: <span class="keyword">return</span> <span class="keyword">new</span> Customer();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>: <span class="keyword">return</span> <span class="keyword">new</span> Admin();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;传递的用户类型错误。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-工厂方法模式"><a href="#5-工厂方法模式" class="headerlink" title="5. 工厂方法模式"></a>5. 工厂方法模式</h2><p><strong>工厂方法</strong> 是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><p>如果在基类及其扩展的子类中都有一个构建方法的话， 那它可能就是工厂方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">createEmployee</span>(<span class="params">$id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        $employee = <span class="keyword">$this</span>-&gt;createEmployee($id);</span><br><span class="line">        $employee-&gt;paySalary();</span><br><span class="line">        $employee-&gt;dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createEmployee</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Programmer($id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createEmployee</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Accountant($id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-抽象工厂模式"><a href="#6-抽象工厂模式" class="headerlink" title="6. 抽象工厂模式"></a>6. 抽象工厂模式</h2><p><strong>抽象工厂</strong> 》 是一种创建型设计模式， 它能创建一系列相关或相互依赖的对象， 而无需指定其具体类。</p><p>什么是 “系列对象”？ 例如有这样一组的对象：  <code>运输工具</code>+ <code>引擎</code>+ <code>控制器</code> 。 它可能会有几个变体：</p><ol><li><code>汽车</code>+ <code>内燃机</code>+ <code>方向盘</code></li><li><code>飞机</code>+ <code>喷气式发动机</code>+ <code>操纵杆</code></li></ol><p>如果你的程序中并不涉及产品系列的话， 那就不需要抽象工厂。</p><p>再次重申， 许多人分不清<em>抽象工厂</em>模式和声明为 <code>abstract</code>的简单工厂。 不要犯这个错误！</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>现在你知道了它们之间的区别， 试试用全新眼光看待下面的设计模式吧：</p><ul><li><a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a></li><li><a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/factory-comparison&quot;&gt;https://refactoringguru.cn/design-patterns/factory-c
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
</feed>
