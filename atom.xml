<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blank</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyangyangisme.github.io/"/>
  <updated>2021-05-18T16:43:15.907Z</updated>
  <id>http://wangyangyangisme.github.io/</id>
  
  <author>
    <name>Blank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker管理工具</title>
    <link href="http://wangyangyangisme.github.io/posts/1043496/"/>
    <id>http://wangyangyangisme.github.io/posts/1043496/</id>
    <published>2021-05-18T16:43:15.907Z</published>
    <updated>2021-05-18T16:43:15.907Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.portainer.io/">portainer</a> Portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。</p><p><a href="https://www.rainbond.com/">rainbond</a> Rainbond以应用为中心，通过“无侵入”架构,支撑应用开发、交付、运维，并可接管IaaS、虚拟机和物理服务器等各类底层资源。让用户专注于业务本身，不用关心底层复杂的技术。(k8s管理面板)</p><p><a href="https://rancher.com/">rancher</a> Rancher是一个开源的企业级容器管理平台。通过Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。Rancher提供了在生产环境中使用的管理Docker和Kubernetes的全栈化容器部署与管理平台。</p><p><a href="http://shipyard-project.com/">shipyard</a> hipyard是docker的web可视化界面管理工具，是建立在docker集群管理工具Citadel之上，可以管理镜像、容器、主机等资源的web图形化工具，包括core和extension两个版本，core即shipyard主要是把多个 Docker host上的 containers 统一管理（支持跨越多个host），extension即shipyard-extensions添加了应用路由和负载均衡、集中化日志、部署等。Shipyard是在Docker Swarm实现对容器、镜像、docker集群、仓库、节点进行管理的web系统。</p><p><a href="https://github.com/docker/swarm/">Swarm</a> Docker Swarm是Docker官方提供的集群工具。它可以将一些关联的Docker主机转变成一个虚拟Docker主机。因为Docker  Swarm符合Docker API的标准,任何已经可以与Docker守护进程通信的工具都可以使用Swarm来透明地扩展到多个主机。支持工具包括:</p><ul><li>Dokku</li><li>Docker Compose</li><li>Docker Machine</li><li>Jenkins</li></ul><p><a href="https://kitematic.com/">kitematic</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.portainer.io/&quot;&gt;portainer&lt;/a&gt; Portainer是Docker的图形化管理工具，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制
      
    
    </summary>
    
    
      <category term="docker" scheme="http://wangyangyangisme.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub Actions入门教程</title>
    <link href="http://wangyangyangisme.github.io/posts/2fcceac/"/>
    <id>http://wangyangyangisme.github.io/posts/2fcceac/</id>
    <published>2021-05-18T15:00:40.000Z</published>
    <updated>2021-05-18T15:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Actions入门教程"><a href="#GitHub-Actions入门教程" class="headerlink" title="GitHub Actions入门教程"></a>GitHub Actions入门教程</h1><blockquote><p><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p><p><a href="https://www.cnblogs.com/i-code/p/12869046.html">https://www.cnblogs.com/i-code/p/12869046.html</a></p><p><a href="https://segmentfault.com/a/1190000022360769">https://segmentfault.com/a/1190000022360769</a></p></blockquote><h2 id="一、GitHub-Actions-是什么？"><a href="#一、GitHub-Actions-是什么？" class="headerlink" title="一、GitHub Actions 是什么？"></a>一、GitHub Actions 是什么？</h2><p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p><p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p><p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p><p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions">官方市场</a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions">awesome actions</a> 的仓库，也可以找到不少 action。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/git/2021-05-18_230758.png" alt="img"></p><p>上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 action。比如，<code>actions/setup-node</code>就表示<code>github.com/actions/setup-node</code>这个<a href="https://github.com/actions/setup-node">仓库</a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions">github.com/actions</a> 里面。</p><p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href="https://help.github.com/en/articles/about-actions#versioning-your-action">官方文档</a>。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actions/setup-node@74bc508 <span class="comment"># 指向一个 commit</span></span><br><span class="line">actions/setup-node@v1.0    <span class="comment"># 指向一个标签</span></span><br><span class="line">actions/setup-node@master  <span class="comment"># 指向一个分支</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>GitHub Actions 有一些自己的术语。</p><p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h2 id="三、workflow-文件"><a href="#三、workflow-文件" class="headerlink" title="三、workflow 文件"></a>三、workflow 文件</h2><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p><p>workflow 文件采用 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 格式</a>，文件名可以任意取，但是后缀名统一为<code>.yml</code>，比如<code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p><p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions">官方文档</a>。下面是一些基本字段。</p><p><strong>（1）<code>name</code></strong></p><p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Demo</span><br></pre></td></tr></table></figure></blockquote><p><strong>（2）<code>on</code></strong></p><p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on: push</span><br></pre></td></tr></table></figure></blockquote><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on: [push, pull_request]</span><br></pre></td></tr></table></figure></blockquote><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p><p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p><p><strong>（3）<code>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</code></strong></p><p>指定触发事件时，可以限定分支或标签。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:    </span><br><span class="line">      - master</span><br></pre></td></tr></table></figure></blockquote><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p><p><strong>（4）<code>jobs.&lt;job_id&gt;.name</code></strong></p><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  my_first_job:</span><br><span class="line">    name: My first job</span><br><span class="line">  my_second_job:</span><br><span class="line">    name: My second job</span><br></pre></td></tr></table></figure></blockquote><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><p><strong>（5）<code>jobs.&lt;job_id&gt;.needs</code></strong></p><p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  job1:</span><br><span class="line">  job2:</span><br><span class="line">    needs: job1</span><br><span class="line">  job3:</span><br><span class="line">    needs: [job1, job2]</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><p><strong>（6）<code>jobs.&lt;job_id&gt;.runs-on</code></strong></p><p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><blockquote><ul><li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li><li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li><li><code>macOS-latest</code>或<code>macOS-10.14</code></li></ul></blockquote><p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runs-on: ubuntu-<span class="number">18.04</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>（7）<code>jobs.&lt;job_id&gt;.steps</code></strong></p><p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><blockquote><ul><li><code>jobs.&lt;job_id&gt;.steps.name</code>：步骤名称。</li><li><code>jobs.&lt;job_id&gt;.steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs.&lt;job_id&gt;.steps.env</code>：该步骤所需的环境变量。</li></ul></blockquote><p>下面是一个完整的 workflow 文件的范例。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">name: Greeting <span class="keyword">from</span> Mona</span><br><span class="line">on: push</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  my-job:</span><br><span class="line">    name: My Job</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Print a greeting</span><br><span class="line">      env:</span><br><span class="line">        MY_VAR: Hi there! My name is</span><br><span class="line">        FIRST_NAME: Mona</span><br><span class="line">        MIDDLE_NAME: The</span><br><span class="line">        LAST_NAME: Octocat</span><br><span class="line">      run: |</span><br><span class="line">        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h2 id="四、实例：React-项目发布到-GitHub-Pages"><a href="#四、实例：React-项目发布到-GitHub-Pages" class="headerlink" title="四、实例：React 项目发布到 GitHub Pages"></a>四、实例：React 项目发布到 GitHub Pages</h2><p>下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在<a href="https://github.com/ruanyf/github-actions-demo">这个仓库</a>里面，发布后的参考网址为<a href="https://ruanyf.github.io/github-actions-demo">ruanyf.github.io/github-actions-demo</a>。</p><p>第一步，GitHub Actions 目前还处在测试阶段，需要到<a href="https://github.com/features/actions/signup/">这个网址</a>申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。</p><p>获得资格后，仓库顶部的菜单会出现<code>Actions</code>一项。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/git/2021-05-18_231502.png" alt="img"></p><p>第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">官方文档</a>，生成一个密钥。然后，将这个密钥储存到当前仓库的<code>Settings/Secrets</code>里面。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/git/2021-05-18_231823.png" alt="img"></p><p>上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是<code>ACCESS_TOKEN</code>。如果你不用这个名字，后面脚本里的变量名也要跟着改。</p><p>第三步，本地计算机使用<a href="https://github.com/facebook/create-react-app"><code>create-react-app</code></a>，生成一个标准的 React 应用。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app github-actions-demo</span><br><span class="line">$ <span class="built_in">cd</span> github-actions-demo</span><br></pre></td></tr></table></figure></blockquote><p>然后，打开<code>package.json</code>文件，加一个<code>homepage</code>字段，表示该应用发布后的根目录（参见<a href="https://create-react-app.dev/docs/deployment#building-for-relative-paths">官方文档</a>）。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;https://[username].github.io/github-actions-demo&quot;</span>,</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，将<code>[username]</code>替换成你的 GitHub 用户名，参见<a href="https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10">范例</a>。</p><p>第四步，在这个仓库的<code>.github/workflows</code>目录，生成一个 workflow 文件，名字可以随便取，这个示例是<code>ci.yml</code>。</p><p>我们选用一个别人已经写好的 action：<a href="https://github.com/marketplace/actions/deploy-to-github-pages">JamesIves/github-pages-deploy-action</a>，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看<a href="https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml">源码</a>）。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Build and Deploy Demo</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout</span><br><span class="line">      uses: actions/checkout@master</span><br><span class="line"></span><br><span class="line">    - name: Build and Deploy</span><br><span class="line">      uses: JamesIves/github-pages-deploy-action@master</span><br><span class="line">      env:</span><br><span class="line">        ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">        BRANCH: gh-pages</span><br><span class="line">        FOLDER: build</span><br><span class="line">        BUILD_SCRIPT: npm install &amp;&amp; npm run build</span><br></pre></td></tr></table></figure></blockquote><p>上面这个 workflow 文件的要点如下。</p><blockquote><ol><li>整个流程在<code>master</code>分支发生<code>push</code>事件时触发。</li><li>只有一个<code>job</code>，运行在虚拟机环境<code>ubuntu-latest</code>。</li><li>第一步是获取源码，使用的 action 是<code>actions/checkout</code>。</li><li>第二步是构建和部署，使用的 action 是<code>JamesIves/github-pages-deploy-action</code>。</li><li>第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。</li></ol></blockquote><p>第五步，保存上面的文件后，将整个仓库推送到 GitHub。</p><p>GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看<a href="https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks">运行日志</a>，日志默认保存30天。</p><p>以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">GitHub</span> <span class="string">Actions</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1</span><span class="string">.</span> <span class="string">git</span> <span class="string">checkout...</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2</span><span class="string">.</span> <span class="string">setup</span> <span class="string">nodejs...</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3</span><span class="string">.</span> <span class="string">install</span> <span class="string">hexo...</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span> <span class="string">-S</span> <span class="string">hexo-prism-plugin</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-search</span> <span class="string">--save</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-permalink-pinyin</span>  <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span> <span class="string">--save</span> <span class="string">hexo-wordcount</span> <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-filter-github-emojis</span>  <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-feed</span>  <span class="string">-g</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4</span><span class="string">.</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">files...</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提交到我们的存放静态资源的仓库</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">y4code/hexo-deploy-action@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">it-briefcode/it-briefcode.github.io</span> <span class="comment"># The repository the action should deploy to.</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">master</span>  <span class="comment"># The branch the action should deploy to.</span></span><br><span class="line">        <span class="attr">PUBLISH_DIR:</span> <span class="string">./public</span> <span class="comment"># The folder the action should deploy.</span></span><br></pre></td></tr></table></figure><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><a href="https://help.github.com/en/categories/automating-your-workflow-with-github-actions">GitHub Pages 官方文档</a></li><li><a href="https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/">Github Actions for web apps</a>, Luke Boyle</li><li><a href="https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851">My First Week With GitHub Actions</a>, Adam Zolyak</li></ul><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub-Actions入门教程&quot;&gt;&lt;a href=&quot;#GitHub-Actions入门教程&quot; class=&quot;headerlink&quot; title=&quot;GitHub Actions入门教程&quot;&gt;&lt;/a&gt;GitHub Actions入门教程&lt;/h1&gt;&lt;blockquo
      
    
    </summary>
    
    
      <category term="git" scheme="http://wangyangyangisme.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://wangyangyangisme.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>图解设计模式</title>
    <link href="http://wangyangyangisme.github.io/posts/54deb0e2/"/>
    <id>http://wangyangyangisme.github.io/posts/54deb0e2/</id>
    <published>2021-05-16T15:30:56.000Z</published>
    <updated>2021-05-16T15:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图解设计模式"><a href="#图解设计模式" class="headerlink" title="图解设计模式"></a>图解设计模式</h1><blockquote><p><a href="http://tigerb.cn/2021/03/07/patterns-picture/">http://tigerb.cn/2021/03/07/patterns-picture/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>常常听别人说设计模式不太容易理解，以及学习设计模式到底能帮我们解决什么问题，今天我们就用几张图来看看：</p><ul><li>设计模式到底是什么？</li><li>为什么我们需要学习设计模式？</li></ul><h2 id="我也写过烂代码"><a href="#我也写过烂代码" class="headerlink" title="我也写过烂代码"></a><strong>我也写过烂代码</strong></h2><p>是的，没什么，我也写过烂代码，刚毕业时业务逻辑也会一个函数干到底，只知道能实现功能就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">func YourFunc() &#123;</span><br><span class="line">&#x2F;&#x2F; 所有的逻辑代码一股脑写完......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307142851.png" alt="图片"></p><h2 id="知道了拆分函数"><a href="#知道了拆分函数" class="headerlink" title="知道了拆分函数"></a><strong>知道了拆分函数</strong></h2><p>自然而然知道了需要合理拆分函数。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144449.png" alt="图片"></p><p>然后把各个函数组织起来。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144537.png" alt="图片"></p><h2 id="面临新的困境"><a href="#面临新的困境" class="headerlink" title="面临新的困境"></a><strong>面临新的困境</strong></h2><p>某一天产品的需求需要支持新的场景，发现某一处的代码逻辑有变动需要支持新的场景，怎么办？</p><ol><li>整个代码拷贝一份？不会有人这么干吧？(其实我还真见过，你们呢😏)</li><li>把绿色变动的代码块，复制成一个新的函数，修改为新场景使用的函数？</li><li>把变动的代码再提为两个新函数，一个绿色为老代码，一个蓝色为新场景代码？</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144548.png" alt="图片"></p><p>上面这种解决问题的方式就是面向过程的编程思想。</p><h2 id="我们都在变优秀"><a href="#我们都在变优秀" class="headerlink" title="我们都在变优秀"></a><strong>我们都在变优秀</strong></h2><p>随着我们不断的学习，学会使用了面向对象的特性。</p><p>以往函数式编程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 函数式编程</span><br><span class="line">&#x2F;&#x2F; 把一个个你以为可以独立的逻辑封住到一个函数里</span><br><span class="line">func YourFunc() &#123;</span><br><span class="line">&#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象编程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 面向对象编程</span><br><span class="line">&#x2F;&#x2F; 把不同的逻辑独立成一个对象</span><br><span class="line">type DemoStruct struct&#123;&#125;</span><br><span class="line"> </span><br><span class="line">func (d *DemoStruct) YourFunc() &#123;</span><br><span class="line">&#x2F;&#x2F; ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307144805.png" alt="图片"></p><p>所以，我们如何用面向对象的思想组织上面的代码呢？</p><p>答案：继承。</p><h2 id="学会了使用继承"><a href="#学会了使用继承" class="headerlink" title="学会了使用继承"></a><strong>学会了使用继承</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">特别备注：Go里面用合成复用</span><br></pre></td></tr></table></figure><p>定义一个父类，并把差异业务代码抽象为一个抽象函数，其他代码逻辑都实现在父类。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145233.png" alt="图片"></p><p>不同的场景定义为不同的子类，子类继承父类，并实现抽象方法(也就是写差异代码)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">灰色：父类</span><br><span class="line">绿色：场景一子类</span><br><span class="line">蓝色：场景二子类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145350.png" alt="图片"></p><p>是不是很优雅的解决上面的场景的问题。</p><h2 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a><strong>什么是设计模式？</strong></h2><p>优雅的解决上面场景问题时，利用面向对象特性的经验总结，就是设计模式。然而在历史的长河中，已经为我们总结了20+的常用设计模式，我们只需要学习和加以灵活运用即可。比如：</p><h3 id="这！就是模板模式"><a href="#这！就是模板模式" class="headerlink" title="这！就是模板模式"></a><strong>这！就是模板模式</strong></h3><p>还记得上面使用继承的过程吗？其实我们只需要做一件事情，就是经典的模板模式了，是什么？</p><p>答案：保证该场景下父类中封装的方法调用过程是稳定不变的，只是其中的方法可能变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">灰色：父类</span><br><span class="line">绿色：场景一子类</span><br><span class="line">蓝色：场景二子类</span><br><span class="line">黄色：场景三子类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145530.png" alt="图片"></p><h3 id="这！就是策略模式"><a href="#这！就是策略模式" class="headerlink" title="这！就是策略模式"></a><strong>这！就是策略模式</strong></h3><p>我们把上面代码做些改动：</p><ol><li>不使用继承。</li><li>定义一个接口interface类型。</li><li>变更原抽象方法为调用一个接口interface类型的函数。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; DemoInterface 接口</span><br><span class="line">type DemoInterface interface &#123;</span><br><span class="line">    DoSomething(ctx *Context) error </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var CurrentStrategyInstance DemoInterface</span><br><span class="line"> </span><br><span class="line">func Demo() &#123;</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">CurrentStrategyInstance.DoSomething(c)</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">&#125;</span><br><span class="line">灰色：主业务类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145603.png" alt="图片"></p><ol><li>不同的场景定义为一个具体的类，且实现上面的interface。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">灰色：主业务类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145617.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">灰色：主业务类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145643.png" alt="图片"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">灰色：主业务类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br><span class="line">黄色：场景三DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307145705.png" alt="图片"></p><ol><li>最后我们判断不同的场景初始化不同的具体类，再调用即可。</li></ol><h2 id="这！就是简单工厂模式-策略模式"><a href="#这！就是简单工厂模式-策略模式" class="headerlink" title="这！就是简单工厂模式 + 策略模式"></a><strong>这！就是简单工厂模式 + 策略模式</strong></h2><p>接着我们把判断不同的场景初始化不同的具体类单独封装起来，这就是简单工厂模式 + 策略模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"> </span><br><span class="line">type DemoFactory struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Get 获取实例</span><br><span class="line">func (f *DemoFactory) Get(instanceType string) DemoInterface &#123;</span><br><span class="line">switch instanceType &#123;</span><br><span class="line">case &quot;DemoA&quot;:</span><br><span class="line">return &amp;DemoA&#123;&#125;</span><br><span class="line">case &quot;DemoB&quot;:</span><br><span class="line">return &amp;DemoB&#123;&#125;</span><br><span class="line">case &quot;DemoC&quot;:</span><br><span class="line">return &amp;DemoC&#123;&#125;</span><br><span class="line"> </span><br><span class="line">default:</span><br><span class="line">panic(&quot;不支持的类型&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; DemoInterface 接口</span><br><span class="line">type DemoInterface interface &#123;</span><br><span class="line">    DoSomething(ctx *Context) error </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var CurrentStrategyInstance DemoInterface</span><br><span class="line"> </span><br><span class="line">func Demo() &#123;</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">  CurrentStrategyInstance &#x3D; (DemoFactory&#123;&#125;).Get(&quot;DemoA&quot;)</span><br><span class="line">CurrentStrategyInstance.DoSomething(c)</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">&#125;</span><br><span class="line">灰色(大)：主业务类</span><br><span class="line">灰色(小)：简单工厂类</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br><span class="line">黄色：场景三DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307154154.png" alt="图片"></p><h2 id="这！就是状态模式"><a href="#这！就是状态模式" class="headerlink" title="这！就是状态模式"></a><strong>这！就是状态模式</strong></h2><p>假设判断上面使用何种策略不是依赖外部，而是依赖内部状态，则我们调整下代码，则就变成了状态模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package demo</span><br><span class="line"></span><br><span class="line">var currentStateInstance DemoInterface</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">    &#x2F;&#x2F; 定时器更新状态</span><br><span class="line">    go func() &#123;</span><br><span class="line">        for &#123;</span><br><span class="line">            select &#123;</span><br><span class="line">            case t :&#x3D; &lt;-time.NewTicker(1 * time.Second).C:</span><br><span class="line">                &#x2F;&#x2F; 模拟变成状态 StateA</span><br><span class="line">                currentStateInstance &#x3D; setState(&quot;StateA&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; Get 获取实例</span><br><span class="line">func setState(State string) DemoInterface &#123;</span><br><span class="line">  &#x2F;&#x2F; 变更状态</span><br><span class="line">switch State &#123;</span><br><span class="line">case &quot;StateA&quot;:</span><br><span class="line">return &amp;StateA&#123;&#125;</span><br><span class="line">case &quot;StateB&quot;:</span><br><span class="line">return &amp;StateB&#123;&#125;</span><br><span class="line">case &quot;StateC&quot;:</span><br><span class="line">return &amp;StateC&#123;&#125;</span><br><span class="line"> </span><br><span class="line">default:</span><br><span class="line">panic(&quot;不支持的状态&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; DemoInterface 接口</span><br><span class="line">type DemoInterface interface &#123;</span><br><span class="line">    DoSomething(ctx *Context) error </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; type StateA StateB StateC 略</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 模拟</span><br><span class="line">func Demo() &#123;</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">CurrentStateInstance.DoSomething(c)</span><br><span class="line">&#x2F;&#x2F;.....逻辑略......</span><br><span class="line">&#125;</span><br><span class="line">灰色(大)：主业务类</span><br><span class="line">灰色(小)：修改内部状态的函数</span><br><span class="line">绿色：场景一DemoInterface的具体实现类</span><br><span class="line">蓝色：场景二DemoInterface的具体实现类</span><br><span class="line">黄色：场景三DemoInterface的具体实现类</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20210307160512.png" alt="图片"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>举了这么多🌰，所以关于：</p><ul><li>设计模式到底是什么？</li><li>为什么我们需要学习设计模式？</li></ul><p>你有答案了吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图解设计模式&quot;&gt;&lt;a href=&quot;#图解设计模式&quot; class=&quot;headerlink&quot; title=&quot;图解设计模式&quot;&gt;&lt;/a&gt;图解设计模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tigerb.cn/2021/03/07/patt
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的设计过程</title>
    <link href="http://wangyangyangisme.github.io/posts/88f78d2f/"/>
    <id>http://wangyangyangisme.github.io/posts/88f78d2f/</id>
    <published>2021-05-16T15:24:56.000Z</published>
    <updated>2021-05-16T15:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的设计过程"><a href="#面向对象的设计过程" class="headerlink" title="面向对象的设计过程"></a>面向对象的设计过程</h1><blockquote><p><a href="http://tigerb.cn/2019/10/11/oop/">http://tigerb.cn/2019/10/11/oop/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我一直认为分享的目的不是炫技。</p><ul><li>一是，自我学习的总结。</li><li>二是，降低他人的学习成本。</li><li>三是，别人对自己学习结果的审核。</li></ul><p>同时，本次分享有下面四个要素：</p><table><thead><tr><th align="left">观点</th><th align="left">本次分享的观点是一个软件工程中的思维方法，不限于编程语言</th></tr></thead><tbody><tr><td align="left"><strong>探讨</strong></td><td align="left"><strong>我可能理解错的，或者大家没理解的，欢迎大家积极评论，尽可能多互动，目的增加理解</strong></td></tr><tr><td align="left"><strong>理解</strong></td><td align="left"><strong>真的希望大家能理解</strong></td></tr><tr><td align="left"><strong>运用</strong></td><td align="left"><strong>最重要的，如果你觉着有帮助，一定要去在实际业务中实战</strong></td></tr></tbody></table><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作中，几乎大家经常抱怨别人写的代码：</p><ul><li>没法改</li><li>耦合高</li><li>无法扩展</li></ul><blockquote><p>今天就来探讨如何<strong>克服</strong>上面的问题～</p></blockquote><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>首先问个问题：</p><blockquote><p>平常工作中来了一个业务需求，我们是如何开始写代码的？</p></blockquote><p>我推测大多数人可能：</p><ul><li>1、梳理业务</li><li>2、设计数据库、接口、缓存</li><li>3、评审</li><li>4、于是就开始了 <code>怎么怎么样...如果怎么怎么样...怎么怎么样...</code>愉快的码代码的过程</li></ul><blockquote><p>此处有人觉着有啥问题么？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">备注：说出来问题的，本次分享就可以略过了~</span><br></pre></td></tr></table></figure><h3 id="一个简单的业务场景"><a href="#一个简单的业务场景" class="headerlink" title="一个简单的业务场景"></a>一个简单的业务场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">比如产品提了个需求：</span><br><span class="line">描述“我一个同事”一天的生活，简单来看看他一天干些啥：</span><br><span class="line"></span><br><span class="line">1.0 饿了吃饭</span><br><span class="line">1.1 到点吃饭</span><br><span class="line"></span><br><span class="line">2.0 渴了喝水</span><br><span class="line">2.1 到点喝水</span><br><span class="line"></span><br><span class="line">3.0 困了睡觉</span><br><span class="line">3.1 到点睡觉</span><br><span class="line">3.2 有可能一个人睡觉，也有可能... 是吧？复杂</span><br></pre></td></tr></table></figure><p>刚开始，一个业务逻辑从头写到尾</p><p><a href="http://cdn.tigerb.cn/20191020234013.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234013.png" alt="img"></a></p><p>一个业务逻辑(拆成多个函数)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020234051.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234051.png" alt="img"></a></p><p>一个业务逻辑(引入类)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020234118.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234118.png" alt="img"></a></p><p>一个业务逻辑(拆成多个类方法)从头写到尾，也许、可能、貌似、猜测大多数人停留到了这个阶段。<br>问题：某一天多了社交的能力，咋办？</p><p><a href="http://cdn.tigerb.cn/20191020234526.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234526.png" alt="img"></a></p><p>一个业务逻辑(拆成多类)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020234848.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020234848.png" alt="img"></a></p><p>一个业务逻辑(拆成类、抽象类、接口)从头写到尾：</p><p><a href="http://cdn.tigerb.cn/20191020235015.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235015.png" alt="img"></a></p><blockquote><p>思考🤔：上面的代码就没啥问题了吗？</p></blockquote><p>上面就是面向对象设计的代码结果。</p><blockquote><p>所以，如何设计出完全面向对象的代码？</p></blockquote><h2 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h2><blockquote><p>什么是代码建模？</p></blockquote><p>把业务抽象成事物(类class、抽象类abstact class)和行为(接口interface)的过程。</p><h3 id="实栗🌰分析"><a href="#实栗🌰分析" class="headerlink" title="实栗🌰分析"></a>实栗🌰分析</h3><p>又来看一个实际的业务场景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最近“我一个同事”开始创业了，刚创立了一家电商公司，B2C，自营书籍《3分钟学会交际》。最近开始写提交订单的代码。</span><br><span class="line"></span><br><span class="line">⚠️注意场景 1.刚创业 2.简单的单体应用 3.此处不探讨架构</span><br></pre></td></tr></table></figure><p>一般来说，我们根据业务需求一顿分析，开始定义接口API、设计数据库、缓存、技术评审等就开始码代码了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">接口参数：</span><br><span class="line">uid</span><br><span class="line">address_id</span><br><span class="line">coupon_id</span><br><span class="line">.etc</span><br><span class="line"></span><br><span class="line">业务逻辑：</span><br><span class="line">参数校验-&gt;</span><br><span class="line">地址校验-&gt;</span><br><span class="line">其他校验-&gt;</span><br><span class="line">写订单表-&gt;</span><br><span class="line">写订单商品信息表-&gt;</span><br><span class="line">写日志-&gt;</span><br><span class="line">扣减商品库存-&gt;</span><br><span class="line">清理购物车-&gt;</span><br><span class="line">扣减各种促销优惠活动的库存-&gt;</span><br><span class="line">使用优惠券-&gt;</span><br><span class="line">其他营销逻辑等等-&gt;</span><br><span class="line">发送消息-&gt;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure><p>就开始写代码了<code>怎么怎么样...如果怎么怎么样...怎么怎么样...</code>一蹴而就、思路清晰、逻辑清楚、很快搞定完代码，很优秀是不是，值得鼓励。</p><p>但是，上面的结果就是大概所有人都见过的连续上千行的代码等等。上面的流程没啥问题啊，那正确的做法是什么了？就是接着要说的<strong>代码建模</strong>。</p><p>我们根据上面的场景，开始建模。</p><h3 id="业务分析少不了"><a href="#业务分析少不了" class="headerlink" title="业务分析少不了"></a>业务分析少不了</h3><p>同样，首先，我们看看<code>提交订单</code>这个业务场景要做的事情:</p><blockquote><p>换个角度看业务其实很简单：根据用户相关信息生成一个订单。</p></blockquote><ol><li><p>梳理得到业务逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参数校验-&gt;</span><br><span class="line">地址校验-&gt;</span><br><span class="line">其他校验-&gt;</span><br><span class="line">写订单表-&gt;</span><br><span class="line">写订单商品信息表-&gt;</span><br><span class="line">写日志-&gt;</span><br><span class="line">扣减商品库存-&gt;</span><br><span class="line">清理购物车-&gt;</span><br><span class="line">扣减各种促销优惠活动的库存-&gt;</span><br><span class="line">使用优惠券-&gt;</span><br><span class="line">其他营销逻辑等等-&gt;</span><br><span class="line">发送消息-&gt;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure></li><li><p>梳理业务逻辑依赖信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户信息</span><br><span class="line">商品信息</span><br><span class="line">地址信息</span><br><span class="line">优惠券信息</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure></li></ol><p>再次回归概念</p><blockquote><p>什么是代码建模？把业务抽象成事物(类class、抽象类abstact class)和行为(接口interface)的过程。</p></blockquote><h3 id="获取事物"><a href="#获取事物" class="headerlink" title="获取事物"></a>获取事物</h3><p>比如我们把订单生成的过程可以想象成<code>机器人</code>，一个生成订单的<code>订单生成机器人</code>，或者订单生成机器啥的，这样我们就得到了<code>代码建模</code>过程中的一个事物。</p><p>从而我们就可以把这个事物转化成一个类(或结构体)，或者抽象类。</p><p><a href="http://cdn.tigerb.cn/20191020223812.jpg"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020223812.jpg" alt="img"></a></p><h3 id="获取行为"><a href="#获取行为" class="headerlink" title="获取行为"></a>获取行为</h3><p>这些操作就是上面机器人要做的事情。</p><p>事物有了：<code>订单生成机器人</code><br>行为呢？毫无疑问就是上面各种业务逻辑。把具体的行为抽象成一个订单创建行为接口：</p><p><a href="http://cdn.tigerb.cn/20191020224230.jpg"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020224230.jpg" alt="img"></a></p><h3 id="得到UML"><a href="#得到UML" class="headerlink" title="得到UML"></a>得到UML</h3><p><a href="http://cdn.tigerb.cn/20191020233121.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020233121.png" alt="img"></a></p><h3 id="设计代码"><a href="#设计代码" class="headerlink" title="设计代码"></a>设计代码</h3><ol><li>定义一个类</li></ol><p><a href="http://cdn.tigerb.cn/20191020235309.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235309.png" alt="img"></a></p><ol><li>定义一个订单创建行为的接口</li></ol><p><a href="http://cdn.tigerb.cn/20191020235643.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235643.png" alt="img"></a></p><ol><li><p>定义具体的不同订单创建行为类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参数校验-&gt;</span><br><span class="line">地址校验-&gt;</span><br><span class="line">其他校验-&gt;</span><br><span class="line">写订单表-&gt;</span><br><span class="line">写订单商品信息表-&gt;</span><br><span class="line">写日志-&gt;</span><br><span class="line">扣减商品库存-&gt;</span><br><span class="line">清理购物车-&gt;</span><br><span class="line">扣减各种促销优惠活动的库存-&gt;</span><br><span class="line">使用优惠券-&gt;</span><br><span class="line">其他营销逻辑等等-&gt;</span><br><span class="line">发送消息-&gt;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure></li></ol><p><a href="http://cdn.tigerb.cn/20191020235840.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191020235840.png" alt="img"></a></p><ol><li>创建订单</li></ol><p>这里的代码该怎么写，这样？</p><p><a href="http://cdn.tigerb.cn/20191021000742.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021000742.png" alt="img"></a></p><p>还可以继续优化吗？</p><p><a href="http://cdn.tigerb.cn/20191021001002.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021001002.png" alt="img"></a></p><p>使用闭包。</p><p><a href="http://cdn.tigerb.cn/20191021001305.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021001305.png" alt="img"></a></p><h3 id="PHP版完整代码"><a href="#PHP版完整代码" class="headerlink" title="PHP版完整代码"></a>PHP版完整代码</h3><p><a href="http://cdn.tigerb.cn/20191024143840.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191024143840.png" alt="img"></a></p><h3 id="GO版完整代码"><a href="#GO版完整代码" class="headerlink" title="GO版完整代码"></a>GO版完整代码</h3><p><a href="http://cdn.tigerb.cn/20191024144623.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191024144623.png" alt="img"></a></p><blockquote><p>上面的代码有什么好处？</p></blockquote><p>假如“我一个同事”又要新开发一个新的应用，新的应用创建订单的时候又有新的逻辑，比如没有优惠逻辑、新增了增加用户积分的逻辑等等，复用上面的代码，是不是就很简单了。</p><p><a href="http://cdn.tigerb.cn/20191021001739.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191021001739.png" alt="img"></a></p><blockquote><p>所以现在，什么是面向对象？</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h3><ul><li>对接口编程而不是对实现编程</li><li>优先使用对象组合而不是继承</li><li>抽象用于不同的事物，而接口用于事物的行为</li></ul><p>针对上面的概念，我们再回头开我们上面的代码</p><blockquote><p>对接口编程而不是对实现编程</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：RobotOrderCreate依赖了BehaviorOrderCreateInterface抽象接口</span><br></pre></td></tr></table></figure><blockquote><p>优先使用对象组合而不是继承</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：完全没有使用继承，多个行为不同场景组合使用</span><br></pre></td></tr></table></figure><blockquote><p>抽象用于不同的事物，而接口用于事物的行为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">1. 抽象了一个创建订单的机器人 RobotOrderCreate</span><br><span class="line">2. 机器人又有不同的创建行为</span><br><span class="line">3. 机器人的创建行为最终依赖于BehaviorOrderCreateInterface接口</span><br></pre></td></tr></table></figure><p>是不是完美契合，所以这就是“面向对象的设计过程”。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码建模过程就是“面向对象的设计过程”的具体实现方式.</span><br></pre></td></tr></table></figure><h2 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><blockquote><p>最后，设计模式又是什么？</p></blockquote><p>同样，我们下结合上面的场景和概念预习下设计模式。</p><h4 id="设计模式的设计原则"><a href="#设计模式的设计原则" class="headerlink" title="设计模式的设计原则"></a>设计模式的设计原则</h4><blockquote><p>开闭原则（Open Close Principle）：对扩展开放，对修改封闭</p></blockquote><p>看看上面的最终的代码是不是完美契合。</p><p><a href="http://cdn.tigerb.cn/20191022131439.png"><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20191022131439.png" alt="img"></a></p><blockquote><p>依赖倒转原则：对接口编程，依赖于抽象而不依赖于具体</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：创建订单的逻辑从依赖具体的业务转变为依赖于抽象接口BehaviorOrderCreateInterface</span><br></pre></td></tr></table></figure><blockquote><p>接口隔离原则：使用多个接口，而不是对一个接口编程，去依赖降低耦合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">结果：上面的场景，我们只简单定义了订单创建的接BehaviorOrderCreateInterface。由于订单创建过程可能出现异常回滚，我们就需要再定义一个订单创建回滚的接口</span><br><span class="line">BehaviorOrderCreateRollBackInterface.</span><br></pre></td></tr></table></figure><blockquote><p>迪米特法则，又称最少知道原则：减少内部依赖，尽可能的独立</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：还是上面那段代码，我们把RobotOrderCreate机器人依赖的行为通过外部注入的方式使用。</span><br></pre></td></tr></table></figure><blockquote><p>合成复用原则：多个独立的实体合成聚合，而不是使用继承</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：RobotOrderCreate依赖了多个实际的订单创建行为类。</span><br></pre></td></tr></table></figure><blockquote><p>里氏代换：超类（父类）出现的地方，派生类（子类）都可以出现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果：不好意思，我们完全没用继承。（备注：继承容易造成父类膨胀。）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面向对象的设计过程&quot;&gt;&lt;a href=&quot;#面向对象的设计过程&quot; class=&quot;headerlink&quot; title=&quot;面向对象的设计过程&quot;&gt;&lt;/a&gt;面向对象的设计过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tigerb.cn/201
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/bfac6395/"/>
    <id>http://wangyangyangisme.github.io/posts/bfac6395/</id>
    <published>2021-05-16T06:31:03.000Z</published>
    <updated>2021-05-16T06:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><p>我的代码没有<code>else</code>系列-简单工厂</p><p>结合实际业务谈设计模式</p><p>业务场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用一个服务生成静态页面</span><br><span class="line">不同的页面拥有不同的模块</span><br></pre></td></tr></table></figure><p>不同的页面的数据结构不一样<br>生成不同的页面对象</p><p>正常代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header      <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">footer      <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header  <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">footer  <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := &amp;Context&#123;</span><br><span class="line">URI: <span class="string">&quot;cart/list&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pageObject PageInterface</span><br><span class="line"><span class="keyword">switch</span> c.URI &#123;</span><br><span class="line"><span class="keyword">case</span> CartConst:</span><br><span class="line">pageObject = &amp;Cart&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProductConst:</span><br><span class="line">pageObject = &amp;Product&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;不支持的页面&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pageObject.MakeData(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单工厂模式的概念<br>简单理解，一句话：</p><blockquote><p>统一封装生产对象的过程</p></blockquote><p>简单工厂模式下的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//简单工厂模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageFactory 构建页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> PageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> p.Ctx.URI &#123;</span><br><span class="line"><span class="keyword">case</span> CartConst:</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProductConst:</span><br><span class="line"><span class="keyword">return</span> &amp;Product&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;不支持的页面&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">URI: <span class="string">&quot;cart/list&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">pageFactory := &amp;PageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;</span><br><span class="line">pageFactory.Get().MakeData(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageFactoryInterface 页面简单工厂接口</span></span><br><span class="line"><span class="keyword">type</span> PageFactoryInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Get() PageInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> CartPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *CartPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProductPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> ProductPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *ProductPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成购物车页面数据对象</span></span><br><span class="line">(&amp;CartPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成spu详情页面数据对象</span></span><br><span class="line">(&amp;ProductPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抽象工厂</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//抽象工厂模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// CartConst 购物车列表页面</span></span><br><span class="line">CartConst = <span class="string">&quot;cart/list&quot;</span></span><br><span class="line"><span class="comment">// ProductConst 商品列表页面</span></span><br><span class="line">ProductConst = <span class="string">&quot;product/list&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 请求上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageInterface PageInterface</span></span><br><span class="line"><span class="keyword">type</span> PageInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">MakeData(c *Context) (<span class="keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cart 购物车页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Cart <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Cart *Cart)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成购物车静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Cart, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Spu页面数据对象</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">header <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">footer <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MakeData 构建数据对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Product *Product)</span> <span class="title">MakeData</span><span class="params">(c *Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 构建数据的页面代码...</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生成spu详情静态页面数据对象...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> Product, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PageFactoryInterface 页面简单工厂接口</span></span><br><span class="line"><span class="keyword">type</span> PageFactoryInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Get() PageInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> CartPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *CartPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProductPageFactory 构建购物车页面对象的简单工厂</span></span><br><span class="line"><span class="keyword">type</span> ProductPageFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx *Context</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *ProductPageFactory)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">PageInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Cart&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成购物车页面数据对象</span></span><br><span class="line">(&amp;CartPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成spu详情页面数据对象</span></span><br><span class="line">(&amp;ProductPageFactory&#123;</span><br><span class="line">Ctx: ctx,</span><br><span class="line">&#125;).Get().MakeData(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tigerb.cn/&quot;&gt;http://tigerb.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的代码没有&lt;code&gt;else&lt;/code&gt;系列-简单工厂&lt;/p&gt;
&lt;p&gt;结合实际业务谈设计模式&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>并发组件 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/11cee220/"/>
    <id>http://wangyangyangisme.github.io/posts/11cee220/</id>
    <published>2021-05-16T06:31:02.000Z</published>
    <updated>2021-05-16T06:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发组件-Go设计模式实战"><a href="#并发组件-Go设计模式实战" class="headerlink" title="并发组件 | Go设计模式实战"></a>并发组件 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「组合模式」结合Go语言天生的并发特性，如何在真实业务场景中使用。</p><p>之前文章<a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">《代码组件 | Go设计模式实战》</a>已经介绍了「组合模式」的概念，以及在业务中的使用。今天我们结合Go语言天生的并发特性，升级「组合模式」为「并发组合模式」。</p><p>我们先来简单回顾下「组合模式」的知识，详细可以查看上篇文章<a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">《代码组件 | Go设计模式实战》</a></p><h2 id="什么是「并发组合模式」？"><a href="#什么是「并发组合模式」？" class="headerlink" title="什么是「并发组合模式」？"></a>什么是「并发组合模式」？</h2><p>组合模式的概念：</p><blockquote><p>一个具有层级关系的对象由一系列拥有父子关系的对象通过树形结构组成。</p></blockquote><p>并发组合模式的概念：</p><blockquote><p>一个具有层级关系的对象由一系列拥有父子关系的对象通过树形结构组成，子对象即可被串行执行，也可被并发执行</p></blockquote><p>并发组合模式的优势：</p><ul><li>原本串行的业务(存在阻塞的部分，比如网络IO等)可以被并发执行，利用多核优势提升性能。</li></ul><h2 id="什么真实业务场景可以用「并发组合模式」？"><a href="#什么真实业务场景可以用「并发组合模式」？" class="headerlink" title="什么真实业务场景可以用「并发组合模式」？"></a>什么真实业务场景可以用「并发组合模式」？</h2><p>我们还是以「组合模式」中的“订单结算页面”为例，继续来看看某东的订单结算页面：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200331124724.jpeg" style="width:30%"></p><p>从页面的展示形式上，可以看出：</p><ul><li>页面由多个模块构成，比如：<ul><li>地址模块：获取用户地址数据</li><li>支付方式模块：获取支付方式列表</li><li>店铺模块：获取店铺、购物车选中商品等信息</li><li>发票模块：获取发票类型列表</li><li>优惠券模块：获取用户优惠券列表</li><li>某豆模块：获取用户积分信息</li><li>礼品卡模块：获取礼品卡列表列表</li><li>订单详细金额模块：获取订单金额信息</li></ul></li><li>单个模块可以由多个子模块构成<ul><li>店铺模块，又由如下模块构成：<ul><li>商品模块：获取购物车选中商品信息</li><li>售后模块：获取商品售后信息</li><li>优惠模块：获取商品参与的优惠活动信息</li><li>物流模块：获取商品支持的配送方式列表</li></ul></li></ul></li></ul><p>按照「组合模式」的业务逻辑执行流程：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20201103203539.png" style="width:38%"></p><p>但是，我们很清楚有些模块之间并没有依赖，<strong>且该模块涉及服务远程调用等阻塞操作</strong>，比如：</p><ul><li>地址模块调用地址服务获取用户地址数据时。</li><li>支付方式模块也可以同时去读redis获取支付方式列表数据等等。</li></ul><p>所以:<strong>有的模块其实可以被并发的执行</strong>。</p><p>如果把上面不存在依赖关系的模块修改为并发的执行，则我们得到如下的执行流程：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20201103203735.png" style="width:100%"></p><h2 id="怎么用「并发组合模式」？"><a href="#怎么用「并发组合模式」？" class="headerlink" title="怎么用「并发组合模式」？"></a>怎么用「并发组合模式」？</h2><p>关于「并发组合模式」的建模过程完全可以参考之前文章<a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">《代码组件 | Go设计模式实战》</a>，我们这里只说说需要着重注意的地方。</p><p>「并发组合模式」的核心还是<code>Component</code>组件接口，我们先看看「组合模式」的<code>Component</code>组件接口如下(再之前的文章上做了优化，进一步封装提取了<code>BusinessLogicDo</code>方法)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务和执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line">Do(ctx *Context, currentConponent Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务业务逻辑</span></span><br><span class="line">BusinessLogicDo(ctx *Context) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看「并发组合模式」的Component`组件接口，如下(重点看和「组合模式」的区别)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务:`BusinessLogicDo`和执行子组件:`ChildsDo`</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的WaitGroup对象</span></span><br><span class="line"><span class="comment">// 区别1：增加了WaitGroup对象参数，目的是等待并发子组件的执行完成。</span></span><br><span class="line">Do(ctx *Context, currentConponent Component, wg *sync.WaitGroup) error</span><br><span class="line"><span class="comment">// 执行当前组件业务逻辑</span></span><br><span class="line"><span class="comment">// resChan 回写当前组件业务执行结果的channel</span></span><br><span class="line"><span class="comment">// 区别2：增加了一个channel参数，目的是并发组件执行逻辑时引入了超时机制，需要一个channel接受组件的执行结果</span></span><br><span class="line">BusinessLogicDo(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们详细再来看，相对于「组合模式」，引入并发之后需要着重关注如下几点：</p><ul><li>并发子组件需要设置超时时间：防止子组件执行时间过长，解决方案关键字<code>context.WithTimeout</code></li><li>区分普通组件和并发组件：合成复用基础组件，封装为并发基础组件</li><li>拥有并发子组件的父组件需要等待并发子组件执行完毕(包含超时)，解决方案关键字<code>sync.WaitGroup</code></li><li>并发子组件执行自身业务逻辑是需检测超时：防止子组件内部执行业务逻辑时间过长，解决方案关键字<code>select</code>和<code>&lt;-ctx.Done()</code></li></ul><h3 id="第一点：并发子组件需要设置超时时间"><a href="#第一点：并发子组件需要设置超时时间" class="headerlink" title="第一点：并发子组件需要设置超时时间"></a>第一点：并发子组件需要设置超时时间</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Context 业务上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// context.WithTimeout派生的子上下文</span></span><br><span class="line">TimeoutCtx context.Context</span><br><span class="line"><span class="comment">// 超时函数</span></span><br><span class="line">context.CancelFunc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二点：区分普通组件和并发组件"><a href="#第二点：区分普通组件和并发组件" class="headerlink" title="第二点：区分普通组件和并发组件"></a>第二点：区分普通组件和并发组件</h3><p>增加新的并发基础组件结构体<code>BaseConcurrencyComponent</code>，并合成复用「组合模式」中的基础组件<code>BaseComponent</code>，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseConcurrencyComponent 并发基础组件</span></span><br><span class="line"><span class="keyword">type</span> BaseConcurrencyComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line"><span class="comment">// 当前组件是否有并发子组件</span></span><br><span class="line">HasChildConcurrencyComponents <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 并发子组件列表</span></span><br><span class="line">ChildConcurrencyComponents []Component</span><br><span class="line"><span class="comment">// wg 对象</span></span><br><span class="line">*sync.WaitGroup</span><br><span class="line"><span class="comment">// 当前组件业务执行结果channel</span></span><br><span class="line">logicResChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当前组件执行过程中的错误信息</span></span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕-包含超时"><a href="#第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕-包含超时" class="headerlink" title="第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕(包含超时)"></a>第三点：拥有并发子组件的父组件需要等待并发子组件执行完毕(包含超时)</h3><p>修改「组合模式」中的<code>ChildsDo</code>方法，使其支持并发执行子组件，主要修改和实现如下：</p><ul><li>通过<code>go</code>关键字执行子组件</li><li>通过<code>*WaitGroup.Wait()</code>等待子组件执行结果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bc.WaitGroup == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.WaitGroup = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行并发子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line">bc.WaitGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> childComponent.Do(ctx, childComponent, bc.WaitGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bc.HasChildConcurrencyComponents &#123;</span><br><span class="line"><span class="comment">// 等待并发组件执行结果</span></span><br><span class="line">bc.WaitGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四点：并发子组件执行自身业务逻辑是需检测超时"><a href="#第四点：并发子组件执行自身业务逻辑是需检测超时" class="headerlink" title="第四点：并发子组件执行自身业务逻辑是需检测超时"></a>第四点：并发子组件执行自身业务逻辑是需检测超时</h3><p><code>select</code>关键字context.WithTimeout()派生的子上下文Done()方案返回的channel，发生超时该channel会被关闭。具体实现代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 初始化并发子组件channel</span></span><br><span class="line"><span class="keyword">if</span> bc.logicResChan == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.logicResChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> currentConponent.BusinessLogicDo(bc.logicResChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 等待业务执行结果</span></span><br><span class="line"><span class="keyword">case</span> &lt;-bc.logicResChan:</span><br><span class="line"><span class="comment">// 业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo wait.done...&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">// 超时等待</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.TimeoutCtx.Done():</span><br><span class="line"><span class="comment">// 超时退出</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo timeout...&quot;</span>)</span><br><span class="line">bc.Err = ErrConcurrencyComponentTimeout</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">err = currentConponent.ChildsDo(ctx)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//Go设计模式实战系列</span></span><br><span class="line"><span class="comment">//组合模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example:</span></span><br><span class="line"><span class="comment">// 创建一个根组件</span></span><br><span class="line"><span class="comment">// 如果子组件存在并发组件则父组件必须为并发组件</span></span><br><span class="line"><span class="comment">// type RootComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *RootComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // do nothing</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个并发组件</span></span><br><span class="line"><span class="comment">// type DemoConcurrenyComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoConcurrenyComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 并发组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个普通组件</span></span><br><span class="line"><span class="comment">// type DemoComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 普通组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 普通组件</span></span><br><span class="line"><span class="comment">// root.Mount(</span></span><br><span class="line"><span class="comment">// &amp;DemoComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 并发组件</span></span><br><span class="line"><span class="comment">// root := &amp;RootComponent&#123;&#125;</span></span><br><span class="line"><span class="comment">// root.MountConcurrency(</span></span><br><span class="line"><span class="comment">// &amp;DemoConcurrenyComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 初始化业务上下文 并设置超时时间</span></span><br><span class="line"><span class="comment">// ctx := GetContext(5 * time.Second)</span></span><br><span class="line"><span class="comment">// defer ctx.CancelFunc()</span></span><br><span class="line"><span class="comment">// // 开始执行子组件</span></span><br><span class="line"><span class="comment">// root.ChildsDo(ctx)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ErrConcurrencyComponentTimeout 并发组件业务超时</span></span><br><span class="line">ErrConcurrencyComponentTimeout = errors.New(<span class="string">&quot;Concurrency Component Timeout&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 业务上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// context.WithTimeout派生的子上下文</span></span><br><span class="line">TimeoutCtx context.Context</span><br><span class="line"><span class="comment">// 超时函数</span></span><br><span class="line">context.CancelFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetContext 获取业务上下文实例</span></span><br><span class="line"><span class="comment">// d 超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetContext</span><span class="params">(d time.Duration)</span> *<span class="title">Context</span></span> &#123;</span><br><span class="line">c := &amp;Context&#123;&#125;</span><br><span class="line">c.TimeoutCtx, c.CancelFunc = context.WithTimeout(context.Background(), d)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务:`BusinessLogicDo`和执行子组件:`ChildsDo`</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line">Do(ctx *Context, currentConponent Component, wg *sync.WaitGroup) error</span><br><span class="line"><span class="comment">// 执行当前组件业务逻辑</span></span><br><span class="line"><span class="comment">// resChan 回写当前组件业务执行结果的channel</span></span><br><span class="line">BusinessLogicDo(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseComponent 基础组件</span></span><br><span class="line"><span class="comment">// 实现Add:添加一个子组件</span></span><br><span class="line"><span class="comment">// 实现Remove:移除一个子组件</span></span><br><span class="line"><span class="keyword">type</span> BaseComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 子组件列表</span></span><br><span class="line">ChildComponents []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mount 挂载一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Mount</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//执行当前组件业务代码</span></span><br><span class="line">err = currentConponent.BusinessLogicDo(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">return</span> currentConponent.ChildsDo(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent 并发基础组件</span></span><br><span class="line"><span class="keyword">type</span> BaseConcurrencyComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line"><span class="comment">// 当前组件是否有并发子组件</span></span><br><span class="line">HasChildConcurrencyComponents <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 并发子组件列表</span></span><br><span class="line">ChildConcurrencyComponents []Component</span><br><span class="line"><span class="comment">// wg 对象</span></span><br><span class="line">*sync.WaitGroup</span><br><span class="line"><span class="comment">// 当前组件业务执行结果channel</span></span><br><span class="line">logicResChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当前组件执行过程中的错误信息</span></span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MountConcurrency 挂载一个并发子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">MountConcurrency</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.HasChildConcurrencyComponents = <span class="literal">true</span></span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bc.WaitGroup == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.WaitGroup = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行并发子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line">bc.WaitGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> childComponent.Do(ctx, childComponent, bc.WaitGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bc.HasChildConcurrencyComponents &#123;</span><br><span class="line"><span class="comment">// 等待并发组件执行结果</span></span><br><span class="line">bc.WaitGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 初始化并发子组件channel</span></span><br><span class="line"><span class="keyword">if</span> bc.logicResChan == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.logicResChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> currentConponent.BusinessLogicDo(bc.logicResChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 等待业务执行结果</span></span><br><span class="line"><span class="keyword">case</span> &lt;-bc.logicResChan:</span><br><span class="line"><span class="comment">// 业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo wait.done...&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">// 超时等待</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.TimeoutCtx.Done():</span><br><span class="line"><span class="comment">// 超时退出</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo timeout...&quot;</span>)</span><br><span class="line">bc.Err = ErrConcurrencyComponentTimeout</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">err = currentConponent.ChildsDo(ctx)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckoutPageComponent 订单结算页面组件</span></span><br><span class="line"><span class="keyword">type</span> CheckoutPageComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CheckoutPageComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单结算页面组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddressComponent 地址组件</span></span><br><span class="line"><span class="keyword">type</span> AddressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AddressComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;地址组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取地址信息 ing...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟远程调用地址服务</span></span><br><span class="line">http.Get(<span class="string">&quot;http://example.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 写入业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取地址信息 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PayMethodComponent 支付方式组件</span></span><br><span class="line"><span class="keyword">type</span> PayMethodComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PayMethodComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;支付方式组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取支付方式 ing...&quot;</span>)</span><br><span class="line"><span class="comment">// 模拟远程调用地址服务 略</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取支付方式 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreComponent 店铺组件</span></span><br><span class="line"><span class="keyword">type</span> StoreComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *StoreComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;店铺组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SkuComponent 商品组件</span></span><br><span class="line"><span class="keyword">type</span> SkuComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *SkuComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;商品组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionComponent 优惠信息组件</span></span><br><span class="line"><span class="keyword">type</span> PromotionComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PromotionComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠信息组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressComponent 物流组件</span></span><br><span class="line"><span class="keyword">type</span> ExpressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *ExpressComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;物流组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AftersaleComponent 售后组件</span></span><br><span class="line"><span class="keyword">type</span> AftersaleComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AftersaleComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;售后组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InvoiceComponent 发票组件</span></span><br><span class="line"><span class="keyword">type</span> InvoiceComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *InvoiceComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发票组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取发票信息 ing...&quot;</span>)</span><br><span class="line"><span class="comment">// 模拟远程调用地址服务 略</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 写入业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取发票信息 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CouponComponent 优惠券组件</span></span><br><span class="line"><span class="keyword">type</span> CouponComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CouponComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠券组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取最优优惠券 ing...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟远程调用优惠券服务</span></span><br><span class="line">http.Get(<span class="string">&quot;http://example.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入业务执行结果</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取最优优惠券 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GiftCardComponent 礼品卡组件</span></span><br><span class="line"><span class="keyword">type</span> GiftCardComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseConcurrencyComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 并发组件实际填充业务逻辑的地方</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *GiftCardComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;礼品卡组件...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取礼品卡信息 ing...&quot;</span>)</span><br><span class="line"><span class="comment">// 模拟远程调用地址服务 略</span></span><br><span class="line">resChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 写入业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取礼品卡信息 done...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderComponent 订单金额详细信息组件</span></span><br><span class="line"><span class="keyword">type</span> OrderComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *OrderComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单金额详细信息组件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Demo 示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Demo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化订单结算页面 这个大组件</span></span><br><span class="line">checkoutPage := &amp;CheckoutPageComponent&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载子组件</span></span><br><span class="line">storeComponent := &amp;StoreComponent&#123;&#125;</span><br><span class="line">skuComponent := &amp;SkuComponent&#123;&#125;</span><br><span class="line">skuComponent.Mount(</span><br><span class="line">&amp;PromotionComponent&#123;&#125;,</span><br><span class="line">&amp;AftersaleComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">storeComponent.Mount(</span><br><span class="line">skuComponent,</span><br><span class="line">&amp;ExpressComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---挂载组件---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通组件</span></span><br><span class="line">checkoutPage.Mount(</span><br><span class="line">storeComponent,</span><br><span class="line">&amp;OrderComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 并发组件</span></span><br><span class="line">checkoutPage.MountConcurrency(</span><br><span class="line">&amp;AddressComponent&#123;&#125;,</span><br><span class="line">&amp;PayMethodComponent&#123;&#125;,</span><br><span class="line">&amp;InvoiceComponent&#123;&#125;,</span><br><span class="line">&amp;CouponComponent&#123;&#125;,</span><br><span class="line">&amp;GiftCardComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化业务上下文 并设置超时时间</span></span><br><span class="line">ctx := GetContext(<span class="number">5</span> * time.Second)</span><br><span class="line"><span class="keyword">defer</span> ctx.CancelFunc()</span><br><span class="line"><span class="comment">// 开始构建页面组件数据</span></span><br><span class="line">checkoutPage.ChildsDo(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">runtime.GOMAXPROCS(runtime.NumCPU() - <span class="number">1</span>)</span><br><span class="line">Demo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;patterns&#x2F;composite&#x2F;concurrency&#x2F;composite-concurrency.go&quot;</span><br><span class="line">main.(*StoreComponent).BusinessLogicDo 店铺组件...</span><br><span class="line">main.(*SkuComponent).BusinessLogicDo 商品组件...</span><br><span class="line">main.(*PromotionComponent).BusinessLogicDo 优惠信息组件...</span><br><span class="line">main.(*AftersaleComponent).BusinessLogicDo 售后组件...</span><br><span class="line">main.(*ExpressComponent).BusinessLogicDo 物流组件...</span><br><span class="line">main.(*OrderComponent).BusinessLogicDo 订单金额详细信息组件...</span><br><span class="line">main.(*PayMethodComponent).BusinessLogicDo 支付方式组件...</span><br><span class="line">main.(*PayMethodComponent).BusinessLogicDo 获取支付方式 ing...</span><br><span class="line">main.(*InvoiceComponent).BusinessLogicDo 发票组件...</span><br><span class="line">main.(*InvoiceComponent).BusinessLogicDo 获取发票信息 ing...</span><br><span class="line">main.(*GiftCardComponent).BusinessLogicDo 礼品卡组件...</span><br><span class="line">main.(*GiftCardComponent).BusinessLogicDo 获取礼品卡信息 ing...</span><br><span class="line">main.(*CouponComponent).BusinessLogicDo 优惠券组件...</span><br><span class="line">main.(*CouponComponent).BusinessLogicDo 获取发票信息 ing...</span><br><span class="line">main.(*AddressComponent).BusinessLogicDo 地址组件...</span><br><span class="line">main.(*AddressComponent).BusinessLogicDo 获取地址信息 ing...</span><br><span class="line">main.(*InvoiceComponent).BusinessLogicDo 获取发票信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*PayMethodComponent).BusinessLogicDo 获取支付方式 done...</span><br><span class="line">main.(*AddressComponent).BusinessLogicDo 获取地址信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*CouponComponent).BusinessLogicDo 获取发票信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br><span class="line">main.(*GiftCardComponent).BusinessLogicDo 获取礼品卡信息 done...</span><br><span class="line">main.(*BaseConcurrencyComponent).Do bc.BusinessLogicDo wait.done...</span><br></pre></td></tr></table></figure><h4 id="「组合模式」和「并发组合模式」基准测试对比"><a href="#「组合模式」和「并发组合模式」基准测试对比" class="headerlink" title="「组合模式」和「并发组合模式」基准测试对比"></a>「组合模式」和「并发组合模式」基准测试对比</h4><p>基准测试代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> composite</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;easy-tips/go/patterns/composite/concurrency&quot;</span></span><br><span class="line"><span class="string">&quot;easy-tips/go/patterns/composite/normal&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go test -benchmem -run=^$ easy-tips/go/patterns/composite -bench . -v -count=1 --benchtime 20s</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark_Normal</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">b.SetParallelism(runtime.NumCPU())</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">normal.Demo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark_Concurrency</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">b.SetParallelism(runtime.NumCPU())</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">concurrency.Demo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地机器Benchmark对比测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(TIGERB) 🤔 ➜  composite git:(master) ✗ go test -benchmem -run&#x3D;^$ easy-tips&#x2F;go&#x2F;patterns&#x2F;composite -bench . -v -count&#x3D;1 --benchtime 20s </span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: easy-tips&#x2F;go&#x2F;patterns&#x2F;composite</span><br><span class="line">Benchmark_Normal-4                   376          56666895 ns&#x2F;op           35339 B&#x2F;op        286 allocs&#x2F;op</span><br><span class="line">Benchmark_Concurrency-4              715          32669301 ns&#x2F;op           36445 B&#x2F;op        299 allocs&#x2F;op</span><br><span class="line">PASS</span><br><span class="line">ok      easy-tips&#x2F;go&#x2F;patterns&#x2F;composite 68.835s</span><br></pre></td></tr></table></figure><p>从上面的基准测试结果可以看出来<code>Benchmark_Concurrency-4</code>平均每次的执行时间是<code>32669301 ns</code>是要优于<code>Benchmark_Normal</code>的<code>56666895 ns</code>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>「并发组合模式」是一个由特定的设计模式结合Go语言天生的并发特性，通过适当封装形成的“新模式”。</p><h2 id="附录「并发组合模式」的基础代码模板与使用说明"><a href="#附录「并发组合模式」的基础代码模板与使用说明" class="headerlink" title="附录「并发组合模式」的基础代码模板与使用说明"></a>附录「并发组合模式」的基础代码模板与使用说明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//Go设计模式实战系列</span></span><br><span class="line"><span class="comment">//组合模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//example:</span></span><br><span class="line"><span class="comment">// 创建一个根组件</span></span><br><span class="line"><span class="comment">// 如果子组件存在并发组件则父组件必须为并发组件</span></span><br><span class="line"><span class="comment">// type RootComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *RootComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // do nothing</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个并发组件</span></span><br><span class="line"><span class="comment">// type DemoConcurrenyComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoConcurrenyComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 并发组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 创建一个普通组件</span></span><br><span class="line"><span class="comment">// type DemoComponent struct &#123;</span></span><br><span class="line"><span class="comment">// BaseComponent</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func (bc *DemoComponent) BusinessLogicDo(resChan chan interface&#123;&#125;) (err error) &#123;</span></span><br><span class="line"><span class="comment">// // 普通组件业务逻辑填充到这</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 普通组件</span></span><br><span class="line"><span class="comment">// root.Mount(</span></span><br><span class="line"><span class="comment">// &amp;DemoComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 并发组件</span></span><br><span class="line"><span class="comment">// root := &amp;RootComponent&#123;&#125;</span></span><br><span class="line"><span class="comment">// root.MountConcurrency(</span></span><br><span class="line"><span class="comment">// &amp;DemoConcurrenyComponent&#123;&#125;,</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 初始化业务上下文 并设置超时时间</span></span><br><span class="line"><span class="comment">// ctx := GetContext(5 * time.Second)</span></span><br><span class="line"><span class="comment">// defer ctx.CancelFunc()</span></span><br><span class="line"><span class="comment">// // 开始执行子组件</span></span><br><span class="line"><span class="comment">// root.ChildsDo(ctx)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ErrConcurrencyComponentTimeout 并发组件业务超时</span></span><br><span class="line">ErrConcurrencyComponentTimeout = errors.New(<span class="string">&quot;Concurrency Component Timeout&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 业务上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// context.WithTimeout派生的子上下文</span></span><br><span class="line">TimeoutCtx context.Context</span><br><span class="line"><span class="comment">// 超时函数</span></span><br><span class="line">context.CancelFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetContext 获取业务上下文实例</span></span><br><span class="line"><span class="comment">// d 超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetContext</span><span class="params">(d time.Duration)</span> *<span class="title">Context</span></span> &#123;</span><br><span class="line">c := &amp;Context&#123;&#125;</span><br><span class="line">c.TimeoutCtx, c.CancelFunc = context.WithTimeout(context.Background(), d)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行当前组件业务:`BusinessLogicDo`和执行子组件:`ChildsDo`</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line">Do(ctx *Context, currentConponent Component, wg *sync.WaitGroup) error</span><br><span class="line"><span class="comment">// 执行当前组件业务逻辑</span></span><br><span class="line"><span class="comment">// resChan 回写当前组件业务执行结果的channel</span></span><br><span class="line">BusinessLogicDo(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">ChildsDo(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseComponent 基础组件</span></span><br><span class="line"><span class="comment">// 实现Add:添加一个子组件</span></span><br><span class="line"><span class="comment">// 实现Remove:移除一个子组件</span></span><br><span class="line"><span class="keyword">type</span> BaseComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 子组件列表</span></span><br><span class="line">ChildComponents []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mount 挂载一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Mount</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//执行当前组件业务代码</span></span><br><span class="line">err = currentConponent.BusinessLogicDo(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">return</span> currentConponent.ChildsDo(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BusinessLogicDo 当前组件业务逻辑代码填充处</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">BusinessLogicDo</span><span class="params">(resChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseConcurrencyComponent 并发基础组件</span></span><br><span class="line"><span class="keyword">type</span> BaseConcurrencyComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line"><span class="comment">// 当前组件是否有并发子组件</span></span><br><span class="line">HasChildConcurrencyComponents <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// 并发子组件列表</span></span><br><span class="line">ChildConcurrencyComponents []Component</span><br><span class="line"><span class="comment">// wg 对象</span></span><br><span class="line">*sync.WaitGroup</span><br><span class="line"><span class="comment">// 当前组件业务执行结果channel</span></span><br><span class="line">logicResChan <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当前组件执行过程中的错误信息</span></span><br><span class="line">Err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MountConcurrency 挂载一个并发子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">MountConcurrency</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.HasChildConcurrencyComponents = <span class="literal">true</span></span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildConcurrencyComponents = <span class="built_in">append</span>(bc.ChildConcurrencyComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> bc.WaitGroup == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.WaitGroup = &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行并发子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildConcurrencyComponents &#123;</span><br><span class="line">bc.WaitGroup.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> childComponent.Do(ctx, childComponent, bc.WaitGroup)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx, childComponent, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bc.HasChildConcurrencyComponents &#123;</span><br><span class="line"><span class="comment">// 等待并发组件执行结果</span></span><br><span class="line">bc.WaitGroup.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行子组件</span></span><br><span class="line"><span class="comment">// ctx 业务上下文</span></span><br><span class="line"><span class="comment">// currentConponent 当前组件</span></span><br><span class="line"><span class="comment">// wg 父组件的waitgroup对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseConcurrencyComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context, currentConponent Component, wg *sync.WaitGroup)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="comment">// 初始化并发子组件channel</span></span><br><span class="line"><span class="keyword">if</span> bc.logicResChan == <span class="literal">nil</span> &#123;</span><br><span class="line">bc.logicResChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> currentConponent.BusinessLogicDo(bc.logicResChan)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// 等待业务执行结果</span></span><br><span class="line"><span class="keyword">case</span> &lt;-bc.logicResChan:</span><br><span class="line"><span class="comment">// 业务执行结果</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo wait.done...&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">// 超时等待</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.TimeoutCtx.Done():</span><br><span class="line"><span class="comment">// 超时退出</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;bc.BusinessLogicDo timeout...&quot;</span>)</span><br><span class="line">bc.Err = ErrConcurrencyComponentTimeout</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">err = currentConponent.ChildsDo(ctx)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;并发组件-Go设计模式实战&quot;&gt;&lt;a href=&quot;#并发组件-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;并发组件 | Go设计模式实战&quot;&gt;&lt;/a&gt;并发组件 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>状态变换 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/20ee7783/"/>
    <id>http://wangyangyangisme.github.io/posts/20ee7783/</id>
    <published>2021-05-16T06:31:01.000Z</published>
    <updated>2021-05-16T06:31:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态变换-Go设计模式实战"><a href="#状态变换-Go设计模式实战" class="headerlink" title="状态变换 | Go设计模式实战"></a>状态变换 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「状态模式」如何在真实业务场景中使用。</p><p>「状态模式」比较简单，就是算法的选取取决于于自己的内部状态。相较于「策略模式」算法的选取由用户决策变成内部状态决策，「策略模式」是用户(客户端)选择具体的算法，「状态模式」只是通过内部不同的状态选择具体的算法。</p><h2 id="什么是「状态模式」？"><a href="#什么是「状态模式」？" class="headerlink" title="什么是「状态模式」？"></a>什么是「状态模式」？</h2><blockquote><p>不同的算法按照统一的标准封装，根据不同的<strong>内部状态</strong>，决策使用何种算法</p></blockquote><h3 id="「状态模式」和「策略模式」的区别"><a href="#「状态模式」和「策略模式」的区别" class="headerlink" title="「状态模式」和「策略模式」的区别"></a>「状态模式」和「策略模式」的区别</h3><ul><li>策略模式：依靠客户决策</li><li>状态模式：依靠内部状态决策</li></ul><h2 id="什么真实业务场景可以用「状态模式」？"><a href="#什么真实业务场景可以用「状态模式」？" class="headerlink" title="什么真实业务场景可以用「状态模式」？"></a>什么真实业务场景可以用「状态模式」？</h2><blockquote><p>具体算法的选取是由内部状态决定的</p></blockquote><ul><li>首先，内部存在多种状态</li><li>其次，不同的状态的业务逻辑各不相同</li></ul><blockquote><p>我们有哪些真实业务场景可以用「状态模式」呢？</p></blockquote><p>比如，发送短信接口、限流等等。</p><ul><li>短信接口<ul><li>服务内部根据最优算法，实时推举出最优的短信服务商，并修改<strong>使用何种短信服务商的状态</strong></li></ul></li><li>限流<ul><li>服务内部根据当前的实时流量，选择不同的限流算法，并修改<strong>使用何种限流算法的状态</strong></li></ul></li></ul><h2 id="怎么用「状态模式」？"><a href="#怎么用「状态模式」？" class="headerlink" title="怎么用「状态模式」？"></a>怎么用「状态模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>先来看看一个短信验证码登录的界面。</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200522131127.png" style="width:100%"></p><p>可以得到：</p><ul><li>发送短信，用户只需要输入手机号即可</li><li>至于短信服务使用何种短信服务商，是由短信服务自身的<strong>当前短信服务商实例的状态</strong>决定</li><li><strong>当前短信服务商实例的状态</strong>又是由服务自身的算法修改</li></ul><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200522130715.png" style="width:100%"></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>「状态模式」的核心是：</p><ul><li>一个接口:<ul><li>短信服务接口<code>SmsServiceInterface</code></li></ul></li><li>一个实体类:<ul><li>状态管理实体类<code>StateManager</code></li></ul></li></ul><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个短信服务接口</span><br><span class="line">- 接口&#96;SmsServiceInterface&#96;</span><br><span class="line">+ 抽象方法&#96;Send(ctx *Context) error&#96;发送短信的抽象方法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义具体的短信服务实体类 实现接口&#96;SmsServiceInterface&#96;</span><br><span class="line"></span><br><span class="line">- 实体类&#96;ServiceProviderAliyun&#96;</span><br><span class="line">+ 成员方法&#96;Send(ctx *Context) error&#96;具体的发送短信逻辑</span><br><span class="line">- 实体类&#96;ServiceProviderTencent&#96;</span><br><span class="line">+ 成员方法&#96;Send(ctx *Context) error&#96;具体的发送短信逻辑</span><br><span class="line">- 实体类&#96;ServiceProviderYunpian&#96;</span><br><span class="line">+ 成员方法&#96;Send(ctx *Context) error&#96;具体的发送短信逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义状态管理实体类&#96;StateManager&#96;</span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;currentProviderType ProviderType&#96;当前使用的服务提供商类型</span><br><span class="line">+ &#96;currentProvider SmsServiceInterface&#96;当前使用的服务提供商实例</span><br><span class="line">+ &#96;setStateDuration time.Duration&#96;更新状态时间间隔</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;initState(duration time.Duration)&#96;初始化状态</span><br><span class="line">+ &#96;setState(t time.Time)&#96;设置状态</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200527141350.jpg" style="width:100%"></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//状态模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">Tel        <span class="keyword">string</span> <span class="comment">// 手机号</span></span><br><span class="line">Text       <span class="keyword">string</span> <span class="comment">// 短信内容</span></span><br><span class="line">TemplateID <span class="keyword">string</span> <span class="comment">// 短信模板ID</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SmsServiceInterface 短信服务接口</span></span><br><span class="line"><span class="keyword">type</span> SmsServiceInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Send(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceProviderAliyun 阿里云</span></span><br><span class="line"><span class="keyword">type</span> ServiceProviderAliyun <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send Send</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServiceProviderAliyun)</span> <span class="title">Send</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;【阿里云】短信发送成功，手机号:&quot;</span>+ctx.Tel)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceProviderTencent 腾讯云</span></span><br><span class="line"><span class="keyword">type</span> ServiceProviderTencent <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send Send</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServiceProviderTencent)</span> <span class="title">Send</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;【腾讯云】短信发送成功，手机号:&quot;</span>+ctx.Tel)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServiceProviderYunpian 云片</span></span><br><span class="line"><span class="keyword">type</span> ServiceProviderYunpian <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send Send</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ServiceProviderYunpian)</span> <span class="title">Send</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;【云片】短信发送成功，手机号:&quot;</span>+ctx.Tel)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProviderType 短信服务提供商类型</span></span><br><span class="line"><span class="keyword">type</span> ProviderType <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ProviderTypeAliyun 阿里云</span></span><br><span class="line">ProviderTypeAliyun ProviderType = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line"><span class="comment">// ProviderTypeTencent 腾讯云</span></span><br><span class="line">ProviderTypeTencent ProviderType = <span class="string">&quot;tencent&quot;</span></span><br><span class="line"><span class="comment">// ProviderTypeYunpian 云片</span></span><br><span class="line">ProviderTypeYunpian ProviderType = <span class="string">&quot;yunpian&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// stateManagerInstance 当前使用的服务提供商实例</span></span><br><span class="line"><span class="comment">// 默认aliyun</span></span><br><span class="line">stateManagerInstance *StateManager</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// StateManager 状态管理</span></span><br><span class="line"><span class="keyword">type</span> StateManager <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// CurrentProviderType 当前使用的服务提供商类型</span></span><br><span class="line"><span class="comment">// 默认aliyun</span></span><br><span class="line">currentProviderType ProviderType</span><br><span class="line"></span><br><span class="line"><span class="comment">// CurrentProvider 当前使用的服务提供商实例</span></span><br><span class="line"><span class="comment">// 默认aliyun</span></span><br><span class="line">currentProvider SmsServiceInterface</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新状态时间间隔</span></span><br><span class="line">setStateDuration time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initState 初始化状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *StateManager)</span> <span class="title">initState</span><span class="params">(duration time.Duration)</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">m.setStateDuration = duration</span><br><span class="line">m.setState(time.Now())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器更新状态</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 每一段时间后根据回调的发送成功率 计算得到当前应该使用的 厂商</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t := &lt;-time.NewTicker(m.setStateDuration).C:</span><br><span class="line">m.setState(t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setState 设置状态</span></span><br><span class="line"><span class="comment">// 根据短信云商回调的短信发送成功率 得到下阶段发送短信使用哪个厂商的服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *StateManager)</span> <span class="title">setState</span><span class="params">(t time.Time)</span></span> &#123;</span><br><span class="line"><span class="comment">// 这里用随机模拟</span></span><br><span class="line">ProviderTypeArray := [<span class="number">3</span>]ProviderType&#123;</span><br><span class="line">ProviderTypeAliyun,</span><br><span class="line">ProviderTypeTencent,</span><br><span class="line">ProviderTypeYunpian,</span><br><span class="line">&#125;</span><br><span class="line">m.currentProviderType = ProviderTypeArray[rand.Intn(<span class="built_in">len</span>(ProviderTypeArray))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> m.currentProviderType &#123;</span><br><span class="line"><span class="keyword">case</span> ProviderTypeAliyun:</span><br><span class="line">m.currentProvider = &amp;ServiceProviderAliyun&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProviderTypeTencent:</span><br><span class="line">m.currentProvider = &amp;ServiceProviderTencent&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ProviderTypeYunpian:</span><br><span class="line">m.currentProvider = &amp;ServiceProviderYunpian&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;无效的短信服务商&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;时间：%s| 变更短信发送厂商为: %s \n&quot;</span>, t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>), m.currentProviderType)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getState 获取当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *StateManager)</span> <span class="title">getState</span><span class="params">()</span> <span class="title">SmsServiceInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> m.currentProvider</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetState 获取当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetState</span><span class="params">()</span> <span class="title">SmsServiceInterface</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> stateManagerInstance.getState()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化状态管理</span></span><br><span class="line">stateManagerInstance = &amp;StateManager&#123;&#125;</span><br><span class="line">stateManagerInstance.initState(<span class="number">300</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟发送短信的接口</span></span><br><span class="line">sendSms := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 发送短信</span></span><br><span class="line">GetState().Send(&amp;Context&#123;</span><br><span class="line">Tel:        <span class="string">&quot;+8613666666666&quot;</span>,</span><br><span class="line">Text:       <span class="string">&quot;3232&quot;</span>,</span><br><span class="line">TemplateID: <span class="string">&quot;TYSHK_01&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟用户调用发送短信的接口</span></span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">sendSms()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;.&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;state&#x2F;state.go&quot;</span><br><span class="line">时间：2020-05-30 18:02:37| 变更短信发送厂商为: yunpian </span><br><span class="line">main.(*ServiceProviderYunpian).Send 【云片】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:37| 变更短信发送厂商为: aliyun </span><br><span class="line">时间：2020-05-30 18:02:38| 变更短信发送厂商为: yunpian </span><br><span class="line">时间：2020-05-30 18:02:38| 变更短信发送厂商为: yunpian </span><br><span class="line">main.(*ServiceProviderYunpian).Send 【云片】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:38| 变更短信发送厂商为: tencent </span><br><span class="line">时间：2020-05-30 18:02:39| 变更短信发送厂商为: aliyun </span><br><span class="line">时间：2020-05-30 18:02:39| 变更短信发送厂商为: tencent </span><br><span class="line">main.(*ServiceProviderTencent).Send 【腾讯云】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:39| 变更短信发送厂商为: yunpian </span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: tencent </span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: aliyun </span><br><span class="line">main.(*ServiceProviderAliyun).Send 【阿里云】短信发送成功，手机号:+8613666666666</span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: yunpian </span><br><span class="line">时间：2020-05-30 18:02:40| 变更短信发送厂商为: tencent </span><br><span class="line">时间：2020-05-30 18:02:41| 变更短信发送厂商为: aliyun </span><br><span class="line">时间：2020-05-30 18:02:41| 变更短信发送厂商为: yunpian </span><br><span class="line">main.(*ServiceProviderYunpian).Send 【云片】短信发送成功，手机号:+8613666666666</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「状态模式」抽象过程的核心是：</p><ul><li>每一个状态映射对应行为</li><li>行为实现同一个接口<code>interface</code></li><li>行为是内部的一个状态</li><li>状态是不断变化的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;状态变换-Go设计模式实战&quot;&gt;&lt;a href=&quot;#状态变换-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;状态变换 | Go设计模式实战&quot;&gt;&lt;/a&gt;状态变换 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>客户决策 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/aee36e49/"/>
    <id>http://wangyangyangisme.github.io/posts/aee36e49/</id>
    <published>2021-05-16T06:31:00.000Z</published>
    <updated>2021-05-16T06:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户决策-Go设计模式实战"><a href="#客户决策-Go设计模式实战" class="headerlink" title="客户决策 | Go设计模式实战"></a>客户决策 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「策略模式」如何在真实业务场景中使用。</p><h2 id="什么是「策略模式」？"><a href="#什么是「策略模式」？" class="headerlink" title="什么是「策略模式」？"></a>什么是「策略模式」？</h2><p>「策略模式」比较简单，大家平常工作中应该经常使用到，所以本文作为复习，帮助大家温故知新。我们先来看下定义：</p><blockquote><p>不同的算法按照统一的标准封装，客户端根据不同的场景，决策使用何种算法。</p></blockquote><p>上面的概念的关键词：</p><ul><li>算法：就是行为</li><li>标准：就是interface</li><li>客户端：客户端是相对的，谁调用谁就是客户端</li><li>场景：判断条件</li><li>决策：判断的过程</li></ul><p>概念很容易理解，不多说。</p><p>「策略模式」的优势：</p><ul><li>典型的高内聚：算法和算法之间完全独立、互不干扰</li><li>典型的松耦合：客户端依赖的是接口的抽象方法</li><li>沉淀：每一个封装好的算法都是这个技术团队的财富，且未来可以被轻易的修改、复用</li></ul><h2 id="什么真实业务场景可以用「策略模式」？"><a href="#什么真实业务场景可以用「策略模式」？" class="headerlink" title="什么真实业务场景可以用「策略模式」？"></a>什么真实业务场景可以用「策略模式」？</h2><blockquote><p>每一行代码下面的十字路口</p></blockquote><p>当代码的下一步面临选择的时候都可以使用「策略模式」，我们把不同选择的算法按照统一的标准封装，得到一类算法集的过程，就是实现「策略模式」的过程。</p><blockquote><p>我们有哪些真实业务场景可以用「策略模式」呢？</p></blockquote><p>比如：</p><ul><li>缓存: 使用什么样的nosql</li><li>存储: 使用什么样的DB</li><li>支付: 使用什么样的支付方式</li><li>等等... </li></ul><p>本文以<strong>支付接口</strong>举例，说明「策略模式」的具体使用。</p><h2 id="怎么用「策略模式」？"><a href="#怎么用「策略模式」？" class="headerlink" title="怎么用「策略模式」？"></a>怎么用「策略模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>我们以某团的订单支付页面为例，页面上的每一个支付选项都是一个支付策略。如下：</p><p>用户可以使用：</p><ul><li>美团支付(策略)</li><li>微信支付(策略)</li><li>支付宝支付(策略)</li></ul><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200424131625.png" style="width:50%"></p><p>用户决定使用美团支付下的银行卡支付方式的参数</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200424132214.png" style="width:50%"></p><p>用户决定使用支付宝网页版支付方式的参数</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200424132232.png" style="width:50%"></p><blockquote><p>注：不一定完全准确。</p></blockquote><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200425192752.png" style="width:100%"></p><blockquote><p>注：流程不一定完全准确。</p></blockquote><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>「策略模式」的核心是接口：</p><ul><li><code>PaymentInterface</code><ul><li><code>Pay(ctx *Context) error</code> 当前支付方式的支付逻辑</li><li><code>Refund(ctx *Context) error</code> 当前支付方式的退款逻辑</li></ul></li></ul><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义一个支付接口</span><br><span class="line">- &#96;PaymentInterface&#96;</span><br><span class="line">    + 抽象方法&#96;Pay(ctx *Context) error&#96;: 当前支付方式的支付逻辑</span><br><span class="line">+ 抽象方法&#96;Refund(ctx *Context) error&#96;: 当前支付方式的退款逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义具体的支付方式 实现接口&#96;PaymentInterface&#96;</span><br><span class="line"></span><br><span class="line">- 具体的微信支付方式&#96;WechatPay&#96;</span><br><span class="line">    +  实现方法&#96;Pay&#96;: 支付逻辑</span><br><span class="line">+  实现方法&#96;Refund&#96;: 支付逻辑</span><br><span class="line">- 具体的支付宝支付网页版方式&#96;AliPayWap&#96;</span><br><span class="line">    +  实现方法&#96;Pay&#96;: 支付逻辑</span><br><span class="line">+  实现方法&#96;Refund&#96;: 支付逻辑</span><br><span class="line">- 具体的支付宝支付网页版方式&#96;BankPay&#96;</span><br><span class="line">    +  实现方法&#96;Pay&#96;: 支付逻辑</span><br><span class="line">+  实现方法&#96;Refund&#96;: 支付逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 客户端代码</span><br><span class="line">通过接口参数pay_type的值判断是哪种支付方式策略</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200425151733.jpg" style="width:100%"></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//策略模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ConstWechatPay 微信支付</span></span><br><span class="line">ConstWechatPay = <span class="string">&quot;wechat_pay&quot;</span></span><br><span class="line"><span class="comment">// ConstAliPayWap 支付宝支付 网页版</span></span><br><span class="line">ConstAliPayWap = <span class="string">&quot;AliPayWapwap&quot;</span></span><br><span class="line"><span class="comment">// ConstBankPay 银行卡支付</span></span><br><span class="line">ConstBankPay = <span class="string">&quot;quickbank&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 用户选择的支付方式</span></span><br><span class="line">PayType <span class="keyword">string</span> <span class="string">`json:&quot;pay_type&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PaymentInterface 支付方式接口</span></span><br><span class="line"><span class="keyword">type</span> PaymentInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">Pay(ctx *Context) error    <span class="comment">// 支付</span></span><br><span class="line">Refund(ctx *Context) error <span class="comment">// 退款</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WechatPay 微信支付</span></span><br><span class="line"><span class="keyword">type</span> WechatPay <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *WechatPay)</span> <span class="title">Pay</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用微信支付...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *WechatPay)</span> <span class="title">Refund</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用微信退款...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AliPayWap 支付宝网页版</span></span><br><span class="line"><span class="keyword">type</span> AliPayWap <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *AliPayWap)</span> <span class="title">Pay</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用支付宝网页版支付...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *AliPayWap)</span> <span class="title">Refund</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用支付宝网页版退款...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BankPay 银行卡支付</span></span><br><span class="line"><span class="keyword">type</span> BankPay <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pay 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *BankPay)</span> <span class="title">Pay</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用银行卡支付...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 当前支付方式的支付逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *BankPay)</span> <span class="title">Refund</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前策略的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用银行卡退款...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 相对于被调用的支付策略 这里就是支付策略的客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务上下文</span></span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">PayType: <span class="string">&quot;wechat_pay&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取支付方式</span></span><br><span class="line"><span class="keyword">var</span> instance PaymentInterface</span><br><span class="line"><span class="keyword">switch</span> ctx.PayType &#123;</span><br><span class="line"><span class="keyword">case</span> ConstWechatPay:</span><br><span class="line">instance = &amp;WechatPay&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ConstAliPayWap:</span><br><span class="line">instance = &amp;AliPayWap&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> ConstBankPay:</span><br><span class="line">instance = &amp;BankPay&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;无效的支付方式&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付</span></span><br><span class="line">instance.Pay(ctx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;strategy&#x2F;strategy.go&quot;</span><br><span class="line">main.(*WechatPay).Pay 使用微信支付...</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「策略模式」抽象过程的核心是：</p><p>在<code>每一行代码下面的十字路口</code></p><ul><li>声明标准：定义<code>interface</code></li><li>封装算法：按照标准<code>interface</code>封装分支代码，得到每一个具体策略</li><li>构建算法集：每一个具体策略构成策略池子 -&gt; 这就是沉淀的过程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;客户决策-Go设计模式实战&quot;&gt;&lt;a href=&quot;#客户决策-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;客户决策 | Go设计模式实战&quot;&gt;&lt;/a&gt;客户决策 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>订阅通知 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/32bdf73d/"/>
    <id>http://wangyangyangisme.github.io/posts/32bdf73d/</id>
    <published>2021-05-16T06:30:59.000Z</published>
    <updated>2021-05-16T06:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="订阅通知-Go设计模式实战"><a href="#订阅通知-Go设计模式实战" class="headerlink" title="订阅通知 | Go设计模式实战"></a>订阅通知 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>虽然本文的题目叫做“订阅通知”，但是呢，本文却主要介绍「观察者模式」如何在真实业务场景中使用。是不是有些不理解？解释下：</p><ul><li>原因一，「观察者模式」其实看起来像“订阅通知”</li><li>原因二，“订阅通知”更容易被理解</li></ul><h2 id="什么是「观察者模式」？"><a href="#什么是「观察者模式」？" class="headerlink" title="什么是「观察者模式」？"></a>什么是「观察者模式」？</h2><blockquote><p>观察者观察被观察者，被观察者通知观察者</p></blockquote><p>我们用“订阅通知”翻译下「观察者模式」的概念，结果：</p><blockquote><p>“订阅者订阅主题，主题通知订阅者”</p></blockquote><p>是不是容易理解多了，我们再来拆解下这句话，得到：</p><ul><li>两个对象<ul><li>被观察者 -&gt; 主题</li><li>观察者 -&gt; 订阅者</li></ul></li><li>两个动作<ul><li>订阅 -&gt; 订阅者<strong>订阅</strong>主题</li><li>通知 -&gt; 主题发生变动<strong>通知</strong>订阅者</li></ul></li></ul><p>观察者模式的优势：</p><ul><li>高内聚 -&gt; 不同业务代码变动互不影响</li><li>可复用 -&gt; 新的业务(就是新的订阅者)订阅不同接口(主题，就是这里的接口)</li><li>极易扩展 -&gt; 新增接口(就是新增主题)；新增业务(就是新增订阅者)；</li></ul><p>其实说白了，就是分布式架构中使用消息机制MQ解耦业务的优势，是不是这么一想很容易理解了。</p><h2 id="什么真实业务场景可以用「观察者模式」？"><a href="#什么真实业务场景可以用「观察者模式」？" class="headerlink" title="什么真实业务场景可以用「观察者模式」？"></a>什么真实业务场景可以用「观察者模式」？</h2><blockquote><p>所有发生变更，需要通知的业务场景</p></blockquote><p>详细说：只要发生了某些变化，需要通知依赖了这些变化的具体事物的业务场景。</p><blockquote><p>我们有哪些真实业务场景可以用「观察者模式」呢？</p></blockquote><p>比如，订单逆向流，也就是订单成立之后的各种取消操作(本文不讨论售后)，主要有如下取消类型：</p><table><thead><tr><th>订单取消类型</th></tr></thead><tbody><tr><td>未支付取消订单</td></tr><tr><td>超时关单</td></tr><tr><td>已支付取消订单</td></tr><tr><td>取消发货单</td></tr><tr><td>拒收</td></tr></tbody></table><p>在触发这些<strong>取消操作</strong>都要进行各种各样的子操作，显而易见不同的<strong>取消操作</strong>所涉及的子操作是存在交集的。其次，已支付取消订单的子操作应该是所有订单取消类型最全的，其他类型的复用代码即可，除了分装成函数片段，还有什么更好的封装方式吗？答案：「观察者模式」。</p><p>接着我们来分析下订单逆向流业务中的<strong>变</strong>与<strong>不变</strong>：</p><ul><li>变<ul><li>新增取消类型</li><li>新增子操作</li><li>修改某个子操作的逻辑</li><li>取消类型和子操作的对应关系</li></ul></li><li>不变<ul><li>已存在的取消类型</li><li>已存在的子操作(在外界看来)</li></ul></li></ul><h2 id="怎么用「观察者模式」？"><a href="#怎么用「观察者模式」？" class="headerlink" title="怎么用「观察者模式」？"></a>怎么用「观察者模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：本文于单体架构背景探讨业务的实现过程，简单容易理解。</span><br></pre></td></tr></table></figure><p>第一步，梳理出所有存在的的逆向业务的子操作，如下：</p><table><thead><tr><th>所有子操作</th></tr></thead><tbody><tr><td>修改订单状态</td></tr><tr><td>记录订单状态变更日志</td></tr><tr><td>退优惠券</td></tr><tr><td>还优惠活动资格</td></tr><tr><td>还库存</td></tr><tr><td>还礼品卡</td></tr><tr><td>退钱包余额</td></tr><tr><td>修改发货单状态</td></tr><tr><td>记录发货单状态变更日志</td></tr><tr><td>生成退款单</td></tr><tr><td>生成发票-红票</td></tr><tr><td>发邮件</td></tr><tr><td>发短信</td></tr><tr><td>发微信消息</td></tr></tbody></table><p>第二步，找到不同订单取消类型和这些子操作的关系，如下：</p><table><thead><tr><th>订单取消类型(“主题”)(被观察者)</th><th>子操作(“订阅者”)(观察者)</th></tr></thead><tbody><tr><td>取消未支付订单</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>退优惠券</td></tr><tr><td>-</td><td>还优惠活动资格</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>超时关单</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>退优惠券</td></tr><tr><td>-</td><td>还优惠活动资格</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr><tr><td>已支付取消订单(未生成发货单)</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>还优惠活动资格(看情况)</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>还礼品卡</td></tr><tr><td>-</td><td>退钱包余额</td></tr><tr><td>-</td><td>生成退款单</td></tr><tr><td>-</td><td>生成发票-红票</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr><tr><td>取消发货单(未发货)</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>修改发货单状态</td></tr><tr><td>-</td><td>记录发货单状态变更日志</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>还礼品卡</td></tr><tr><td>-</td><td>退钱包余额</td></tr><tr><td>-</td><td>生成退款单</td></tr><tr><td>-</td><td>生成发票-红票</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr><tr><td>拒收</td><td>-</td></tr><tr><td>-</td><td>修改订单状态</td></tr><tr><td>-</td><td>记录订单状态变更日志</td></tr><tr><td>-</td><td>修改发货单状态</td></tr><tr><td>-</td><td>记录发货单状态变更日志</td></tr><tr><td>-</td><td>还库存</td></tr><tr><td>-</td><td>还礼品卡</td></tr><tr><td>-</td><td>退钱包余额</td></tr><tr><td>-</td><td>生成退款单</td></tr><tr><td>-</td><td>生成发票-红票</td></tr><tr><td>-</td><td>发邮件</td></tr><tr><td>-</td><td>发短信</td></tr><tr><td>-</td><td>发微信消息</td></tr></tbody></table><blockquote><p>注：流程不一定完全准确、全面。</p></blockquote><p>结论：</p><ul><li>不同的订单取消类型的子操作存在交集，子操作可被复用。</li><li>子操作可被看作“订阅者”(也就是观察者)</li><li>订单取消类型可被看作是“主题”(也就是被观察者)</li><li>不同子操作(“订阅者”)(观察者)<strong>订阅</strong>订单取消类型(“主题”)(被观察者)</li><li>订单取消类型(“主题”)(被观察者)<strong>通知</strong>子操作(“订阅者”)(观察者)</li></ul><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：本文于单体架构背景探讨业务的实现过程，简单容易理解。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200410131427.png" alt=""></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>「观察者模式」的核心是两个接口：</p><ul><li>“主题”(被观察者)接口<code>Observable</code><ul><li>抽象方法<code>Attach</code>: 增加“订阅者”</li><li>抽象方法<code>Detach</code>: 删除“订阅者”</li><li>抽象方法<code>Notify</code>: 通知“订阅者”</li></ul></li><li>“订阅者”(观察者)接口<code>ObserverInterface</code><ul><li>抽象方法<code>Do</code>: 自身的业务</li></ul></li></ul><p>订单逆向流的业务下，我们需要实现这两个接口:</p><ul><li>具体订单取消的动作实现“主题”接口<code>Observable</code></li><li>子逻辑实现“订阅者”接口<code>ObserverInterface</code></li></ul><p>伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ------------这里实现一个具体的“主题”------------</span><br><span class="line"></span><br><span class="line">具体订单取消的动作实现“主题”(被观察者)接口&#96;Observable&#96;。得到一个具体的“主题”:</span><br><span class="line"></span><br><span class="line">- 订单取消的动作的“主题”结构体&#96;ObservableConcrete&#96;</span><br><span class="line">    +  成员属性&#96;observerList []ObserverInterface&#96;:订阅者列表</span><br><span class="line">    +  具体方法&#96;Attach&#96;: 增加子逻辑</span><br><span class="line">    +  具体方法&#96;Detach&#96;: 删除子逻辑</span><br><span class="line">    +  具体方法&#96;Notify&#96;: 通知子逻辑</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ------------这里实现所有具体的“订阅者”------------</span><br><span class="line"></span><br><span class="line">子逻辑实现“订阅者”接口&#96;ObserverInterface&#96;:</span><br><span class="line"></span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;OrderStatus&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 修改订单状态</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;OrderStatusLog&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 记录订单状态变更日志</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;CouponRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 退优惠券</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;PromotionRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 还优惠活动资格</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;StockRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 还库存</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;GiftCardRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 还礼品卡</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;WalletRefund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 退钱包余额</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;DeliverBillStatus&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 修改发货单状态</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;DeliverBillStatusLog&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 记录发货单状态变更日志</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Refund&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 生成退款单</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Invoice&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 生成发票-红票</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Email&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 发邮件</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;Sms&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 发短信</span><br><span class="line">- 具体“订阅者”也就是子逻辑&#96;WechatNotify&#96;</span><br><span class="line">    +  实现方法&#96;Do&#96;: 发微信消息</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200411181215.jpg" alt=""></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//观察者模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Observable 被观察者</span></span><br><span class="line"><span class="keyword">type</span> Observable <span class="keyword">interface</span> &#123;</span><br><span class="line">Attach(observer ...ObserverInterface) Observable</span><br><span class="line">Detach(observer ObserverInterface) Observable</span><br><span class="line">Notify() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObservableConcrete 一个具体的 订单状态变化的被观察者</span></span><br><span class="line"><span class="keyword">type</span> ObservableConcrete <span class="keyword">struct</span> &#123;</span><br><span class="line">observerList []ObserverInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach 注册观察者</span></span><br><span class="line"><span class="comment">// @param $observer ObserverInterface 观察者列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *ObservableConcrete)</span> <span class="title">Attach</span><span class="params">(observer ...ObserverInterface)</span> <span class="title">Observable</span></span> &#123;</span><br><span class="line">o.observerList = <span class="built_in">append</span>(o.observerList, observer...)</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detach 注销观察者</span></span><br><span class="line"><span class="comment">// @param $observer ObserverInterface 待注销的观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *ObservableConcrete)</span> <span class="title">Detach</span><span class="params">(observer ObserverInterface)</span> <span class="title">Observable</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(o.observerList) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, observerItem := <span class="keyword">range</span> o.observerList &#123;</span><br><span class="line"><span class="keyword">if</span> observer == observerItem &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;注销:&quot;</span>, reflect.TypeOf(observer))</span><br><span class="line">o.observerList = <span class="built_in">append</span>(o.observerList[:k], o.observerList[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notify 通知观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *ObservableConcrete)</span> <span class="title">Notify</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code ...</span></span><br><span class="line"><span class="keyword">for</span> _, observer := <span class="keyword">range</span> o.observerList &#123;</span><br><span class="line"><span class="keyword">if</span> err = observer.Do(o); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObserverInterface 定义一个观察者的接口</span></span><br><span class="line"><span class="keyword">type</span> ObserverInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 自身的业务</span></span><br><span class="line">Do(o Observable) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderStatus 修改订单状态</span></span><br><span class="line"><span class="keyword">type</span> OrderStatus <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *OrderStatus)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;修改订单状态...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderStatusLog 记录订单状态变更日志</span></span><br><span class="line"><span class="keyword">type</span> OrderStatusLog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *OrderStatusLog)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;记录订单状态变更日志...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CouponRefund 退优惠券</span></span><br><span class="line"><span class="keyword">type</span> CouponRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *CouponRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;退优惠券...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionRefund 还优惠活动资格</span></span><br><span class="line"><span class="keyword">type</span> PromotionRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *PromotionRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;还优惠活动资格...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StockRefund 还库存</span></span><br><span class="line"><span class="keyword">type</span> StockRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *StockRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;还库存...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GiftCardRefund 还礼品卡</span></span><br><span class="line"><span class="keyword">type</span> GiftCardRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *GiftCardRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;还礼品卡...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WalletRefund 退钱包余额</span></span><br><span class="line"><span class="keyword">type</span> WalletRefund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *WalletRefund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;退钱包余额...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeliverBillStatus 修改发货单状态</span></span><br><span class="line"><span class="keyword">type</span> DeliverBillStatus <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *DeliverBillStatus)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;修改发货单状态...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeliverBillStatusLog 记录发货单状态变更日志</span></span><br><span class="line"><span class="keyword">type</span> DeliverBillStatusLog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *DeliverBillStatusLog)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;记录发货单状态变更日志...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Refund 生成退款单</span></span><br><span class="line"><span class="keyword">type</span> Refund <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Refund)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;生成退款单...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoice 生成发票-红票</span></span><br><span class="line"><span class="keyword">type</span> Invoice <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Invoice)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;生成发票-红票...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Email 发邮件</span></span><br><span class="line"><span class="keyword">type</span> Email <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Email)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发邮件...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sms 发短信</span></span><br><span class="line"><span class="keyword">type</span> Sms <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *Sms)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发短信...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WechatNotify 发微信消息</span></span><br><span class="line"><span class="keyword">type</span> WechatNotify <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 具体业务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(observer *WechatNotify)</span> <span class="title">Do</span><span class="params">(o Observable)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// code...</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发微信消息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 未支付取消订单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 未支付取消订单 “主题”&quot;</span>)</span><br><span class="line">orderUnPaidCancelSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">orderUnPaidCancelSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;CouponRefund&#123;&#125;,</span><br><span class="line">&amp;PromotionRefund&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">orderUnPaidCancelSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 超时关单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 超时关单 “主题”&quot;</span>)</span><br><span class="line">orderOverTimeSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">orderOverTimeSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;CouponRefund&#123;&#125;,</span><br><span class="line">&amp;PromotionRefund&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">orderOverTimeSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 已支付取消订单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 已支付取消订单 “主题”&quot;</span>)</span><br><span class="line">orderPaidCancelSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">orderPaidCancelSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;CouponRefund&#123;&#125;,</span><br><span class="line">&amp;PromotionRefund&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;GiftCardRefund&#123;&#125;,</span><br><span class="line">&amp;WalletRefund&#123;&#125;,</span><br><span class="line">&amp;Refund&#123;&#125;,</span><br><span class="line">&amp;Invoice&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">orderPaidCancelSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 取消发货单 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 取消发货单 “主题”&quot;</span>)</span><br><span class="line">deliverBillCancelSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">deliverBillCancelSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatus&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatusLog&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;GiftCardRefund&#123;&#125;,</span><br><span class="line">&amp;WalletRefund&#123;&#125;,</span><br><span class="line">&amp;Refund&#123;&#125;,</span><br><span class="line">&amp;Invoice&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">deliverBillCancelSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 拒收 “主题”</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 拒收 “主题”&quot;</span>)</span><br><span class="line">deliverBillRejectSubject := &amp;ObservableConcrete&#123;&#125;</span><br><span class="line">deliverBillRejectSubject.Attach(</span><br><span class="line">&amp;OrderStatus&#123;&#125;,</span><br><span class="line">&amp;OrderStatusLog&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatus&#123;&#125;,</span><br><span class="line">&amp;DeliverBillStatusLog&#123;&#125;,</span><br><span class="line">&amp;StockRefund&#123;&#125;,</span><br><span class="line">&amp;GiftCardRefund&#123;&#125;,</span><br><span class="line">&amp;WalletRefund&#123;&#125;,</span><br><span class="line">&amp;Refund&#123;&#125;,</span><br><span class="line">&amp;Invoice&#123;&#125;,</span><br><span class="line">&amp;Email&#123;&#125;,</span><br><span class="line">&amp;Sms&#123;&#125;,</span><br><span class="line">&amp;WechatNotify&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">deliverBillRejectSubject.Notify()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未来可以快速的根据业务的变化 创建新的主题 从而快速构建新的业务接口</span></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------- 未来的扩展...&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;observer&#x2F;observer.go&quot;</span><br><span class="line">----------------------- 未支付取消订单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*CouponRefund).Do 退优惠券...</span><br><span class="line">main.(*PromotionRefund).Do 还优惠活动资格...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">----------------------- 超时关单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*CouponRefund).Do 退优惠券...</span><br><span class="line">main.(*PromotionRefund).Do 还优惠活动资格...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line">----------------------- 已支付取消订单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*CouponRefund).Do 退优惠券...</span><br><span class="line">main.(*PromotionRefund).Do 还优惠活动资格...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*GiftCardRefund).Do 还礼品卡...</span><br><span class="line">main.(*WalletRefund).Do 退钱包余额...</span><br><span class="line">main.(*Refund).Do 生成退款单...</span><br><span class="line">main.(*Invoice).Do 生成发票-红票...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line">----------------------- 取消发货单 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*DeliverBillStatus).Do 修改发货单状态...</span><br><span class="line">main.(*DeliverBillStatusLog).Do 记录发货单状态变更日志...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*GiftCardRefund).Do 还礼品卡...</span><br><span class="line">main.(*WalletRefund).Do 退钱包余额...</span><br><span class="line">main.(*Refund).Do 生成退款单...</span><br><span class="line">main.(*Invoice).Do 生成发票-红票...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line">----------------------- 拒收 “主题”</span><br><span class="line">main.(*OrderStatus).Do 修改订单状态...</span><br><span class="line">main.(*OrderStatusLog).Do 记录订单状态变更日志...</span><br><span class="line">main.(*DeliverBillStatus).Do 修改发货单状态...</span><br><span class="line">main.(*DeliverBillStatusLog).Do 记录发货单状态变更日志...</span><br><span class="line">main.(*StockRefund).Do 还库存...</span><br><span class="line">main.(*GiftCardRefund).Do 还礼品卡...</span><br><span class="line">main.(*WalletRefund).Do 退钱包余额...</span><br><span class="line">main.(*Refund).Do 生成退款单...</span><br><span class="line">main.(*Invoice).Do 生成发票-红票...</span><br><span class="line">main.(*Email).Do 发邮件...</span><br><span class="line">main.(*Sms).Do 发短信...</span><br><span class="line">main.(*WechatNotify).Do 发微信消息...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「观察者模式」抽象过程的核心是：</p><ul><li>被依赖的“主题”</li><li>被通知的“订阅者”</li><li>“订阅者”按需<strong>订阅</strong>“主题”</li><li>“主题”变化<strong>通知</strong>“订阅者”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br><span class="line">3. 观察者模式与订阅通知实际还是有差异，本文均加上了双引号。订阅通知：订阅方不是直接依赖主题方(联想下mq等消息中间件的使用)；而观察者模式：观察者是直接依赖了被观察者，从上面的代码我们也可以清晰的看出来这个差异。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;订阅通知-Go设计模式实战&quot;&gt;&lt;a href=&quot;#订阅通知-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;订阅通知 | Go设计模式实战&quot;&gt;&lt;/a&gt;订阅通知 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>代码组件 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/b38a76c0/"/>
    <id>http://wangyangyangisme.github.io/posts/b38a76c0/</id>
    <published>2021-05-16T06:30:58.000Z</published>
    <updated>2021-05-16T06:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码组件-Go设计模式实战"><a href="#代码组件-Go设计模式实战" class="headerlink" title="代码组件 | Go设计模式实战"></a>代码组件 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「组合模式」如何在真实业务场景中使用。</p><h2 id="什么是「组合模式」？"><a href="#什么是「组合模式」？" class="headerlink" title="什么是「组合模式」？"></a>什么是「组合模式」？</h2><blockquote><p>一个具有层级关系的对象由一系列拥有父子关系的对象通过树形结构组成。</p></blockquote><p>组合模式的优势：</p><ul><li>所见即所码：你所看见的代码结构就是业务真实的层级关系，比如Ui界面你真实看到的那样。</li><li>高度封装：单一职责。</li><li>可复用：不同业务场景，相同的组件可被重复使用。</li></ul><h2 id="什么真实业务场景可以用「组合模式」？"><a href="#什么真实业务场景可以用「组合模式」？" class="headerlink" title="什么真实业务场景可以用「组合模式」？"></a>什么真实业务场景可以用「组合模式」？</h2><p>满足如下要求的所有场景:</p><blockquote><p>Get请求获取页面数据的所有接口</p></blockquote><p>前端大行组件化的当今，我们在写后端接口代码的时候还是按照业务思路一头写到尾吗？我们是否可以思索，「后端接口业务代码如何可以简单快速组件化？」，答案是肯定的，这就是「组合模式」的作用。</p><p>我们利用「组合模式」的定义和前端模块的划分去构建后端业务代码结构：</p><ul><li>前端单个模块 -&gt; 对应后端：具体单个类 -&gt; 封装的过程</li><li>前端模块父子组件 -&gt;  对应后端：父类内部持有多个子类(非继承关系，合成复用关系) -&gt; 父子关系的树形结构</li></ul><blockquote><p>我们有哪些真实业务场景可以用「组合模式」呢？</p></blockquote><p>比如我们以“复杂的订单结算页面”为例，下面是某东的订单结算页面：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200331124724.jpeg" style="width:38%"></p><p>从页面的展示形式上，可以看出：</p><ul><li>页面由多个模块构成，比如：<ul><li>地址模块</li><li>支付方式模块</li><li>店铺模块</li><li>发票模块</li><li>优惠券模块</li><li>某豆模块</li><li>礼品卡模块</li><li>订单详细金额模块</li></ul></li><li>单个模块可以由多个子模块构成<ul><li>店铺模块，又由如下模块构成：<ul><li>商品模块</li><li>售后模块</li><li>优惠模块</li><li>物流模块</li></ul></li></ul></li></ul><h2 id="怎么用「组合模式」？"><a href="#怎么用「组合模式」？" class="headerlink" title="怎么用「组合模式」？"></a>怎么用「组合模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>按照如上某东的订单结算页面的示例，我们得到了如下的订单结算页面模块组成图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200329222214.png" style="width:46%"></p><blockquote><p>注：模块不一定完全准确</p></blockquote><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>责任链模式主要类主要包含如下特性：</p><ul><li>成员属性<ul><li><code>ChildComponents</code>: 子组件列表 -&gt; 稳定不变的</li></ul></li><li>成员方法<ul><li><code>Mount</code>: 添加一个子组件 -&gt; 稳定不变的</li><li><code>Remove</code>: 移除一个子组件 -&gt; 稳定不变的</li><li><code>Do</code>: 执行组件&amp;子组件 -&gt; 变化的</li></ul></li></ul><p>套用到订单结算页面信息接口伪代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">一个父类(抽象类)：</span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;ChildComponents&#96;: 子组件列表</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Mount&#96;: 实现添加一个子组件</span><br><span class="line">+ &#96;Remove&#96;: 实现移除一个子组件</span><br><span class="line">+ &#96;Do&#96;: 抽象方法</span><br><span class="line"></span><br><span class="line">组件一，订单结算页面组件类(继承父类、看成一个大的组件)： </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件二，地址组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件三，支付方式组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件四，店铺组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件五，商品组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件六，优惠信息组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件七，物流组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件八，发票组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件九，优惠券组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件十，礼品卡组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件十一，订单金额详细信息组件(继承父类)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line">组件十二，售后组件(继承父类，未来扩展的组件)：</span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br></pre></td></tr></table></figure><p>但是，golang里没有的继承的概念，要复用成员属性<code>ChildComponents</code>、成员方法<code>Mount</code>、成员方法<code>Remove</code>怎么办呢？我们使用<code>合成复用</code>的特性变相达到“继承复用”的目的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">一个接口(interface)：</span><br><span class="line">+ 抽象方法&#96;Mount&#96;: 添加一个子组件</span><br><span class="line">+ 抽象方法&#96;Remove&#96;: 移除一个子组件</span><br><span class="line">+ 抽象方法&#96;Do&#96;: 执行组件&amp;子组件</span><br><span class="line"></span><br><span class="line">一个基础结构体&#96;BaseComponent&#96;：</span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;ChildComponents&#96;: 子组件列表</span><br><span class="line">- 成员方法</span><br><span class="line">+ 实体方法&#96;Mount&#96;: 添加一个子组件</span><br><span class="line">+ 实体方法&#96;Remove&#96;: 移除一个子组件</span><br><span class="line">+ 实体方法&#96;ChildsDo&#96;: 执行子组件</span><br><span class="line"></span><br><span class="line">组件一，订单结算页面组件类： </span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件二，地址组件：</span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">组件三，支付方式组件：</span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br><span class="line">...略</span><br><span class="line"></span><br><span class="line">组件十一，订单金额详细信息组件：</span><br><span class="line">- 合成复用基础结构体&#96;BaseComponent&#96; </span><br><span class="line">- 成员方法</span><br><span class="line">+ &#96;Do&#96;: 执行当前组件的逻辑，执行子组件的逻辑</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p align="center">  <img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200403125814.jpg" style="width:100%"></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//组合模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component 组件接口</span></span><br><span class="line"><span class="keyword">type</span> Component <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 添加一个子组件</span></span><br><span class="line">Mount(c Component, components ...Component) error</span><br><span class="line"><span class="comment">// 移除一个子组件</span></span><br><span class="line">Remove(c Component) error</span><br><span class="line"><span class="comment">// 执行组件&amp;子组件</span></span><br><span class="line">Do(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseComponent 基础组件</span></span><br><span class="line"><span class="comment">// 实现Add:添加一个子组件</span></span><br><span class="line"><span class="comment">// 实现Remove:移除一个子组件</span></span><br><span class="line"><span class="keyword">type</span> BaseComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 子组件列表</span></span><br><span class="line">ChildComponents []Component</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mount 挂载一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Mount</span><span class="params">(c Component, components ...Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, c)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(components) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents, components...)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除一个子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Remove</span><span class="params">(c Component)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bc.ChildComponents) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> c == childComponent &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;移除:&quot;</span>, reflect.TypeOf(childComponent))</span><br><span class="line">bc.ChildComponents = <span class="built_in">append</span>(bc.ChildComponents[:k], bc.ChildComponents[k+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildsDo 执行子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BaseComponent)</span> <span class="title">ChildsDo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line"><span class="keyword">for</span> _, childComponent := <span class="keyword">range</span> bc.ChildComponents &#123;</span><br><span class="line"><span class="keyword">if</span> err = childComponent.Do(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckoutPageComponent 订单结算页面组件</span></span><br><span class="line"><span class="keyword">type</span> CheckoutPageComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CheckoutPageComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单结算页面组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddressComponent 地址组件</span></span><br><span class="line"><span class="keyword">type</span> AddressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AddressComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;地址组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PayMethodComponent 支付方式组件</span></span><br><span class="line"><span class="keyword">type</span> PayMethodComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PayMethodComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;支付方式组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreComponent 店铺组件</span></span><br><span class="line"><span class="keyword">type</span> StoreComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *StoreComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;店铺组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SkuComponent 商品组件</span></span><br><span class="line"><span class="keyword">type</span> SkuComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *SkuComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;商品组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionComponent 优惠信息组件</span></span><br><span class="line"><span class="keyword">type</span> PromotionComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *PromotionComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠信息组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpressComponent 物流组件</span></span><br><span class="line"><span class="keyword">type</span> ExpressComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *ExpressComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;物流组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AftersaleComponent 售后组件</span></span><br><span class="line"><span class="keyword">type</span> AftersaleComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *AftersaleComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;售后组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InvoiceComponent 发票组件</span></span><br><span class="line"><span class="keyword">type</span> InvoiceComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *InvoiceComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;发票组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CouponComponent 优惠券组件</span></span><br><span class="line"><span class="keyword">type</span> CouponComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *CouponComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;优惠券组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GiftCardComponent 礼品卡组件</span></span><br><span class="line"><span class="keyword">type</span> GiftCardComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *GiftCardComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;礼品卡组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderComponent 订单金额详细信息组件</span></span><br><span class="line"><span class="keyword">type</span> OrderComponent <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用基础组件</span></span><br><span class="line">BaseComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 执行组件&amp;子组件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *OrderComponent)</span> <span class="title">Do</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;订单金额详细信息组件...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行子组件</span></span><br><span class="line">bc.ChildsDo(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件的业务逻辑写这</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化订单结算页面 这个大组件</span></span><br><span class="line">checkoutPage := &amp;CheckoutPageComponent&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载子组件</span></span><br><span class="line">storeComponent := &amp;StoreComponent&#123;&#125;</span><br><span class="line">skuComponent := &amp;SkuComponent&#123;&#125;</span><br><span class="line">skuComponent.Mount(</span><br><span class="line">&amp;PromotionComponent&#123;&#125;,</span><br><span class="line">&amp;AftersaleComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line">storeComponent.Mount(</span><br><span class="line">skuComponent,</span><br><span class="line">&amp;ExpressComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载组件</span></span><br><span class="line">checkoutPage.Mount(</span><br><span class="line">&amp;AddressComponent&#123;&#125;,</span><br><span class="line">&amp;PayMethodComponent&#123;&#125;,</span><br><span class="line">storeComponent,</span><br><span class="line">&amp;InvoiceComponent&#123;&#125;,</span><br><span class="line">&amp;CouponComponent&#123;&#125;,</span><br><span class="line">&amp;GiftCardComponent&#123;&#125;,</span><br><span class="line">&amp;OrderComponent&#123;&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除组件测试</span></span><br><span class="line"><span class="comment">// checkoutPage.Remove(storeComponent)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始构建页面组件数据</span></span><br><span class="line">checkoutPage.Do(&amp;Context&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;composite&#x2F;composite.go&quot;</span><br><span class="line">main.(*CheckoutPageComponent).Do 订单结算页面组件...</span><br><span class="line">main.(*AddressComponent).Do 地址组件...</span><br><span class="line">main.(*PayMethodComponent).Do 支付方式组件...</span><br><span class="line">main.(*StoreComponent).Do 店铺组件...</span><br><span class="line">main.(*SkuComponent).Do 商品组件...</span><br><span class="line">main.(*PromotionComponent).Do 优惠信息组件...</span><br><span class="line">main.(*AftersaleComponent).Do 售后组件...</span><br><span class="line">main.(*ExpressComponent).Do 物流组件...</span><br><span class="line">main.(*InvoiceComponent).Do 发票组件...</span><br><span class="line">main.(*CouponComponent).Do 优惠券组件...</span><br><span class="line">main.(*GiftCardComponent).Do 礼品卡组件...</span><br><span class="line">main.(*OrderComponent).Do 订单金额详细信息组件...</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「组合模式」抽象过程的核心是：</p><ul><li>按模块划分：业务逻辑归类，收敛的过程。</li><li>父子关系(树)：把收敛之后的业务对象按父子关系绑定，依次被执行。</li></ul><p>与「责任链模式」的区别：</p><ul><li>责任链模式: 链表</li><li>组合模式：树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码组件-Go设计模式实战&quot;&gt;&lt;a href=&quot;#代码组件-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;代码组件 | Go设计模式实战&quot;&gt;&lt;/a&gt;代码组件 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>链式调用 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/c59af70a/"/>
    <id>http://wangyangyangisme.github.io/posts/c59af70a/</id>
    <published>2021-05-16T06:30:57.000Z</published>
    <updated>2021-05-16T06:30:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链式调用-Go设计模式实战"><a href="#链式调用-Go设计模式实战" class="headerlink" title="链式调用 | Go设计模式实战"></a>链式调用 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「责任链模式」如何在真实业务场景中使用。</p><h2 id="什么是「责任链模式」？"><a href="#什么是「责任链模式」？" class="headerlink" title="什么是「责任链模式」？"></a>什么是「责任链模式」？</h2><blockquote><p>首先把一系列业务按职责划分成不同的对象，接着把这一系列对象构成一个链，然后在这一系列对象中传递请求对象，直到被处理为止。</p></blockquote><p>我们从概念中可以看出责任链模式有如下明显的优势：</p><ul><li>按职责划分：解耦</li><li>对象链：逻辑清晰</li></ul><p>但是有一点<code>直到被处理为止</code>，代表最终只会被一个实际的业务对象执行了实际的业务逻辑，明显适用的场景并不多。但是除此之外，上面的那两点优势还是让人很心动，所以，为了适用于目前所接触的绝大多数业务场景，把概念进行了简单的调整，如下：</p><blockquote><p>首先把一系列业务按职责划分成不同的对象，接着把这一系列对象构成一个链，直到“链路结束”为止。(结束：异常结束，或链路执行完毕结束)</p></blockquote><p>简单的<code>直到“链路结束”为止</code>转换可以让我们把责任链模式适用于任何复杂的业务场景。</p><p>以下是责任链模式的具体优势：</p><ul><li>直观：一眼可观的业务调用过程</li><li>无限扩展：可无限扩展的业务逻辑</li><li>高度封装：复杂业务代码依然高度封装</li><li>极易被修改：复杂业务代码下修改代码只需要专注对应的业务类(结构体)文件即可，以及极易被调整的业务执行顺序</li></ul><h2 id="什么真实业务场景可以用「责任链模式-改-」？"><a href="#什么真实业务场景可以用「责任链模式-改-」？" class="headerlink" title="什么真实业务场景可以用「责任链模式(改)」？"></a>什么真实业务场景可以用「责任链模式(改)」？</h2><p>满足如下要求的场景:</p><blockquote><p>业务极度复杂的所有场景</p></blockquote><p>任何杂乱无章的业务代码，都可以使用责任链模式(改)去重构、设计。</p><blockquote><p>我们有哪些真实业务场景可以用「责任链模式(改)」呢？</p></blockquote><p>比如电商系统的下单接口，随着业务发展不断的发展，该接口会充斥着各种各样的业务逻辑。</p><h2 id="怎么用「责任链模式-改-」？"><a href="#怎么用「责任链模式-改-」？" class="headerlink" title="怎么用「责任链模式(改)」？"></a>怎么用「责任链模式(改)」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><table><thead><tr><th>步骤</th><th>逻辑</th></tr></thead><tbody><tr><td>1</td><td>参数校验</td></tr><tr><td>2</td><td>获取地址信息</td></tr><tr><td>3</td><td>地址信息校验</td></tr><tr><td>4</td><td>获取购物车数据</td></tr><tr><td>5</td><td>获取商品库存信息</td></tr><tr><td>6</td><td>商品库存校验</td></tr><tr><td>7</td><td>获取优惠信息</td></tr><tr><td>8</td><td>获取运费信息</td></tr><tr><td>9</td><td>使用优惠信息</td></tr><tr><td>10</td><td>扣库存</td></tr><tr><td>11</td><td>清理购物车</td></tr><tr><td>12</td><td>写订单表</td></tr><tr><td>13</td><td>写订单商品表</td></tr><tr><td>14</td><td>写订单优惠信息表</td></tr><tr><td>XX</td><td>以及未来会增加的逻辑...</td></tr></tbody></table><p>业务的不断发展变化的：</p><ul><li>新的业务被增加</li><li>旧的业务被修改</li></ul><p>比如增加的新的业务，订金预售：</p><ul><li>在<code>4|获取购物车数据</code>后，需要校验商品参见订金预售活动的有效性等逻辑。</li><li>等等逻辑</li></ul><blockquote><p>注：流程不一定完全准确</p></blockquote><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200327205310.png" alt=""></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>责任链模式主要类主要包含如下特性：</p><ul><li>成员属性<ul><li><code>nextHandler</code>: 下一个等待被调用的对象实例 -&gt; 稳定不变的</li></ul></li><li>成员方法<ul><li><code>SetNext</code>: 把下一个对象的实例绑定到当前对象的<code>nextHandler</code>属性上 -&gt; 稳定不变的</li><li><code>Do</code>: 当前对象业务逻辑入口 -&gt; 变化的</li><li><code>Run</code>: 调用当前对象的<code>Do</code>，<code>nextHandler</code>不为空则调用<code>nextHandler.Do</code> -&gt; 稳定不变的</li></ul></li></ul><p>套用到下单接口伪代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">一个父类(抽象类)：</span><br><span class="line"></span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;nextHandler&#96;: 下一个等待被调用的对象实例</span><br><span class="line">- 成员方法</span><br><span class="line">+ 实体方法&#96;SetNext&#96;: 实现把下一个对象的实例绑定到当前对象的&#96;nextHandler&#96;属性上</span><br><span class="line">+ 抽象方法&#96;Do&#96;: 当前对象业务逻辑入口</span><br><span class="line">+ 实体方法&#96;Run&#96;: 实现调用当前对象的&#96;Do&#96;，&#96;nextHandler&#96;不为空则调用&#96;nextHandler.Do&#96;</span><br><span class="line"></span><br><span class="line">子类一(参数校验)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体的参数校验逻辑</span><br><span class="line"></span><br><span class="line">子类二(获取地址信息)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取地址信息的逻辑</span><br><span class="line"></span><br><span class="line">子类三(获取购物车数据)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取购物车数据的逻辑</span><br><span class="line"></span><br><span class="line">......略</span><br><span class="line"></span><br><span class="line">子类X(以及未来会增加的逻辑)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：以及未来会增加的逻辑</span><br></pre></td></tr></table></figure><p>但是，golang里没有的继承的概念，要复用成员属性<code>nextHandler</code>、成员方法<code>SetNext</code>、成员方法<code>Run</code>怎么办呢？我们使用<code>合成复用</code>的特性变相达到“继承复用”的目的，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一个接口(interface)：</span><br><span class="line"></span><br><span class="line">- 抽象方法&#96;SetNext&#96;: 待实现把下一个对象的实例绑定到当前对象的&#96;nextHandler&#96;属性上</span><br><span class="line">- 抽象方法&#96;Do&#96;: 待实现当前对象业务逻辑入口</span><br><span class="line">- 抽象方法&#96;Run&#96;: 待实现调用当前对象的&#96;Do&#96;，&#96;nextHandler&#96;不为空则调用&#96;nextHandler.Do&#96;</span><br><span class="line"></span><br><span class="line">一个基础结构体：</span><br><span class="line"></span><br><span class="line">- 成员属性</span><br><span class="line">+ &#96;nextHandler&#96;: 下一个等待被调用的对象实例</span><br><span class="line">- 成员方法</span><br><span class="line">+ 实体方法&#96;SetNext&#96;: 实现把下一个对象的实例绑定到当前对象的&#96;nextHandler&#96;属性上</span><br><span class="line">+ 实体方法&#96;Run&#96;: 实现调用当前对象的&#96;Do&#96;，&#96;nextHandler&#96;不为空则调用&#96;nextHandler.Do&#96;</span><br><span class="line"></span><br><span class="line">子类一(参数校验)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体的参数校验逻辑</span><br><span class="line"></span><br><span class="line">子类二(获取地址信息)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取地址信息的逻辑</span><br><span class="line"></span><br><span class="line">子类三(获取购物车数据)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：具体获取购物车数据的逻辑</span><br><span class="line"></span><br><span class="line">......略</span><br><span class="line"></span><br><span class="line">子类X(以及未来会增加的逻辑)</span><br><span class="line">- 合成复用基础结构体</span><br><span class="line">- 实现抽象方法&#96;Do&#96;：以及未来会增加的逻辑</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200328220913.jpg" alt=""></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//责任链模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context Context</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler 处理</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 自身的业务</span></span><br><span class="line">Do(c *Context) error</span><br><span class="line"><span class="comment">// 设置下一个对象</span></span><br><span class="line">SetNext(h Handler) Handler</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">Run(c *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next 抽象出来的 可被合成复用的结构体</span></span><br><span class="line"><span class="keyword">type</span> Next <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 下一个对象</span></span><br><span class="line">nextHandler Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetNext 实现好的 可被复用的SetNext方法</span></span><br><span class="line"><span class="comment">// 返回值是下一个对象 方便写成链式代码优雅</span></span><br><span class="line"><span class="comment">// 例如 nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">SetNext</span><span class="params">(h Handler)</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">n.nextHandler = h</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">Run</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 由于go无继承的概念 这里无法执行当前handler的Do</span></span><br><span class="line"><span class="comment">// n.Do(c)</span></span><br><span class="line"><span class="keyword">if</span> n.nextHandler != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用下的变种</span></span><br><span class="line"><span class="comment">// 执行下一个handler的Do</span></span><br><span class="line"><span class="keyword">if</span> err = (n.nextHandler).Do(c); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行下一个handler的Run</span></span><br><span class="line"><span class="keyword">return</span> (n.nextHandler).Run(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NullHandler 空Handler</span></span><br><span class="line"><span class="comment">// 由于go无继承的概念 作为链式调用的第一个载体 设置实际的下一个对象</span></span><br><span class="line"><span class="keyword">type</span> NullHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next的`nextHandler`成员属性、`SetNext`成员方法、`Run`成员方法</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 空Handler的Do</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *NullHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 空Handler 这里什么也不做 只是载体 do nothing...</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArgumentsHandler 校验参数的handler</span></span><br><span class="line"><span class="keyword">type</span> ArgumentsHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ArgumentsHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验参数成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddressInfoHandler 地址信息handler</span></span><br><span class="line"><span class="keyword">type</span> AddressInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *AddressInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取地址信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;地址信息校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartInfoHandler 获取购物车数据handler</span></span><br><span class="line"><span class="keyword">type</span> CartInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *CartInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取购物车数据...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StockInfoHandler 商品库存handler</span></span><br><span class="line"><span class="keyword">type</span> StockInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *StockInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取商品库存信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;商品库存校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionInfoHandler 获取优惠信息handler</span></span><br><span class="line"><span class="keyword">type</span> PromotionInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *PromotionInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取优惠信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShipmentInfoHandler 获取运费信息handler</span></span><br><span class="line"><span class="keyword">type</span> ShipmentInfoHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ShipmentInfoHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取运费信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PromotionUseHandler 使用优惠信息handler</span></span><br><span class="line"><span class="keyword">type</span> PromotionUseHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *PromotionUseHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;使用优惠信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StockSubtractHandler 库存操作handler</span></span><br><span class="line"><span class="keyword">type</span> StockSubtractHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *StockSubtractHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;扣库存...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CartDelHandler 清理购物车handler</span></span><br><span class="line"><span class="keyword">type</span> CartDelHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *CartDelHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;清理购物车...&quot;</span>)</span><br><span class="line"><span class="comment">// err = fmt.Errorf(&quot;CartDelHandler.Do fail&quot;)</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBTableOrderHandler 写订单表handler</span></span><br><span class="line"><span class="keyword">type</span> DBTableOrderHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DBTableOrderHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;写订单表...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBTableOrderSkusHandler 写订单商品表handler</span></span><br><span class="line"><span class="keyword">type</span> DBTableOrderSkusHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DBTableOrderSkusHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;写订单商品表...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBTableOrderPromotionsHandler 写订单优惠信息表handler</span></span><br><span class="line"><span class="keyword">type</span> DBTableOrderPromotionsHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *DBTableOrderPromotionsHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;写订单优惠信息表...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化空handler</span></span><br><span class="line">nullHandler := &amp;NullHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用 代码是不是很优雅</span></span><br><span class="line"><span class="comment">// 很明显的链 逻辑关系一览无余</span></span><br><span class="line">nullHandler.SetNext(&amp;ArgumentsHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;AddressInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;CartInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;StockInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;PromotionInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;ShipmentInfoHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;PromotionUseHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;StockSubtractHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;CartDelHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;DBTableOrderHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;DBTableOrderSkusHandler&#123;&#125;).</span><br><span class="line">SetNext(&amp;DBTableOrderPromotionsHandler&#123;&#125;)</span><br><span class="line"><span class="comment">//无限扩展代码...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始执行业务</span></span><br><span class="line"><span class="keyword">if</span> err := nullHandler.Run(&amp;Context&#123;&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 异常</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Fail | Error:&quot;</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;..&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;responsibility&#x2F;responsibility-order-submit.go&quot;</span><br><span class="line">main.(*ArgumentsHandler).Do 校验参数成功...</span><br><span class="line">main.(*AddressInfoHandler).Do 获取地址信息...</span><br><span class="line">main.(*AddressInfoHandler).Do 地址信息校验...</span><br><span class="line">main.(*CartInfoHandler).Do 获取购物车数据...</span><br><span class="line">main.(*StockInfoHandler).Do 获取商品库存信息...</span><br><span class="line">main.(*StockInfoHandler).Do 商品库存校验...</span><br><span class="line">main.(*PromotionInfoHandler).Do 获取优惠信息...</span><br><span class="line">main.(*ShipmentInfoHandler).Do 获取运费信息...</span><br><span class="line">main.(*PromotionUseHandler).Do 使用优惠信息...</span><br><span class="line">main.(*StockSubtractHandler).Do 扣库存...</span><br><span class="line">main.(*CartDelHandler).Do 清理购物车...</span><br><span class="line">main.(*DBTableOrderHandler).Do 写订单表...</span><br><span class="line">main.(*DBTableOrderSkusHandler).Do 写订单商品表...</span><br><span class="line">main.(*DBTableOrderPromotionsHandler).Do 写订单优惠信息表...</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><p>middlewares</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//责任链模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context Context</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler 处理</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 自身的业务</span></span><br><span class="line">Do(c *Context) error</span><br><span class="line"><span class="comment">// 设置下一个对象</span></span><br><span class="line">SetNext(h Handler) Handler</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">Run(c *Context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next 抽象出来的 可被合成复用的结构体</span></span><br><span class="line"><span class="keyword">type</span> Next <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 下一个对象</span></span><br><span class="line">nextHandler Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetNext 实现好的 可被复用的SetNext方法</span></span><br><span class="line"><span class="comment">// 返回值是下一个对象 方便写成链式代码优雅</span></span><br><span class="line"><span class="comment">// 例如 nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">SetNext</span><span class="params">(h Handler)</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">n.nextHandler = h</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Next)</span> <span class="title">Run</span><span class="params">(c *Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 由于go无继承的概念 这里无法执行当前handler的Do</span></span><br><span class="line"><span class="comment">// n.Do(c)</span></span><br><span class="line"><span class="keyword">if</span> n.nextHandler != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用下的变种</span></span><br><span class="line"><span class="comment">// 执行下一个handler的Do</span></span><br><span class="line">(n.nextHandler).Do(c)</span><br><span class="line"><span class="comment">// 执行下一个handler的Run</span></span><br><span class="line">(n.nextHandler).Run(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NullHandler 空Handler</span></span><br><span class="line"><span class="comment">// 由于go无继承的概念 作为链式调用的第一个载体 设置实际的下一个对象</span></span><br><span class="line"><span class="keyword">type</span> NullHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next的`nextHandler`成员属性、`SetNext`成员方法、`Run`成员方法</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 空Handler的Do</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *NullHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 空Handler 这里什么也不做 只是载体 do nothing...</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SignHandler 校验请求签名的handler</span></span><br><span class="line"><span class="keyword">type</span> SignHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验请求签名逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *SignHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验签名成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArgumentsHandler 校验参数的handler</span></span><br><span class="line"><span class="keyword">type</span> ArgumentsHandler <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用Next</span></span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验参数的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *ArgumentsHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验参数成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FrequentHandler 校验请求频率的hanlder</span></span><br><span class="line"><span class="keyword">type</span> FrequentHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do 校验请求频率逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *FrequentHandler)</span> <span class="title">Do</span><span class="params">(c *Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;校验请求频率成功...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 初始化空handler</span></span><br><span class="line">nullHandler := &amp;NullHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化参数handler</span></span><br><span class="line">argumentsHandler := &amp;ArgumentsHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化签名handler</span></span><br><span class="line">signHandler := &amp;SignHandler&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化频率handler</span></span><br><span class="line">frequentHandler := &amp;FrequentHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用 代码是不是很优雅</span></span><br><span class="line"><span class="comment">// 很明显的链 逻辑关系一览无余</span></span><br><span class="line">nullHandler.SetNext(argumentsHandler).SetNext(signHandler).SetNext(frequentHandler)</span><br><span class="line">nullHandler.Run(&amp;Context&#123;&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;----------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">middlewares := <span class="built_in">make</span>([]Handler, <span class="number">0</span>)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, nullHandler)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, argumentsHandler)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, signHandler)</span><br><span class="line">middlewares = <span class="built_in">append</span>(middlewares, frequentHandler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, handler := <span class="keyword">range</span> middlewares &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">middlewares[k<span class="number">-1</span>].SetNext(handler)</span><br><span class="line">&#125;</span><br><span class="line">nullHandler.Run(&amp;Context&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「责任链模式(改)」抽象过程的核心是：</p><ul><li>按职责划分：业务逻辑归类，收敛的过程。</li><li>对象链：把收敛之后的业务对象构成对象链，依次被执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链式调用-Go设计模式实战&quot;&gt;&lt;a href=&quot;#链式调用-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;链式调用 | Go设计模式实战&quot;&gt;&lt;/a&gt;链式调用 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>代码模板 | Go设计模式实战</title>
    <link href="http://wangyangyangisme.github.io/posts/e7bf6f31/"/>
    <id>http://wangyangyangisme.github.io/posts/e7bf6f31/</id>
    <published>2021-05-16T06:30:56.000Z</published>
    <updated>2021-05-16T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码模板-Go设计模式实战"><a href="#代码模板-Go设计模式实战" class="headerlink" title="代码模板 | Go设计模式实战"></a>代码模板 | Go设计模式实战</h1><blockquote><p>嗯，Go设计模式实战系列，一个设计模式业务真实使用的golang系列。</p><p><a href="http://tigerb.cn/">http://tigerb.cn/</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列主要分享，如何在我们的真实业务场景中使用设计模式。</p><p>本系列文章主要采用如下结构：</p><ul><li>什么是「XX设计模式」？</li><li>什么真实业务场景可以使用「XX设计模式」？</li><li>怎么用「XX设计模式」？</li></ul><p>本文主要介绍「模板模式」如何在真实业务场景中使用。</p><h2 id="什么是「模板模式」？"><a href="#什么是「模板模式」？" class="headerlink" title="什么是「模板模式」？"></a>什么是「模板模式」？</h2><p>抽象类里定义好<strong>算法的执行步骤</strong>和<strong>具体算法</strong>，以及可能发生变化的算法定义为<strong>抽象方法</strong>。不同的子类继承该抽象类，并实现父类的抽象方法。</p><p>模板模式的优势：</p><ul><li>不变的算法被继承复用：不变的部分高度封装、复用。</li><li>变化的算法子类继承并具体实现：变化的部分子类只需要具体实现抽象的部分即可，方便扩展，且可无限扩展。</li></ul><h2 id="什么真实业务场景可以用「模板模式」？"><a href="#什么真实业务场景可以用「模板模式」？" class="headerlink" title="什么真实业务场景可以用「模板模式」？"></a>什么真实业务场景可以用「模板模式」？</h2><p>满足如下要求的所有场景:</p><blockquote><p>算法执行的步骤是稳定<strong>不变的</strong>，但是具体的某些算法可能存在<strong>变</strong>化的场景。</p></blockquote><p>怎么理解，举个例子：<code>比如说你煮个面，必然需要先烧水，水烧开之后再放面进去</code>，以上的流程我们称之为<code>煮面过程</code>。可知：这个<code>煮面过程</code>的步骤是稳定不变的，但是在不同的环境烧水的方式可能不尽相同，也许有的人用天然气烧水、有的人用电磁炉烧水、有的人用柴火烧水，等等。我们可以得到以下结论：</p><ul><li><code>煮面过程</code>的步骤是稳定不变的</li><li><code>煮面过程</code>的烧水方式是可变的</li></ul><blockquote><p>我们有哪些真实业务场景可以用「模板模式」呢？</p></blockquote><p>比如抽奖系统的抽奖接口，为什么：</p><ul><li>抽奖的步骤是稳定不变的 -&gt; <strong>不变的</strong>算法执行步骤</li><li>不同抽奖类型活动在某些逻辑处理方式可能不同 -&gt; <strong>变的</strong>某些算法</li></ul><h2 id="怎么用「模板模式」？"><a href="#怎么用「模板模式」？" class="headerlink" title="怎么用「模板模式」？"></a>怎么用「模板模式」？</h2><p>关于怎么用，完全可以生搬硬套我总结的使用设计模式的四个步骤：</p><ul><li>业务梳理</li><li>业务流程图</li><li>代码建模</li><li>代码demo</li></ul><h4 id="业务梳理"><a href="#业务梳理" class="headerlink" title="业务梳理"></a>业务梳理</h4><p>我通过历史上接触过的各种抽奖场景（红包雨、糖果雨、打地鼠、大转盘(九宫格)、考眼力、答题闯关、游戏闯关、支付刮刮乐、积分刮刮乐等等），按照真实业务需求梳理了以下抽奖业务抽奖接口的大致文本流程。</p><p>了解具体业务请点击<a href="http://tigerb.cn/2019/12/23/skr-lottery/">《通用抽奖工具之需求分析 | SkrShop》</a></p><table><thead><tr><th>主步骤</th><th>主逻辑</th><th>抽奖类型</th><th>子步骤</th><th>子逻辑</th></tr></thead><tbody><tr><td>1</td><td>校验活动编号(serial_no)是否存在、并获取活动信息</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td>校验活动、场次是否正在进行</td><td>-</td><td>-</td><td>-</td></tr><tr><td>3</td><td>其他参数校验(<strong>不同活动类型实现不同</strong>)</td><td>-</td><td>-</td><td>-</td></tr><tr><td>4</td><td>活动抽奖次数校验(同时扣减)</td><td>-</td><td>-</td><td>-</td></tr><tr><td>5</td><td>活动是否需要消费积分</td><td>-</td><td>-</td><td>-</td></tr><tr><td>6</td><td>场次抽奖次数校验(同时扣减)</td><td>-</td><td>-</td><td>-</td></tr><tr><td>7</td><td>获取场次奖品信息</td><td>-</td><td>-</td><td>-</td></tr><tr><td>8</td><td>获取node奖品信息(<strong>不同活动类型实现不同</strong>)</td><td><strong>按时间抽奖类型</strong></td><td>1</td><td>do nothing(抽取该场次的奖品即可，无需其他逻辑)</td></tr><tr><td>8</td><td></td><td><strong>按抽奖次数抽奖类型</strong></td><td>1</td><td>判断是该用户第几次抽奖</td></tr><tr><td>8</td><td></td><td></td><td>2</td><td>获取对应node的奖品信息</td></tr><tr><td>8</td><td></td><td></td><td>3</td><td>复写原所有奖品信息(抽取该node节点的奖品)</td></tr><tr><td>8</td><td></td><td><strong>按数额范围区间抽奖</strong></td><td>1</td><td>判断属于哪个数额区间</td></tr><tr><td>8</td><td></td><td></td><td>2</td><td>获取对应node的奖品信息</td></tr><tr><td>8</td><td></td><td></td><td>3</td><td>复写原所有奖品信息(抽取该node节点的奖品)</td></tr><tr><td>9</td><td>抽奖</td><td>-</td><td>-</td><td>-</td></tr><tr><td>10</td><td>奖品数量判断</td><td>-</td><td>-</td><td>-</td></tr><tr><td>11</td><td>组装奖品信息</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><blockquote><p>注：流程不一定完全准确</p></blockquote><p>结论：</p><ul><li><code>主逻辑</code>是稳定不变的</li><li><code>其他参数校验</code>和<code>获取node奖品信息</code>的算法是可变的</li></ul><h4 id="业务流程图"><a href="#业务流程图" class="headerlink" title="业务流程图"></a>业务流程图</h4><p>我们通过梳理的文本业务流程得到了如下的业务流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200325205347.png" alt=""></p><h4 id="代码建模"><a href="#代码建模" class="headerlink" title="代码建模"></a>代码建模</h4><p>通过上面的分析我们可以得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">一个抽象类</span><br><span class="line">- 具体共有方法&#96;Run&#96;，里面定义了算法的执行步骤</span><br><span class="line">- 具体私有方法，不会发生变化的具体方法</span><br><span class="line">- 抽象方法，会发生变化的方法</span><br><span class="line"></span><br><span class="line">子类一(按时间抽奖类型)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法</span><br><span class="line"></span><br><span class="line">子类二(按抽奖次数抽奖类型)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法</span><br><span class="line"></span><br><span class="line">子类三(按数额范围区间抽奖)</span><br><span class="line">- 继承抽象类父类</span><br><span class="line">- 实现抽象方法</span><br></pre></td></tr></table></figure><p>但是golang里面没有继承的概念，我们就把对抽象类里抽象方法的依赖转化成对接口<code>interface</code>里抽象方法的依赖，同时也可以利用<code>合成复用</code>的方式“继承”模板:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">抽象行为的接口&#96;BehaviorInterface&#96;(包含如下需要实现的方法)</span><br><span class="line">- 其他参数校验的方法&#96;checkParams&#96;</span><br><span class="line">- 获取node奖品信息的方法&#96;getPrizesByNode&#96;</span><br><span class="line"></span><br><span class="line">抽奖结构体类</span><br><span class="line">- 具体共有方法&#96;Run&#96;，里面定义了算法的执行步骤</span><br><span class="line">- 具体私有方法&#96;checkParams&#96; 里面的逻辑实际依赖的接口BehaviorInterface.checkParams(ctx)的抽象方法</span><br><span class="line">- 具体私有方法&#96;getPrizesByNode&#96; 里面的逻辑实际依赖的接口BehaviorInterface.getPrizesByNode(ctx)的抽象方法</span><br><span class="line">- 其他具体私有方法，不会发生变化的具体方法</span><br><span class="line"></span><br><span class="line">实现&#96;BehaviorInterface&#96;的结构体一(按时间抽奖类型)</span><br><span class="line">- 实现接口方法</span><br><span class="line"></span><br><span class="line">实现&#96;BehaviorInterface&#96;的结构体二(按抽奖次数抽奖类型)</span><br><span class="line">- 实现接口方法</span><br><span class="line"></span><br><span class="line">实现&#96;BehaviorInterface&#96;的结构体三(按数额范围区间抽奖)</span><br><span class="line">- 实现接口方法</span><br></pre></td></tr></table></figure><p>同时得到了我们的UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/easy-tips/20200326201327.jpg" alt=""></p><h4 id="代码demo"><a href="#代码demo" class="headerlink" title="代码demo"></a>代码demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//模板模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ConstActTypeTime 按时间抽奖类型</span></span><br><span class="line">ConstActTypeTime <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// ConstActTypeTimes 按抽奖次数抽奖</span></span><br><span class="line">ConstActTypeTimes <span class="keyword">int32</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// ConstActTypeAmount 按数额范围区间抽奖</span></span><br><span class="line">ConstActTypeAmount <span class="keyword">int32</span> = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">ActInfo *ActInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ActInfo 上下文</span></span><br><span class="line"><span class="keyword">type</span> ActInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖</span></span><br><span class="line">ActivityType <span class="keyword">int32</span></span><br><span class="line"><span class="comment">// 其他字段略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BehaviorInterface 不同抽奖类型的行为差异的抽象接口</span></span><br><span class="line"><span class="keyword">type</span> BehaviorInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line">checkParams(ctx *Context) error</span><br><span class="line"><span class="comment">// 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line">getPrizesByNode(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimeDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按时间抽奖类型 比如红包雨</span></span><br><span class="line"><span class="keyword">type</span> TimeDraw <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按时间抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;do nothing(抽取该场次的奖品即可，无需其他逻辑)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimesDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按抽奖次数抽奖类型 比如答题闯关</span></span><br><span class="line"><span class="keyword">type</span> TimesDraw <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按抽奖次数抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断是该用户第几次抽奖...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AmountDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按数额范围区间抽奖 比如订单金额刮奖</span></span><br><span class="line"><span class="keyword">type</span> AmountDraw <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按数额范围区间抽奖:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断属于哪个数额区间...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lottery 抽奖模板</span></span><br><span class="line"><span class="keyword">type</span> Lottery <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 不同抽奖类型的抽象行为</span></span><br><span class="line">concreteBehavior BehaviorInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 抽奖算法</span></span><br><span class="line"><span class="comment">// 稳定不变的算法步骤</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">Run</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 具体方法：校验活动编号(serial_no)是否存在、并获取活动信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkSerialNo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：校验活动、场次是否正在进行</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkStatus(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：其他参数校验</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkParams(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动是否需要消费积分</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.consumePointsByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：场次抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：获取场次奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：获取node奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesByNode(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：抽奖</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.drawPrizes(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：奖品数量判断</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkPrizesStock(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：组装奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.packagePrizeInfo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkSerialNo 校验活动编号(serial_no)是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkSerialNo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动编号(serial_no)是否存在、并获取活动信息...&quot;</span>)</span><br><span class="line"><span class="comment">// 获取活动信息伪代码</span></span><br><span class="line">ctx.ActInfo = &amp;ActInfo&#123;</span><br><span class="line"><span class="comment">// 假设当前的活动类型为按抽奖次数抽奖</span></span><br><span class="line">ActivityType: ConstActTypeTimes,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前抽奖类型的具体行为</span></span><br><span class="line"><span class="keyword">switch</span> ctx.ActInfo.ActivityType &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// 按时间抽奖</span></span><br><span class="line">lottery.concreteBehavior = &amp;TimeDraw&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">// 按抽奖次数抽奖</span></span><br><span class="line">lottery.concreteBehavior = &amp;TimesDraw&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="comment">// 按数额范围区间抽奖</span></span><br><span class="line">lottery.concreteBehavior = &amp;AmountDraw&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;不存在的活动类型&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkStatus 校验活动、场次是否正在进行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkStatus</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动、场次是否正在进行...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.concreteBehavior.checkParams(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesByAct 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// consumePointsByAct 活动是否需要消费积分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">consumePointsByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动是否需要消费积分...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesBySession 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesBySession 获取场次奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取场次奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.concreteBehavior.getPrizesByNode(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// drawPrizes 抽奖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">drawPrizes</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;抽奖...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPrizesStock 奖品数量判断</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkPrizesStock</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;奖品数量判断...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packagePrizeInfo 组装奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">packagePrizeInfo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;组装奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">(&amp;Lottery&#123;&#125;).Run(&amp;Context&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是代码执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;...&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;template&#x2F;template.go&quot;</span><br><span class="line">main.(*Lottery).checkSerialNo 校验活动编号(serial_no)是否存在、并获取活动信息...</span><br><span class="line">main.(*Lottery).checkStatus 校验活动、场次是否正在进行...</span><br><span class="line">main.TimesDraw.checkParams 按抽奖次数抽奖类型:特殊参数校验...</span><br><span class="line">main.(*Lottery).checkTimesByAct 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).consumePointsByAct 活动是否需要消费积分...</span><br><span class="line">main.(*Lottery).checkTimesBySession 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).getPrizesBySession 获取场次奖品信息...</span><br><span class="line">main.TimesDraw.getPrizesByNode 1. 判断是该用户第几次抽奖...</span><br><span class="line">main.TimesDraw.getPrizesByNode 2. 获取对应node的奖品信息...</span><br><span class="line">main.TimesDraw.getPrizesByNode 3. 复写原所有奖品信息(抽取该node节点的奖品)...</span><br><span class="line">main.(*Lottery).drawPrizes 抽奖...</span><br><span class="line">main.(*Lottery).checkPrizesStock 奖品数量判断...</span><br><span class="line">main.(*Lottery).packagePrizeInfo 组装奖品信息...</span><br></pre></td></tr></table></figure><p>demo代码地址：<a href="https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/template.go">https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/template.go</a></p><h4 id="代码demo2-利用golang的合成复用特性实现"><a href="#代码demo2-利用golang的合成复用特性实现" class="headerlink" title="代码demo2(利用golang的合成复用特性实现)"></a>代码demo2(利用golang的<code>合成复用</code>特性实现)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//我的代码没有`else`系列</span></span><br><span class="line"><span class="comment">//模板模式</span></span><br><span class="line"><span class="comment">//@auhtor TIGERB&lt;https://github.com/TIGERB&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ConstActTypeTime 按时间抽奖类型</span></span><br><span class="line">ConstActTypeTime <span class="keyword">int32</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// ConstActTypeTimes 按抽奖次数抽奖</span></span><br><span class="line">ConstActTypeTimes <span class="keyword">int32</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// ConstActTypeAmount 按数额范围区间抽奖</span></span><br><span class="line">ConstActTypeAmount <span class="keyword">int32</span> = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context 上下文</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">ActInfo *ActInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ActInfo 上下文</span></span><br><span class="line"><span class="keyword">type</span> ActInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖</span></span><br><span class="line">ActivityType <span class="keyword">int32</span></span><br><span class="line"><span class="comment">// 其他字段略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BehaviorInterface 不同抽奖类型的行为差异的抽象接口</span></span><br><span class="line"><span class="keyword">type</span> BehaviorInterface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line">checkParams(ctx *Context) error</span><br><span class="line"><span class="comment">// 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line">getPrizesByNode(ctx *Context) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimeDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按时间抽奖类型 比如红包雨</span></span><br><span class="line"><span class="keyword">type</span> TimeDraw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用模板</span></span><br><span class="line">Lottery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按时间抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimeDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;do nothing(抽取该场次的奖品即可，无需其他逻辑)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimesDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按抽奖次数抽奖类型 比如答题闯关</span></span><br><span class="line"><span class="keyword">type</span> TimesDraw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用模板</span></span><br><span class="line">Lottery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按抽奖次数抽奖类型:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw TimesDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断是该用户第几次抽奖...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AmountDraw 具体抽奖行为</span></span><br><span class="line"><span class="comment">// 按数额范围区间抽奖 比如订单金额刮奖</span></span><br><span class="line"><span class="keyword">type</span> AmountDraw <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 合成复用模板</span></span><br><span class="line">Lottery</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;按数额范围区间抽奖:特殊参数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(draw *AmountDraw)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;1. 判断属于哪个数额区间...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;2. 获取对应node的奖品信息...&quot;</span>)</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;3. 复写原所有奖品信息(抽取该node节点的奖品)...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lottery 抽奖模板</span></span><br><span class="line"><span class="keyword">type</span> Lottery <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 不同抽奖类型的抽象行为</span></span><br><span class="line">ConcreteBehavior BehaviorInterface</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run 抽奖算法</span></span><br><span class="line"><span class="comment">// 稳定不变的算法步骤</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">Run</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 具体方法：校验活动编号(serial_no)是否存在、并获取活动信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkSerialNo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：校验活动、场次是否正在进行</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkStatus(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：其他参数校验</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkParams(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：活动是否需要消费积分</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.consumePointsByAct(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：场次抽奖次数校验(同时扣减)</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkTimesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：获取场次奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesBySession(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”抽象方法“：获取node奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.getPrizesByNode(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：抽奖</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.drawPrizes(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：奖品数量判断</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.checkPrizesStock(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法：组装奖品信息</span></span><br><span class="line"><span class="keyword">if</span> err = lottery.packagePrizeInfo(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkSerialNo 校验活动编号(serial_no)是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkSerialNo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动编号(serial_no)是否存在、并获取活动信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkStatus 校验活动、场次是否正在进行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkStatus</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;校验活动、场次是否正在进行...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkParams 其他参数校验(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkParams</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.ConcreteBehavior.checkParams(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesByAct 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// consumePointsByAct 活动是否需要消费积分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">consumePointsByAct</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动是否需要消费积分...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkTimesBySession 活动抽奖次数校验</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkTimesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;活动抽奖次数校验...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesBySession 获取场次奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesBySession</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;获取场次奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPrizesByNode 获取node奖品信息(不同活动类型实现不同)</span></span><br><span class="line"><span class="comment">// 不同场景变化的算法 转化为依赖抽象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">getPrizesByNode</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 实际依赖的接口的抽象方法</span></span><br><span class="line"><span class="keyword">return</span> lottery.ConcreteBehavior.getPrizesByNode(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// drawPrizes 抽奖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">drawPrizes</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;抽奖...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPrizesStock 奖品数量判断</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">checkPrizesStock</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;奖品数量判断...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packagePrizeInfo 组装奖品信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(lottery *Lottery)</span> <span class="title">packagePrizeInfo</span><span class="params">(ctx *Context)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">fmt.Println(runFuncName(), <span class="string">&quot;组装奖品信息...&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := &amp;Context&#123;</span><br><span class="line">ActInfo: &amp;ActInfo&#123;</span><br><span class="line">ActivityType: ConstActTypeAmount,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ctx.ActInfo.ActivityType &#123;</span><br><span class="line"><span class="keyword">case</span> ConstActTypeTime: <span class="comment">// 按时间抽奖类型</span></span><br><span class="line">instance := &amp;TimeDraw&#123;&#125;</span><br><span class="line">instance.ConcreteBehavior = instance</span><br><span class="line">instance.Run(ctx)</span><br><span class="line"><span class="keyword">case</span> ConstActTypeTimes: <span class="comment">// 按抽奖次数抽奖</span></span><br><span class="line">instance := &amp;TimesDraw&#123;&#125;</span><br><span class="line">instance.ConcreteBehavior = instance</span><br><span class="line">instance.Run(ctx)</span><br><span class="line"><span class="keyword">case</span> ConstActTypeAmount: <span class="comment">// 按数额范围区间抽奖</span></span><br><span class="line">instance := &amp;AmountDraw&#123;&#125;</span><br><span class="line">instance.ConcreteBehavior = instance</span><br><span class="line">instance.Run(ctx)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正在运行的函数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runFuncName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">pc := <span class="built_in">make</span>([]<span class="keyword">uintptr</span>, <span class="number">1</span>)</span><br><span class="line">runtime.Callers(<span class="number">2</span>, pc)</span><br><span class="line">f := runtime.FuncForPC(pc[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> f.Name()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是代码执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Running] go run &quot;...&#x2F;easy-tips&#x2F;go&#x2F;src&#x2F;patterns&#x2F;template&#x2F;templateOther.go&quot;</span><br><span class="line">main.(*Lottery).checkSerialNo 校验活动编号(serial_no)是否存在、并获取活动信息...</span><br><span class="line">main.(*Lottery).checkStatus 校验活动、场次是否正在进行...</span><br><span class="line">main.(*AmountDraw).checkParams 按数额范围区间抽奖:特殊参数校验...</span><br><span class="line">main.(*Lottery).checkTimesByAct 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).consumePointsByAct 活动是否需要消费积分...</span><br><span class="line">main.(*Lottery).checkTimesBySession 活动抽奖次数校验...</span><br><span class="line">main.(*Lottery).getPrizesBySession 获取场次奖品信息...</span><br><span class="line">main.(*AmountDraw).getPrizesByNode 1. 判断属于哪个数额区间...</span><br><span class="line">main.(*AmountDraw).getPrizesByNode 2. 获取对应node的奖品信息...</span><br><span class="line">main.(*AmountDraw).getPrizesByNode 3. 复写原所有奖品信息(抽取该node节点的奖品)...</span><br><span class="line">main.(*Lottery).drawPrizes 抽奖...</span><br><span class="line">main.(*Lottery).checkPrizesStock 奖品数量判断...</span><br><span class="line">main.(*Lottery).packagePrizeInfo 组装奖品信息...</span><br></pre></td></tr></table></figure><p>demo2代码地址：<a href="https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/templateOther.go">https://github.com/TIGERB/easy-tips/blob/master/go/src/patterns/template/templateOther.go</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后总结下，「模板模式」抽象过程的核心是把握<strong>不变</strong>与<strong>变</strong>：</p><ul><li>不变：<code>Run</code>方法里的抽奖步骤 -&gt; <code>被继承复用</code></li><li>变：不同场景下 -&gt; <code>被具体实现</code><ul><li><code>checkParams</code>参数校验逻辑</li><li><code>getPrizesByNode</code>获取该节点奖品的逻辑</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">特别说明：</span><br><span class="line">1. 我的代码没有&#96;else&#96;，只是一个在代码合理设计的情况下自然而然无限接近或者达到的结果，并不是一个硬性的目标，务必较真。</span><br><span class="line">2. 本系列的一些设计模式的概念可能和原概念存在差异，因为会结合实际使用，取其精华，适当改变，灵活使用。</span><br></pre></td></tr></table></figure><h1 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h1><ul><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template">代码模板 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility">链式调用 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite">代码组件 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer">订阅通知 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy">客户决策 | Go设计模式实战</a></li><li><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state">状态变换 | Go设计模式实战</a></li></ul><blockquote><p><a href="https://github.com/TIGERB/easy-tips/tree/master/go/patterns">Go设计模式实战系列 更多文章 点击此处查看</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码模板-Go设计模式实战&quot;&gt;&lt;a href=&quot;#代码模板-Go设计模式实战&quot; class=&quot;headerlink&quot; title=&quot;代码模板 | Go设计模式实战&quot;&gt;&lt;/a&gt;代码模板 | Go设计模式实战&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;嗯，Go设计模式实
      
    
    </summary>
    
    
      <category term="easy-tips" scheme="http://wangyangyangisme.github.io/categories/easy-tips/"/>
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/easy-tips/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>访问者和双分派</title>
    <link href="http://wangyangyangisme.github.io/posts/d31de58/"/>
    <id>http://wangyangyangisme.github.io/posts/d31de58/</id>
    <published>2021-05-04T14:50:54.000Z</published>
    <updated>2021-05-04T14:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/visitor-double-dispatch">https://refactoringguru.cn/design-patterns/visitor-double-dispatch</a></p></blockquote><h1 id="访问者和双分派"><a href="#访问者和双分派" class="headerlink" title="访问者和双分派"></a>访问者和双分派</h1><p>让我们看看下面几何图形类的层次结构 （注意伪代码）：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Graphic <span class="keyword">is</span></span><br><span class="line">    method draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Shape <span class="keyword">implements</span> Graphic <span class="keyword">is</span></span><br><span class="line">    field id</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dot extends Shape <span class="keyword">is</span></span><br><span class="line">    field x, y</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle extends Dot <span class="keyword">is</span></span><br><span class="line">    field radius</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rectangle extends Shape <span class="keyword">is</span></span><br><span class="line">    field width, height</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CompoundGraphic <span class="keyword">implements</span> Graphic <span class="keyword">is</span></span><br><span class="line">    field children: <span class="keyword">array</span> <span class="keyword">of</span> Graphic</span><br><span class="line">    method draw()</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>这些代码运行正常且程序处于开发阶段。 但某天你决定开发导出功能。 如果将导出功能的代码放入这些类中， 它们看上去会很奇怪。 因此， 你决定不在层次结构里的类中添加导出功能， 而是在层次结构外创建一个包含所有导出逻辑的新类。 该类将包含将每个对象的公有状态导出为 XML 字符串的方法。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Exporter <span class="keyword">is</span></span><br><span class="line">    method <span class="keyword">export</span>(s: Shape) <span class="keyword">is</span></span><br><span class="line">        print(&quot;导出形状&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(d: Dot)</span><br><span class="line">        print(&quot;导出点&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(c: Circle)</span><br><span class="line">        print(&quot;导出圆形&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(r: Rectangle)</span><br><span class="line">        print(&quot;导出矩形&quot;)</span><br><span class="line">    method <span class="keyword">export</span>(cs: CompoundGraphic)</span><br><span class="line">        print(&quot;导出组合图形&quot;)</span><br></pre></td></tr></table></figure><p>这些代码看上去不错， 让我们运行试试：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> App() <span class="keyword">is</span></span><br><span class="line">    method <span class="keyword">export</span>(shape: Shape) <span class="keyword">is</span></span><br><span class="line">        Exporter exporter = new Exporter()</span><br><span class="line">        exporter.<span class="keyword">export</span>(shape);</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">export</span>(new Circle());</span><br><span class="line"><span class="comment">// 不幸的是，这里将输出“导出形状”。</span></span><br></pre></td></tr></table></figure><p>等等！ 为什么？！</p><h2 id="像编译器一样思考"><a href="#像编译器一样思考" class="headerlink" title="像编译器一样思考"></a>像编译器一样思考</h2><p>注意： 下面的内容对于绝大多数面向对象编程的现代语言 （Java、 C# 和 PHP 等） 来说都是成立的。</p><h3 id="后期-动态绑定"><a href="#后期-动态绑定" class="headerlink" title="后期/动态绑定"></a>后期/动态绑定</h3><p>假设你是一个编译器。 你必须决定如何编译下面的代码：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method drawShape(shape: Shape) <span class="keyword">is</span></span><br><span class="line">    shape.draw();</span><br></pre></td></tr></table></figure><p>让我们看看... <code>Shape</code>形状类中定义了　 <code>draw</code>绘制方法。 稍等， 还有四个子类重写了该方法。 我们能否有把握地决定调用哪个实现呢？ 看上去不太可能。 确认的唯一方式是启动程序并检查传递给该方法的对象所属的类。 我们只知道一件事情： 该对象<strong>将包含</strong> <code>draw</code>方法的实现。</p><p>因此， 最终的机器代码将检查 <code>s</code>参数的类并且从合适的类中选择 <code>draw</code>方法的实现。</p><p>这种动态类型检查被称为后期 （或动态） 绑定：</p><ul><li><strong>后期</strong>， 是因为我们在编译后和运行时才将对象及其实现链接起来。</li><li><strong>动态</strong>， 是因为每个新对象都可能需要链接到不同的实现。</li></ul><h3 id="前期-静态绑定"><a href="#前期-静态绑定" class="headerlink" title="前期/静态绑定"></a>前期/静态绑定</h3><p>现在， 让我们来 “编译” 以下代码：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method exportShape(shape: Shape) <span class="keyword">is</span></span><br><span class="line">    Exporter exporter = new Exporter()</span><br><span class="line">    exporter.<span class="keyword">export</span>(shape);</span><br></pre></td></tr></table></figure><p>第二行代码很清楚：  <code>Exporter</code>类没有构造方法， 因此我们仅能将对象初始化。 那么对 <code>export</code>导出方法的调用呢？  <code>Exporter</code>有五个同名但参数不同的方法。 调用哪一个呢？ 看来我们在这里也需要动态绑定。</p><p>但还有另一个问题。 如果 <code>导出器</code>类中有一个图形类没有相应的 <code>export</code>方法怎么办？ 例如， 一个 <code>Ellipse</code>椭圆对象。 编译器不能确保存在适当的与重写后的方法相对应的重载方法。 编译器无法应对这种模凌两可的情况。</p><p>因此， 编译器开发者会选择安全的方式： 使用前期 （或静态） 绑定来处理重载方法。</p><ul><li><strong>前期</strong>， 是因为它发生在运行程序前编译的时候。 --<strong>静态</strong>， 是因为它无法在运行时更改。</li></ul><p>让我们回到之前的示例。 我们可以确定传递过来的参数类型属于 <code>Shape</code>类层次结构中： 要么是 <code>Shape</code>类， 要么是它的子类。 我们还知道 <code>Exporter</code>类包含支持 <code>Shape</code>类的导出功能基础实现：  <code>export(s: Shape)</code> 。</p><p>这是唯一能够安全链接当前代码而不会造成模凌两可情形的实现。 因此尽管我们将 <code>Rectangle</code>对象传递给了 <code>export­Shape</code> ， 导出类仍将调用 <code>export(s: Shape)</code>方法。</p><h2 id="双分派"><a href="#双分派" class="headerlink" title="双分派"></a>双分派</h2><p><strong>双分派</strong>是一个允许在重载时使用动态绑定的技巧。 下面是其实现方式：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Visitor <span class="keyword">is</span></span><br><span class="line">    method visit(s: Shape) <span class="keyword">is</span></span><br><span class="line">        print(&quot;访问形状&quot;)</span><br><span class="line">    method visit(d: Dot)</span><br><span class="line">        print(&quot;访问点&quot;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Graphic <span class="keyword">is</span></span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Shape <span class="keyword">implements</span> Graphic <span class="keyword">is</span></span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line">        <span class="comment">// 编译器明确知道 `this` 的类型是 `Shape`。</span></span><br><span class="line">        <span class="comment">// 因此可以安全地调用 `visit(s: Shape)`。</span></span><br><span class="line">        v.visit(this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dot extends Shape <span class="keyword">is</span></span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line">        <span class="comment">// 编译器明确知道 `this` 的类型是 `Dot`。</span></span><br><span class="line">        <span class="comment">// 因此可以安全地调用 `visit(s: Dot)`。</span></span><br><span class="line">        v.visit(this)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Visitor v = new Visitor();</span><br><span class="line">Graphic g = new Dot();</span><br><span class="line"></span><br><span class="line"><span class="comment">// `accept` 方法是重写而不是重载的。编译器可以进行动态绑定。</span></span><br><span class="line"><span class="comment">// 因此在对象调用某个方法时，将执行其所属类中的 `accept`</span></span><br><span class="line"><span class="comment">// 方法（在本例中是 `Dot` 类）。</span></span><br><span class="line">g.accept(v);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：&quot;访问点&quot;</span></span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>尽管<a href="https://refactoringguru.cn/design-patterns/visitor">访问者</a>模式基于双分派的原则创建， 但这并不是其主要目的。 访问者的目的是让你能为整个类层次结构添加 “外部” 操作， 而无需修改这些类的已有代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/visitor-double-dispatch&quot;&gt;https://refactoringguru.cn/design-patterns/visi
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式比较</title>
    <link href="http://wangyangyangisme.github.io/posts/63b2a10f/"/>
    <id>http://wangyangyangisme.github.io/posts/63b2a10f/</id>
    <published>2021-05-04T14:24:54.000Z</published>
    <updated>2021-05-04T14:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/factory-comparison">https://refactoringguru.cn/design-patterns/factory-comparison</a></p></blockquote><h1 id="工厂模式比较"><a href="#工厂模式比较" class="headerlink" title="工厂模式比较"></a>工厂模式比较</h1><p>本文将对下列概念之间的差异进行说明：</p><ol><li>工厂</li><li>构建方法</li><li>静态构建 （或工厂） 方法</li><li>简单工厂</li><li><a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a></li><li><a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a></li></ol><p>你可以在网上找到这些术语的参考信息。 尽管它们看上去相似， 但其含义都不一样。 许多人没有意识到这一点， 从而出现了混淆和误解。</p><p>因此让我们搞清楚其中的不同之处， 一劳永逸地解决这个问题。</p><h2 id="1-工厂"><a href="#1-工厂" class="headerlink" title="1. 工厂"></a>1. 工厂</h2><p><strong>工厂</strong>是一个含义模糊的术语， 表示可以创建一些东西的函数、 方法或类。 最常见的情况下， 工厂创建的是对象。 但是它们也可以创建文件和数据库记录等其他东西。</p><p>例如， 下面这些东西都可以非正式地被称为 “工厂”：</p><ul><li>创建程序 GUI 的函数或方法；</li><li>创建用户的类；</li><li>以特定方式调用类构造函数的静态方法。</li><li>一种创建型设计模式。</li></ul><p>当某人说到 “工厂” 这个词时， 其具体含义通常可以根据上下文来确定。 但如果你有疑问， 可以直接提问。 毕竟作者本人有时候也没有搞清楚。</p><h2 id="2-构建方法"><a href="#2-构建方法" class="headerlink" title="2. 构建方法"></a>2. 构建方法</h2><p>构建方法在 《<a href="https://refactoringguru.cn/ref-to-patterns-book">重构与模式</a>》 中被定义为 “创建对象的方法”。 这意味着每个工厂方法模式的结果都是 “构建方法”， 但反过来则并非如此。 这也意味着你可以用 “构建方法” 来替代马丁·福勒在<a href="https://refactoring.guru/ref-book">重构</a>中使用的 “工厂方法” 和乔斯华·布洛克在 《<a href="https://refactoringguru.cn/effective-java-book">Effective Java</a>》 中使用的 “静态工厂方法”。</p><p>在实际中， 构建方法只是构造函数调用的封装器。 它可能只是一个能更好地表达意图的名称。 此外， 它可以让你的代码独立于构造函数的改动， 甚至还可以包含一些特殊的逻辑， 返回已有对象以而不是创建新对象。</p><p>许多人会仅仅因为这些方法创建了新对象而称之为 “工厂方法”。 其中的逻辑很直接： 所有的<em>工厂</em>都会创建对象， 而该方法会创建对象， 所以显然它是一个<em>工厂方法</em>。 当遇到真正的<a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a>时， 这自然会造成许多混淆。</p><p>在下面的示例中，  <code>next</code>是一个构建方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;value = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Number (<span class="keyword">$this</span>-&gt;value + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-静态构建方法"><a href="#3-静态构建方法" class="headerlink" title="3. 静态构建方法"></a>3. 静态构建方法</h2><p><strong>静态构建方法</strong>是被声明为 <code>static</code>的构建方法。 换句话说， 你无需创建对象就能在某个类上调用该方法。</p><p>不要因为某些人将这些方法称为 “静态工厂方法” 而被其迷惑。 这种称呼只是一个坏习惯。 <a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a>是一种依赖于继承的设计模式。 如果将它设置为 <code>static</code> ， 你就不能在子类中对其进行扩展， 这就破坏了该模式的目的。</p><p>当静态构建方法返回一个新对象时， 它就成为了构造函数的替代品。</p><p>在下列情况中， 这可能会非常实用：</p><ul><li>你必须针对不同的目的提供多个不同的构造函数， 但是其签名相同时。 例如， 在 Java、 C++、 C# 以及其他许多语言中不可能同时存在 <code>Random­(int max)</code>和 <code>Random­(int min)</code>函数。 最常用的变通方式是创建多个调用默认构造函数的静态方法， 并于稍后再设置适当的数值。</li><li>你希望复用已有对象而不是初始化新对象时 （参考<a href="https://refactoringguru.cn/design-patterns/singleton">单例</a>模式）。 绝大多数编程语言的构造函数必须都返回一个新的类实例。 静态构建方法是应对该限制的变通方法。 在静态方法内部， 你的代码会决定是调用构造函数创建一个全新实例， 还是返回一个在缓存中已有的对象。</li></ul><p>在下面的例子中，  <code>load</code>方法是一个静态构建方法。 它提供了一种从数据库中获取用户的灵活方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $id, $name, $email, $phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$id, $name, $email, $phone</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = $id;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($id, $name, $email, $phone) = DB::load_data(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>);</span><br><span class="line">        $user = <span class="keyword">new</span> User($id, $name, $email, $phone);</span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-简单工厂模式"><a href="#4-简单工厂模式" class="headerlink" title="4. 简单工厂模式"></a>4. 简单工厂模式</h2><p><strong>简单工厂</strong>模式 描述了一个类， 它拥有一个包含大量条件语句的构建方法， 可根据方法的参数来选择对何种产品进行初始化并将其返回。</p><p>人们通常会将<em>简单工厂</em>与普通的<em>工厂</em>或其它创建型设计模式混淆。 在绝大多数情况下， 简单工厂是引入<a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a>或<a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a>模式时的一个中间步骤。</p><p>简单工厂通常没有子类。 但当从一个简单工厂中抽取出子类后， 它看上去就会更像经典的<em>工厂方法</em>模式了。</p><p>顺便提一句， 如果你将一个简单工厂声明为 <code>abstract</code>类型， 它并不会神奇地变成<em>抽象工厂</em>模式。</p><p>这里是一个<em>简单工厂</em>的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">$type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>: <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;customer&#x27;</span>: <span class="keyword">return</span> <span class="keyword">new</span> Customer();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>: <span class="keyword">return</span> <span class="keyword">new</span> Admin();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;传递的用户类型错误。&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-工厂方法模式"><a href="#5-工厂方法模式" class="headerlink" title="5. 工厂方法模式"></a>5. 工厂方法模式</h2><p><strong>工厂方法</strong> 是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><p>如果在基类及其扩展的子类中都有一个构建方法的话， 那它可能就是工厂方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">createEmployee</span>(<span class="params">$id</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        $employee = <span class="keyword">$this</span>-&gt;createEmployee($id);</span><br><span class="line">        $employee-&gt;paySalary();</span><br><span class="line">        $employee-&gt;dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createEmployee</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Programmer($id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createEmployee</span>(<span class="params">$id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Accountant($id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-抽象工厂模式"><a href="#6-抽象工厂模式" class="headerlink" title="6. 抽象工厂模式"></a>6. 抽象工厂模式</h2><p><strong>抽象工厂</strong> 》 是一种创建型设计模式， 它能创建一系列相关或相互依赖的对象， 而无需指定其具体类。</p><p>什么是 “系列对象”？ 例如有这样一组的对象：  <code>运输工具</code>+ <code>引擎</code>+ <code>控制器</code> 。 它可能会有几个变体：</p><ol><li><code>汽车</code>+ <code>内燃机</code>+ <code>方向盘</code></li><li><code>飞机</code>+ <code>喷气式发动机</code>+ <code>操纵杆</code></li></ol><p>如果你的程序中并不涉及产品系列的话， 那就不需要抽象工厂。</p><p>再次重申， 许多人分不清<em>抽象工厂</em>模式和声明为 <code>abstract</code>的简单工厂。 不要犯这个错误！</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>现在你知道了它们之间的区别， 试试用全新眼光看待下面的设计模式吧：</p><ul><li><a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法</a></li><li><a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/factory-comparison&quot;&gt;https://refactoringguru.cn/design-patterns/factory-c
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>行为模式-解释器模式</title>
    <link href="http://wangyangyangisme.github.io/posts/ab521f7f/"/>
    <id>http://wangyangyangisme.github.io/posts/ab521f7f/</id>
    <published>2021-05-04T13:55:31.000Z</published>
    <updated>2021-05-04T13:55:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="行为模式-解释器模式"><a href="#行为模式-解释器模式" class="headerlink" title="行为模式-解释器模式"></a>行为模式-解释器模式</h1><p><strong>亦称：</strong> interpreter</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>解释器模式：定义<code>一种方法和对应的解释器</code>，使用解释器<code>解释此方法的语句</code>来执行；</p><ul><li>解释器模式需要上下文类来<code>定义和存储上下文</code>，解释器类用来将语句来翻译成可执行程序；</li><li>解释器扩展和改变文化非常简单，构建完成后可以很方便地数据格式；</li><li>解释器模式会将非终结表达式<code>递归解释</code>，直到解释为终结符表达式；</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>解释器模式适用于数据结构不规则，但数据要素相同的情况；</li><li>语法不能太复杂，复杂的最好使用解释形语言来实现以降低复杂性；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/interpreter.png" alt=""></p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">golang</button></li><li class="tab"><button type="button" data-href="#tags-2">java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</span></span><br><span class="line"><span class="comment">//主要解决：对于一些固定文法构建一个解释句子的解释器。</span></span><br><span class="line"><span class="comment">//何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</span></span><br><span class="line"><span class="comment">//如何解决：构件语法树，定义终结符与非终结符。</span></span><br><span class="line"><span class="comment">//关键代码：构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。</span></span><br><span class="line"><span class="comment">//应用实例：编译器、运算表达式计算。SQL 解析、符号处理引擎等</span></span><br><span class="line"><span class="comment">//优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</span></span><br><span class="line"><span class="comment">//缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</span></span><br><span class="line"><span class="comment">//使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例:判断特定的文本是否符合正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Expression <span class="keyword">interface</span> &#123;</span><br><span class="line">Interpret(context <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TerminalExpression <span class="keyword">struct</span> &#123;</span><br><span class="line">Word <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终结符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(te *TerminalExpression)</span> <span class="title">Interpret</span><span class="params">(context <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(context, te.Word) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">type</span> OrExpression <span class="keyword">struct</span> &#123;</span><br><span class="line">A Expression</span><br><span class="line">B Expression</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(oe *OrExpression)</span> <span class="title">Interpret</span><span class="params">(context <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> oe.A.Interpret(context) || oe.B.Interpret(context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与</span></span><br><span class="line"><span class="keyword">type</span> AndExpression <span class="keyword">struct</span> &#123;</span><br><span class="line">A Expression</span><br><span class="line">B Expression</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ae *AndExpression)</span> <span class="title">Interpret</span><span class="params">(context <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ae.A.Interpret(context) &amp;&amp; ae.B.Interpret(context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">isMale := &amp;OrExpression&#123;&amp;TerminalExpression&#123;<span class="string">&quot;Robert&quot;</span>&#125;, &amp;TerminalExpression&#123;<span class="string">&quot;John&quot;</span>&#125;&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;John is male?&quot;</span>, isMale.Interpret(<span class="string">&quot;John&quot;</span>))</span><br><span class="line">isMarriedWoman := &amp;AndExpression&#123;&amp;TerminalExpression&#123;<span class="string">&quot;Julie&quot;</span>&#125;, &amp;TerminalExpression&#123;<span class="string">&quot;Married&quot;</span>&#125;&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Julie is a married women?&quot;</span>, isMarriedWoman.Interpret(<span class="string">&quot;Married Julie&quot;</span>))</span><br><span class="line"><span class="comment">//OutPut:</span></span><br><span class="line"><span class="comment">//John is male? true</span></span><br><span class="line"><span class="comment">//Julie is a married women? true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;行为模式-解释器模式&quot;&gt;&lt;a href=&quot;#行为模式-解释器模式&quot; class=&quot;headerlink&quot; title=&quot;行为模式-解释器模式&quot;&gt;&lt;/a&gt;行为模式-解释器模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;亦称：&lt;/strong&gt; interpreter&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>行为模式-访问者模式</title>
    <link href="http://wangyangyangisme.github.io/posts/ff280d74/"/>
    <id>http://wangyangyangisme.github.io/posts/ff280d74/</id>
    <published>2021-05-04T13:50:44.000Z</published>
    <updated>2021-05-04T13:50:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/visitor">https://refactoringguru.cn/design-patterns/visitor</a></p></blockquote><h1 id="行为模式-访问者模式"><a href="#行为模式-访问者模式" class="headerlink" title="行为模式-访问者模式"></a>行为模式-访问者模式</h1><p><strong>亦称：</strong> Visitor</p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>访问者模式</strong>是一种行为设计模式， 它能将算法与其所作用的对象隔离开来。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/visitor.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你的团队开发了一款能够使用巨型图像中地理信息的应用程序。 图像中的每个节点既能代表复杂实体 （例如一座城市）， 也能代表更精细的对象 （例如工业区和旅游景点等）。 如果节点代表的真实对象之间存在公路， 那么这些节点就会相互连接。 在程序内部， 每个节点的类型都由其所属的类来表示， 每个特定的节点则是一个对象。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/problem1-visitor.png" alt="将图像导出为 XML。"></p><p>一段时间后， 你接到了实现将图像导出到 XML 文件中的任务。 这些工作最初看上去非常简单。 你计划为每个节点类添加导出函数， 然后递归执行图像中每个节点的导出函数。 解决方案简单且优雅： 使用多态机制可以让导出方法的调用代码不会和具体的节点类相耦合。</p><p>但你不太走运， 系统架构师拒绝批准对已有节点类进行修改。 他认为这些代码已经是产品了， 不想冒险对其进行修改， 因为修改可能会引入潜在的缺陷。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/problem2-zh-visitor.png" alt="所有节点的类中都必须添加导出至 XML 文件的方法， 但如果在修改代码的过程中引入了任何缺陷， 那么整个程序都会面临风险。"></p><p>此外， 他还质疑在节点类中包含导出 XML 文件的代码是否有意义。 这些类的主要工作是处理地理数据。 导出 XML 文件的代码放在这里并不合适。</p><p>还有另一个原因， 那就是在此项任务完成后， 营销部门很有可能会要求程序提供导出其他类型文件的功能， 或者提出其他奇怪的要求。 这样你很可能会被迫再次修改这些重要但脆弱的类。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>访问者模式建议将新行为放入一个名为<em>访问者</em>的独立类中， 而不是试图将其整合到已有类中。 现在， 需要执行操作的原始对象将作为参数被传递给访问者中的方法， 让方法能访问对象所包含的一切必要数据。</p><p>如果现在该操作能在不同类的对象上执行会怎么样呢？ 比如在我们的示例中， 各节点类导出 XML 文件的实际实现很可能会稍有不同。 因此， 访问者类可以定义一组 （而不是一个） 方法， 且每个方法可接收不同类型的参数， 如下所示：</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> ExportVisitor <span class="keyword">implements</span> Visitor <span class="keyword">is</span></span><br><span class="line">    method doForCity(City c) <span class="comment">&#123; ... &#125;</span></span><br><span class="line">    method doForIndustry(Industry f) <span class="comment">&#123; ... &#125;</span></span><br><span class="line">    method doForSightSeeing(SightSeeing ss) <span class="comment">&#123; ... &#125;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>但我们究竟应该如何调用这些方法 （尤其是在处理整个图像方面） 呢？ 这些方法的签名各不相同， 因此我们不能使用多态机制。 为了可以挑选出能够处理特定对象的访问者方法， 我们需要对它的类进行检查。 这是不是听上去像个噩梦呢？</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">foreach (Node node <span class="keyword">in</span> graph)</span><br><span class="line">    <span class="keyword">if</span> (node instanceof City)</span><br><span class="line">        exportVisitor.doForCity((City) node)</span><br><span class="line">    <span class="keyword">if</span> (node instanceof Industry)</span><br><span class="line">        exportVisitor.doForIndustry((Industry) node)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能会问， 我们为什么不使用方法重载呢？ 就是使用相同的方法名称， 但它们的参数不同。 不幸的是， 即使我们的编程语言 （例如 Java 和 C#） 支持重载也不行。 由于我们无法提前知晓节点对象所属的类， 所以重载机制无法执行正确的方法。 方法会将 <code>节点</code>基类作为输入参数的默认类型。</p><p>但是， 访问者模式可以解决这个问题。 它使用了一种名为<a href="https://refactoringguru.cn/design-patterns/visitor-double-dispatch">双分派</a>的技巧， 不使用累赘的条件语句也可下执行正确的方法。 与其让客户端来选择调用正确版本的方法， 不如将选择权委派给作为参数传递给访问者的对象。 由于该对象知晓其自身的类， 因此能更自然地在访问者中选出正确的方法。 它们会 “接收” 一个访问者并告诉其应执行的访问者方法。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line">foreach (Node node <span class="keyword">in</span> graph)</span><br><span class="line">    node.accept(exportVisitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 城市</span></span><br><span class="line"><span class="keyword">class</span> City <span class="keyword">is</span></span><br><span class="line">    method accept(Visitor v) <span class="keyword">is</span></span><br><span class="line">        v.doForCity(this)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工业区</span></span><br><span class="line"><span class="keyword">class</span> Industry <span class="keyword">is</span></span><br><span class="line">    method accept(Visitor v) <span class="keyword">is</span></span><br><span class="line">        v.doForIndustry(this)</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>我承认最终还是修改了节点类， 但毕竟改动很小， 且使得我们能够在后续进一步添加行为时无需再次修改代码。</p><p>现在， 如果我们抽取出所有访问者的通用接口， 所有已有的节点都能与我们在程序中引入的任何访问者交互。 如果需要引入与节点相关的某个行为， 你只需要实现一个新的访问者类即可。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/visitor-comic-1.png" alt="优秀的保险代理人总能为不同类型的团体提供不同的保单。"></p><p>假如有这样一位非常希望赢得新客户的资深保险代理人。 他可以拜访街区中的每栋楼， 尝试向每个路人推销保险。 所以， 根据大楼内组织类型的不同， 他可以提供专门的保单：</p><ul><li>如果建筑是居民楼， 他会推销医疗保险。</li><li>如果建筑是银行， 他会推销失窃保险。</li><li>如果建筑是咖啡厅， 他会推销火灾和洪水保险。</li></ul><h2 id="访问者模式结构"><a href="#访问者模式结构" class="headerlink" title="访问者模式结构"></a>访问者模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/structure-zh-indexed-visitor.png" alt=""></p><ol><li><strong>访问者</strong> （Visitor） 接口声明了一系列以对象结构的具体元素为参数的访问者方法。 如果编程语言支持重载， 这些方法的名称可以是相同的， 但是其参数一定是不同的。</li><li><strong>具体访问者</strong> （Concrete Visitor） 会为不同的具体元素类实现相同行为的几个不同版本。</li><li><strong>元素</strong> （Element） 接口声明了一个方法来 “接收” 访问者。 该方法必须有一个参数被声明为访问者接口类型。</li><li><strong>具体元素</strong> （Concrete Element） 必须实现接收方法。 该方法的目的是根据当前元素类将其调用重定向到相应访问者的方法。 请注意， 即使元素基类实现了该方法， 所有子类都必须对其进行重写并调用访问者对象中的合适方法。</li><li><strong>客户端</strong> （Client） 通常会作为集合或其他复杂对象 （例如一个<a href="https://refactoringguru.cn/design-patterns/composite">组合</a>树） 的代表。 客户端通常不知晓所有的具体元素类， 因为它们会通过抽象接口与集合中的对象进行交互。</li></ol><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>在本例中， <strong>访问者</strong>模式为几何图像层次结构添加了对于 XML 文件导出功能的支持。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/example-visitor.png" alt="通过访问者对象将各种类型的对象导出为 XML 格式文件。"></p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元素接口声明了一个`accept（接收）`方法，它会将访问者基础接口作为一个参</span></span><br><span class="line"><span class="comment">// 数。</span></span><br><span class="line"><span class="keyword">interface</span> Shape <span class="keyword">is</span></span><br><span class="line">    method move(x, y)</span><br><span class="line">    method draw()</span><br><span class="line">    method accept(v: Visitor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个具体元素类都必须以特定方式实现`accept`方法，使其能调用相应元素类的</span></span><br><span class="line"><span class="comment">// 访问者方法。</span></span><br><span class="line"><span class="keyword">class</span> Dot <span class="keyword">implements</span> Shape <span class="keyword">is</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意我们正在调用的`visitDot（访问点）`方法与当前类的名称相匹配。</span></span><br><span class="line">    <span class="comment">// 这样我们能让访问者知晓与其交互的元素类。</span></span><br><span class="line">    method accept(v: Visitor) <span class="keyword">is</span></span><br><span class="line">        v.visitDot(this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle <span class="keyword">implements</span> Shape <span class="keyword">is</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    method accept(v: Visitor) <span class="keyword">is</span></span><br><span class="line">        v.visitCircle(this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Rectangle <span class="keyword">implements</span> Shape <span class="keyword">is</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    method accept(v: Visitor) <span class="keyword">is</span></span><br><span class="line">        v.visitRectangle(this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CompoundShape <span class="keyword">implements</span> Shape <span class="keyword">is</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    method accept(v: Visitor) <span class="keyword">is</span></span><br><span class="line">        v.visitCompoundShape(this)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问者接口声明了一组与元素类对应的访问方法。访问方法的签名能让访问者准</span></span><br><span class="line"><span class="comment">// 确辨别出与其交互的元素所属的类。</span></span><br><span class="line"><span class="keyword">interface</span> Visitor <span class="keyword">is</span></span><br><span class="line">    method visitDot(d: Dot)</span><br><span class="line">    method visitCircle(c: Circle)</span><br><span class="line">    method visitRectangle(r: Rectangle)</span><br><span class="line">    method visitCompoundShape(cs: CompoundShape)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者实现了同一算法的多个版本，而且该算法能与所有具体类进行交互。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 访问者模式在复杂对象结构（例如组合树）上使用时能发挥最大作用。在这种情</span></span><br><span class="line"><span class="comment">// 况下，它可以存储算法的一些中间状态，并同时在结构中的不同对象上执行访问</span></span><br><span class="line"><span class="comment">// 者方法。这可能会非常有帮助。</span></span><br><span class="line"><span class="keyword">class</span> XMLExportVisitor <span class="keyword">implements</span> Visitor <span class="keyword">is</span></span><br><span class="line">    method visitDot(d: Dot) <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 导出点（dot）的 ID 和中心坐标。</span></span><br><span class="line"></span><br><span class="line">    method visitCircle(c: Circle) <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 导出圆（circle）的 ID 、中心坐标和半径。</span></span><br><span class="line"></span><br><span class="line">    method visitRectangle(r: Rectangle) <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 导出长方形（rectangle）的 ID 、左上角坐标、宽和长。</span></span><br><span class="line"></span><br><span class="line">    method visitCompoundShape(cs: CompoundShape) <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 导出图形（shape）的 ID 和其子项目的 ID 列表。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码可在不知晓具体类的情况下在一组元素上运行访问者操作。“接收”操</span></span><br><span class="line"><span class="comment">// 作会将调用定位到访问者对象的相应操作上。</span></span><br><span class="line"><span class="keyword">class</span> Application <span class="keyword">is</span></span><br><span class="line">    field allShapes: <span class="keyword">array</span> <span class="keyword">of</span> Shapes</span><br><span class="line"></span><br><span class="line">    method <span class="keyword">export</span>() <span class="keyword">is</span></span><br><span class="line">        exportVisitor = new XMLExportVisitor()</span><br><span class="line"></span><br><span class="line">        foreach (shape <span class="keyword">in</span> allShapes) <span class="keyword">do</span></span><br><span class="line">            shape.accept(exportVisitor)</span><br></pre></td></tr></table></figure><p>如果你并不十分理解为何本例中需要使用 <code>accept</code>接收方法， 我的一篇文章<a href="https://refactoringguru.cn/design-patterns/visitor-double-dispatch">访问者和双分派</a>详细解释了这个问题。</p><h2 id="访问者模式适合应用场景"><a href="#访问者模式适合应用场景" class="headerlink" title="访问者模式适合应用场景"></a>访问者模式适合应用场景</h2><p><strong>如果你需要对一个复杂对象结构 （例如对象树） 中的所有元素执行某些操作， 可使用访问者模式。</strong></p><p>访问者模式通过在访问者对象中为多个目标类提供相同操作的变体， 让你能在属于不同类的一组对象上执行同一操作。</p><p><strong>可使用访问者模式来清理辅助行为的业务逻辑。</strong></p><p>该模式会将所有非主要的行为抽取到一组访问者类中， 使得程序的主要类能更专注于主要的工作。</p><p><strong>当某个行为仅在类层次结构中的一些类中有意义， 而在其他类中没有意义时， 可使用该模式。</strong></p><p>你可将该行为抽取到单独的访问者类中， 只需实现接收相关类的对象作为参数的访问者方法并将其他方法留空即可。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>在访问者接口中声明一组 “访问” 方法， 分别对应程序中的每个具体元素类。</p></li><li><p>声明元素接口。 如果程序中已有元素类层次接口， 可在层次结构基类中添加抽象的 “接收” 方法。 该方法必须接受访问者对象作为参数。</p></li><li><p>在所有具体元素类中实现接收方法。 这些方法必须将调用重定向到当前元素对应的访问者对象中的访问者方法上。</p></li><li><p>元素类只能通过访问者接口与访问者进行交互。 不过访问者必须知晓所有的具体元素类， 因为这些类在访问者方法中都被作为参数类型引用。</p></li><li><p>为每个无法在元素层次结构中实现的行为创建一个具体访问者类并实现所有的访问者方法。</p><p>你可能会遇到访问者需要访问元素类的部分私有成员变量的情况。 在这种情况下， 你要么将这些变量或方法设为公有， 这将破坏元素的封装； 要么将访问者类嵌入到元素类中。 后一种方式只有在支持嵌套类的编程语言中才可能实现。</p></li><li><p>客户端必须创建访问者对象并通过 “接收” 方法将其传递给元素。</p></li></ol><h2 id="访问者模式优缺点"><a href="#访问者模式优缺点" class="headerlink" title="访问者模式优缺点"></a>访问者模式优缺点</h2><p>优点</p><ul><li><em>开闭原则</em>。 你可以引入在不同类对象上执行的新行为， 且无需对这些类做出修改。</li><li><em>单一职责原则</em>。 可将同一行为的不同版本移到同一个类中。</li><li>访问者对象可以在与各种对象交互时收集一些有用的信息。 当你想要遍历一些复杂的对象结构 （例如对象树）， 并在结构中的每个对象上应用访问者时， 这些信息可能会有所帮助。</li></ul><p>缺点</p><ul><li>部分客户端可能会受到算法框架的限制。</li><li>通过子类抑制默认步骤实现可能会导致违反_里氏替换原则_。</li><li>模板方法中的步骤越多， 其维护工作就可能会越困难。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>你可以将<a href="https://refactoringguru.cn/design-patterns/visitor">访问者模式</a>视为<a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>的加强版本， 其对象可对不同类的多种对象执行操作。</li><li>你可以使用<a href="https://refactoringguru.cn/design-patterns/visitor">访问者</a>对整个<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>树执行操作。</li><li>可以同时使用<a href="https://refactoringguru.cn/design-patterns/visitor">访问者</a>和<a href="https://refactoringguru.cn/design-patterns/iterator">迭代器模式</a>来遍历复杂数据结构， 并对其中的元素执行所需操作， 即使这些元素所属的类完全不同。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>访问者</strong>是一种行为设计模式， 允许你在不修改已有代码的情况下向已有类层次结构中增加新的行为。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">C#</button></li><li class="tab"><button type="button" data-href="#tags-2">C++</button></li><li class="tab"><button type="button" data-href="#tags-3">JAVA</button></li><li class="tab"><button type="button" data-href="#tags-4">PHP</button></li><li class="tab"><button type="button" data-href="#tags-5">Python</button></li><li class="tab"><button type="button" data-href="#tags-6">Ruby</button></li><li class="tab"><button type="button" data-href="#tags-7">Swift</button></li><li class="tab"><button type="button" data-href="#tags-8">TypeScrit</button></li><li class="tab"><button type="button" data-href="#tags-9">Golang</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><p><strong>在 C# 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>Program.cs:</strong> 概念示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru.DesignPatterns.Visitor.Conceptual</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The Component interface declares an `accept` method that should take the</span></span><br><span class="line">    <span class="comment">// base visitor interface as an argument.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IComponent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">IVisitor visitor</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Each Concrete Component must implement the `Accept` method in such a way</span></span><br><span class="line">    <span class="comment">// that it calls the visitor&#x27;s method corresponding to the component&#x27;s</span></span><br><span class="line">    <span class="comment">// class.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteComponentA</span> : <span class="title">IComponent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Note that we&#x27;re calling `VisitConcreteComponentA`, which matches the</span></span><br><span class="line">        <span class="comment">// current class name. This way we let the visitor know the class of the</span></span><br><span class="line">        <span class="comment">// component it works with.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">IVisitor visitor</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            visitor.VisitConcreteComponentA(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Concrete Components may have special methods that don&#x27;t exist in</span></span><br><span class="line">        <span class="comment">// their base class or interface. The Visitor is still able to use these</span></span><br><span class="line">        <span class="comment">// methods since it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ExclusiveMethodOfConcreteComponentA</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteComponentB</span> : <span class="title">IComponent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Same here: VisitConcreteComponentB =&gt; ConcreteComponentB</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">IVisitor visitor</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            visitor.VisitConcreteComponentB(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SpecialMethodOfConcreteComponentB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Visitor Interface declares a set of visiting methods that correspond</span></span><br><span class="line">    <span class="comment">// to component classes. The signature of a visiting method allows the</span></span><br><span class="line">    <span class="comment">// visitor to identify the exact class of the component that it&#x27;s dealing</span></span><br><span class="line">    <span class="comment">// with.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IVisitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">VisitConcreteComponentA</span>(<span class="params">ConcreteComponentA element</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">VisitConcreteComponentB</span>(<span class="params">ConcreteComponentB element</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concrete Visitors implement several versions of the same algorithm, which</span></span><br><span class="line">    <span class="comment">// can work with all concrete component classes.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// You can experience the biggest benefit of the Visitor pattern when using</span></span><br><span class="line">    <span class="comment">// it with a complex object structure, such as a Composite tree. In this</span></span><br><span class="line">    <span class="comment">// case, it might be helpful to store some intermediate state of the</span></span><br><span class="line">    <span class="comment">// algorithm while executing visitor&#x27;s methods over various objects of the</span></span><br><span class="line">    <span class="comment">// structure.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> : <span class="title">IVisitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitConcreteComponentA</span>(<span class="params">ConcreteComponentA element</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + <span class="string">&quot; + ConcreteVisitor1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitConcreteComponentB</span>(<span class="params">ConcreteComponentB element</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + <span class="string">&quot; + ConcreteVisitor1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> : <span class="title">IVisitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitConcreteComponentA</span>(<span class="params">ConcreteComponentA element</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(element.ExclusiveMethodOfConcreteComponentA() + <span class="string">&quot; + ConcreteVisitor2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitConcreteComponentB</span>(<span class="params">ConcreteComponentB element</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(element.SpecialMethodOfConcreteComponentB() + <span class="string">&quot; + ConcreteVisitor2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The client code can run visitor operations over any set of elements</span></span><br><span class="line">        <span class="comment">// without figuring out their concrete classes. The accept operation</span></span><br><span class="line">        <span class="comment">// directs a call to the appropriate operation in the visitor object.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClientCode</span>(<span class="params">List&lt;IComponent&gt; components, IVisitor visitor</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> component <span class="keyword">in</span> components)</span><br><span class="line">            &#123;</span><br><span class="line">                component.Accept(visitor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;IComponent&gt; components = <span class="keyword">new</span> List&lt;IComponent&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> ConcreteComponentA(),</span><br><span class="line">                <span class="keyword">new</span> ConcreteComponentB()</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The client code works with all visitors via the base Visitor interface:&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line">            Client.ClientCode(components,visitor1);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;It allows the same client code to work with different types of visitors:&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line">            Client.ClientCode(components, visitor2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line"></span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line">A + ConcreteVisitor2</span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><p><strong>在 C++ 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.cc:</strong> 概念示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Visitor Interface declares a set of visiting methods that correspond to</span></span><br><span class="line"><span class="comment"> * component classes. The signature of a visiting method allows the visitor to</span></span><br><span class="line"><span class="comment"> * identify the exact class of the component that it&#x27;s dealing with.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteComponentA</span><span class="params">(<span class="keyword">const</span> ConcreteComponentA *element)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">VisitConcreteComponentB</span><span class="params">(<span class="keyword">const</span> ConcreteComponentB *element)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Component interface declares an `accept` method that should take the base</span></span><br><span class="line"><span class="comment"> * visitor interface as an argument.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Component() &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor *visitor)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Each Concrete Component must implement the `Accept` method in such a way that</span></span><br><span class="line"><span class="comment"> * it calls the visitor&#x27;s method corresponding to the component&#x27;s class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span> :</span> <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Note that we&#x27;re calling `visitConcreteComponentA`, which matches the</span></span><br><span class="line"><span class="comment">   * current class name. This way we let the visitor know the class of the</span></span><br><span class="line"><span class="comment">   * component it works with.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor *visitor)</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    visitor-&gt;VisitConcreteComponentA(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Concrete Components may have special methods that don&#x27;t exist in their base</span></span><br><span class="line"><span class="comment">   * class or interface. The Visitor is still able to use these methods since</span></span><br><span class="line"><span class="comment">   * it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">ExclusiveMethodOfConcreteComponentA</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span> :</span> <span class="keyword">public</span> Component &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Same here: visitConcreteComponentB =&gt; ConcreteComponentB</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor *visitor)</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    visitor-&gt;VisitConcreteComponentB(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">SpecialMethodOfConcreteComponentB</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Visitors implement several versions of the same algorithm, which can</span></span><br><span class="line"><span class="comment"> * work with all concrete component classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You can experience the biggest benefit of the Visitor pattern when using it</span></span><br><span class="line"><span class="comment"> * with a complex object structure, such as a Composite tree. In this case, it</span></span><br><span class="line"><span class="comment"> * might be helpful to store some intermediate state of the algorithm while</span></span><br><span class="line"><span class="comment"> * executing visitor&#x27;s methods over various objects of the structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> :</span> <span class="keyword">public</span> Visitor &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">VisitConcreteComponentA</span><span class="params">(<span class="keyword">const</span> ConcreteComponentA *element)</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; element-&gt;ExclusiveMethodOfConcreteComponentA() &lt;&lt; <span class="string">&quot; + ConcreteVisitor1\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">VisitConcreteComponentB</span><span class="params">(<span class="keyword">const</span> ConcreteComponentB *element)</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; element-&gt;SpecialMethodOfConcreteComponentB() &lt;&lt; <span class="string">&quot; + ConcreteVisitor1\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> :</span> <span class="keyword">public</span> Visitor &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">VisitConcreteComponentA</span><span class="params">(<span class="keyword">const</span> ConcreteComponentA *element)</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; element-&gt;ExclusiveMethodOfConcreteComponentA() &lt;&lt; <span class="string">&quot; + ConcreteVisitor2\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">VisitConcreteComponentB</span><span class="params">(<span class="keyword">const</span> ConcreteComponentB *element)</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; element-&gt;SpecialMethodOfConcreteComponentB() &lt;&lt; <span class="string">&quot; + ConcreteVisitor2\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code can run visitor operations over any set of elements without</span></span><br><span class="line"><span class="comment"> * figuring out their concrete classes. The accept operation directs a call to</span></span><br><span class="line"><span class="comment"> * the appropriate operation in the visitor object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">const</span> Component *, <span class="number">2</span>&gt; components, Visitor *visitor)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> Component *comp : components) &#123;</span><br><span class="line">    comp-&gt;Accept(visitor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">const</span> Component *, 2&gt; components = &#123;<span class="keyword">new</span> ConcreteComponentA, <span class="keyword">new</span> ConcreteComponentB&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;The client code works with all visitors via the base Visitor interface:\n&quot;</span>;</span><br><span class="line">  ConcreteVisitor1 *visitor1 = <span class="keyword">new</span> ConcreteVisitor1;</span><br><span class="line">  ClientCode(components, visitor1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;It allows the same client code to work with different types of visitors:\n&quot;</span>;</span><br><span class="line">  ConcreteVisitor2 *visitor2 = <span class="keyword">new</span> ConcreteVisitor2;</span><br><span class="line">  ClientCode(components, visitor2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> Component *comp : components) &#123;</span><br><span class="line">    <span class="keyword">delete</span> comp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> visitor1;</span><br><span class="line">  <span class="keyword">delete</span> visitor2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line"></span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line">A + ConcreteVisitor2</span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-3"><p><strong>在 Java 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><p>这里是 Java 程序库代码中该模式的一些示例：</p><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/AnnotationValue.html"><code>javax.lang.model.element.AnnotationValue</code></a> 和 <a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/AnnotationValueVisitor.html"><code>Annotation­Value­Visitor</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/Element.html"><code>javax.lang.model.element.Element</code></a> 和 <a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/ElementVisitor.html"><code>Element­Visitor</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html"><code>javax.lang.model.type.TypeMirror</code></a> 和 <a href="http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html"><code>Type­Visitor</code></a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/file/FileVisitor.html"><code>java.nio.file.FileVisitor</code></a> 和 <a href="http://docs.oracle.com/javase/8/docs/api/java/nio/file/SimpleFileVisitor.html"><code>Simple­File­Visitor</code></a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/faces/component/visit/VisitContext.html"><code>javax.faces.component.visit.VisitContext</code></a> 和 <a href="http://docs.oracle.com/javaee/7/api/javax/faces/component/visit/VisitCallback.html"><code>Visit­Callback</code></a></li></ul><p><strong>将形状导出为 XML 文件</strong></p><p>在本例中， 我们希望将一系列几何形状导出为 XML 文件。 重点在于我们不希望直接修改形状代码， 或者至少能确保最小程度的修改。</p><p>最终， 访问者模式建立了一个框架， 允许我们在不修改已有类的情况下向形状层次结构中添加新的行为。</p><p><strong>shapes</strong></p><p><strong>shapes/Shape.java:</strong> 通用形状接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.visitor.Visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shapes/Dot.java:</strong> 点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.visitor.Visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitDot(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shapes/Circle.java:</strong> 圆形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.visitor.Visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Dot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id, x, y);</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitCircle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shapes/Rectangle.java:</strong> 矩形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.visitor.Visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitRectangle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shapes/CompoundShape.java:</strong> 组合形状</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.visitor.Visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompoundShape</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Shape&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompoundShape</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// move shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// draw shape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.visitCompoundGraphic(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        children.add(shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>visitor</strong></p><p><strong>visitor/Visitor.java:</strong> 通用访问者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.shapes.Circle;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.shapes.CompoundShape;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.shapes.Dot;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.shapes.Rectangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">visitDot</span><span class="params">(Dot dot)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCircle</span><span class="params">(Circle circle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitRectangle</span><span class="params">(Rectangle rectangle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>visitor/XMLExportVisitor.java:</strong> 具体访问者， 将所有形状导出为 XML 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.shapes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLExportVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">export</span><span class="params">(Shape... args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : args) &#123;</span><br><span class="line">            sb.append(shape.accept(<span class="keyword">this</span>)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitDot</span><span class="params">(Dot d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;dot&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;id&gt;&quot;</span> + d.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;x&gt;&quot;</span> + d.getX() + <span class="string">&quot;&lt;/x&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;y&gt;&quot;</span> + d.getY() + <span class="string">&quot;&lt;/y&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/dot&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitCircle</span><span class="params">(Circle c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;circle&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;id&gt;&quot;</span> + c.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;x&gt;&quot;</span> + c.getX() + <span class="string">&quot;&lt;/x&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;y&gt;&quot;</span> + c.getY() + <span class="string">&quot;&lt;/y&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;radius&gt;&quot;</span> + c.getRadius() + <span class="string">&quot;&lt;/radius&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/circle&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitRectangle</span><span class="params">(Rectangle r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;rectangle&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;id&gt;&quot;</span> + r.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;x&gt;&quot;</span> + r.getX() + <span class="string">&quot;&lt;/x&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;y&gt;&quot;</span> + r.getY() + <span class="string">&quot;&lt;/y&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;width&gt;&quot;</span> + r.getWidth() + <span class="string">&quot;&lt;/width&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;height&gt;&quot;</span> + r.getHeight() + <span class="string">&quot;&lt;/height&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/rectangle&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;compound_graphic&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;   &lt;id&gt;&quot;</span> + cg.getId() + <span class="string">&quot;&lt;/id&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                _visitCompoundGraphic(cg) +</span><br><span class="line">                <span class="string">&quot;&lt;/compound_graphic&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">_visitCompoundGraphic</span><span class="params">(CompoundShape cg)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : cg.children) &#123;</span><br><span class="line">            String obj = shape.accept(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">// Proper indentation for sub-objects.</span></span><br><span class="line">            obj = <span class="string">&quot;    &quot;</span> + obj.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\n    &quot;</span>) + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            sb.append(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Demo.java:</strong> 客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.visitor.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.shapes.*;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.visitor.example.visitor.XMLExportVisitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dot dot = <span class="keyword">new</span> Dot(<span class="number">1</span>, <span class="number">10</span>, <span class="number">55</span>);</span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">2</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">10</span>);</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        CompoundShape compoundShape = <span class="keyword">new</span> CompoundShape(<span class="number">4</span>);</span><br><span class="line">        compoundShape.add(dot);</span><br><span class="line">        compoundShape.add(circle);</span><br><span class="line">        compoundShape.add(rectangle);</span><br><span class="line"></span><br><span class="line">        CompoundShape c = <span class="keyword">new</span> CompoundShape(<span class="number">5</span>);</span><br><span class="line">        c.add(dot);</span><br><span class="line">        compoundShape.add(c);</span><br><span class="line"></span><br><span class="line">        export(circle, compoundShape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">(Shape... shapes)</span> </span>&#123;</span><br><span class="line">        XMLExportVisitor exportVisitor = <span class="keyword">new</span> XMLExportVisitor();</span><br><span class="line">        System.out.println(exportVisitor.export(shapes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OutputDemo.png:</strong>  执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;circle&gt;</span><br><span class="line">    &lt;id&gt;2&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;x&gt;23&lt;&#x2F;x&gt;</span><br><span class="line">    &lt;y&gt;15&lt;&#x2F;y&gt;</span><br><span class="line">    &lt;radius&gt;10&lt;&#x2F;radius&gt;</span><br><span class="line">&lt;&#x2F;circle&gt;</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;compound_graphic&gt;</span><br><span class="line">   &lt;id&gt;4&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;dot&gt;</span><br><span class="line">        &lt;id&gt;1&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;x&gt;10&lt;&#x2F;x&gt;</span><br><span class="line">        &lt;y&gt;55&lt;&#x2F;y&gt;</span><br><span class="line">    &lt;&#x2F;dot&gt;</span><br><span class="line">    &lt;circle&gt;</span><br><span class="line">        &lt;id&gt;2&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;x&gt;23&lt;&#x2F;x&gt;</span><br><span class="line">        &lt;y&gt;15&lt;&#x2F;y&gt;</span><br><span class="line">        &lt;radius&gt;10&lt;&#x2F;radius&gt;</span><br><span class="line">    &lt;&#x2F;circle&gt;</span><br><span class="line">    &lt;rectangle&gt;</span><br><span class="line">        &lt;id&gt;3&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;x&gt;10&lt;&#x2F;x&gt;</span><br><span class="line">        &lt;y&gt;17&lt;&#x2F;y&gt;</span><br><span class="line">        &lt;width&gt;20&lt;&#x2F;width&gt;</span><br><span class="line">        &lt;height&gt;30&lt;&#x2F;height&gt;</span><br><span class="line">    &lt;&#x2F;rectangle&gt;</span><br><span class="line">    &lt;compound_graphic&gt;</span><br><span class="line">       &lt;id&gt;5&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;dot&gt;</span><br><span class="line">            &lt;id&gt;1&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;x&gt;10&lt;&#x2F;x&gt;</span><br><span class="line">            &lt;y&gt;55&lt;&#x2F;y&gt;</span><br><span class="line">        &lt;&#x2F;dot&gt;</span><br><span class="line">    &lt;&#x2F;compound_graphic&gt;</span><br><span class="line">&lt;&#x2F;compound_graphic&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-4"><p><strong>在 PHP 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者模式在 PHP 代码中不太常用， 因为它不仅复杂， 应用范围也比较狭窄。</p><div class="tabs" id="php"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#php-1">概念示例</button></li><li class="tab"><button type="button" data-href="#php-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="php-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 PHP 应用案例。</p><p><strong>index.php:</strong> 概念示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">Visitor</span>\<span class="title">Conceptual</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Component interface declares an `accept` method that should take the base</span></span><br><span class="line"><span class="comment"> * visitor interface as an argument.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Visitor $visitor</span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Each Concrete Component must implement the `accept` method in such a way that</span></span><br><span class="line"><span class="comment"> * it calls the visitor&#x27;s method corresponding to the component&#x27;s class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Note that we&#x27;re calling `visitConcreteComponentA`, which matches the</span></span><br><span class="line"><span class="comment">     * current class name. This way we let the visitor know the class of the</span></span><br><span class="line"><span class="comment">     * component it works with.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Visitor $visitor</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $visitor-&gt;visitConcreteComponentA(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Concrete Components may have special methods that don&#x27;t exist in their</span></span><br><span class="line"><span class="comment">     * base class or interface. The Visitor is still able to use these methods</span></span><br><span class="line"><span class="comment">     * since it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exclusiveMethodOfConcreteComponentA</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Same here: visitConcreteComponentB =&gt; ConcreteComponentB</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">accept</span>(<span class="params">Visitor $visitor</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $visitor-&gt;visitConcreteComponentB(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">specialMethodOfConcreteComponentB</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Visitor Interface declares a set of visiting methods that correspond to</span></span><br><span class="line"><span class="comment"> * component classes. The signature of a visiting method allows the visitor to</span></span><br><span class="line"><span class="comment"> * identify the exact class of the component that it&#x27;s dealing with.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitConcreteComponentA</span>(<span class="params">ConcreteComponentA $element</span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitConcreteComponentB</span>(<span class="params">ConcreteComponentB $element</span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Visitors implement several versions of the same algorithm, which can</span></span><br><span class="line"><span class="comment"> * work with all concrete component classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You can experience the biggest benefit of the Visitor pattern when using it</span></span><br><span class="line"><span class="comment"> * with a complex object structure, such as a Composite tree. In this case, it</span></span><br><span class="line"><span class="comment"> * might be helpful to store some intermediate state of the algorithm while</span></span><br><span class="line"><span class="comment"> * executing visitor&#x27;s methods over various objects of the structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitConcreteComponentA</span>(<span class="params">ConcreteComponentA $element</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $element-&gt;exclusiveMethodOfConcreteComponentA() . <span class="string">&quot; + ConcreteVisitor1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitConcreteComponentB</span>(<span class="params">ConcreteComponentB $element</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $element-&gt;specialMethodOfConcreteComponentB() . <span class="string">&quot; + ConcreteVisitor1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitConcreteComponentA</span>(<span class="params">ConcreteComponentA $element</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $element-&gt;exclusiveMethodOfConcreteComponentA() . <span class="string">&quot; + ConcreteVisitor2\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitConcreteComponentB</span>(<span class="params">ConcreteComponentB $element</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $element-&gt;specialMethodOfConcreteComponentB() . <span class="string">&quot; + ConcreteVisitor2\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code can run visitor operations over any set of elements without</span></span><br><span class="line"><span class="comment"> * figuring out their concrete classes. The accept operation directs a call to</span></span><br><span class="line"><span class="comment"> * the appropriate operation in the visitor object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientCode</span>(<span class="params"><span class="keyword">array</span> $components, Visitor $visitor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">foreach</span> ($components <span class="keyword">as</span> $component) &#123;</span><br><span class="line">        $component-&gt;accept($visitor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$components = [</span><br><span class="line">    <span class="keyword">new</span> ConcreteComponentA(),</span><br><span class="line">    <span class="keyword">new</span> ConcreteComponentB(),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The client code works with all visitors via the base Visitor interface:\n&quot;</span>;</span><br><span class="line">$visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line">clientCode($components, $visitor1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;It allows the same client code to work with different types of visitors:\n&quot;</span>;</span><br><span class="line">$visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line">clientCode($components, $visitor2);</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line"></span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="php-2"><p><strong>真实世界示例</strong></p><p>在本例中， <strong>访问者</strong>模式在已有类层次结构 （ “公司 &gt; 部门 &gt; 雇员”） 中添加了报表功能</p><p>在将访问者构架添加到程序中后， 你就能够在无需修改已有类的前提下将其他类似行为轻松添加到程序中了。</p><p><strong>index.php:</strong> 真实世界示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace RefactoringGuru\Visitor\RealWorld;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Component interface declares a method of accepting visitor objects.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * In this method, a Concrete Component must call a specific Visitor&#x27;s method</span></span><br><span class="line"><span class="comment"> * that has the same parameter type as that component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">accept</span><span class="params">(Visitor $visitor)</span>: string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Company Concrete Component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Department[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $departments;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(string $name, array $departments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;name = $name;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;departments = $departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getName</span><span class="params">()</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getDepartments</span><span class="params">()</span>: array</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">accept</span><span class="params">(Visitor $visitor)</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// See, the Company component must call the visitCompany method. The</span></span><br><span class="line">        <span class="comment">// same principle applies to all components.</span></span><br><span class="line">        <span class="keyword">return</span> $visitor-&gt;visitCompany($<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Department Concrete Component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">implements</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Employee[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $employees;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(string $name, array $employees)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;name = $name;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;employees = $employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getName</span><span class="params">()</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getEmployees</span><span class="params">()</span>: array</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getCost</span><span class="params">()</span>: <span class="keyword">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $cost = <span class="number">0</span>;</span><br><span class="line">        foreach ($<span class="keyword">this</span>-&gt;employees as $employee) &#123;</span><br><span class="line">            $cost += $employee-&gt;getSalary();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">accept</span><span class="params">(Visitor $visitor)</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $visitor-&gt;visitDepartment($<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Employee Concrete Component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $position;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(string $name, string $position, <span class="keyword">int</span> $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;name = $name;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;position = $position;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getName</span><span class="params">()</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getPosition</span><span class="params">()</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">getSalary</span><span class="params">()</span>: <span class="keyword">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $<span class="keyword">this</span>-&gt;salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">accept</span><span class="params">(Visitor $visitor)</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $visitor-&gt;visitEmployee($<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Visitor interface declares a set of visiting methods for each of the</span></span><br><span class="line"><span class="comment"> * Concrete Component classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">visitCompany</span><span class="params">(Company $company)</span>: string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">visitDepartment</span><span class="params">(Department $department)</span>: string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">visitEmployee</span><span class="params">(Employee $employee)</span>: string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Concrete Visitor must provide implementations for every single class of</span></span><br><span class="line"><span class="comment"> * the Concrete Components.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalaryReport</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">visitCompany</span><span class="params">(Company $company)</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        $total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        foreach ($company-&gt;getDepartments() as $department) &#123;</span><br><span class="line">            $total += $department-&gt;getCost();</span><br><span class="line">            $output .= <span class="string">&quot;\n--&quot;</span> . $<span class="keyword">this</span>-&gt;visitDepartment($department);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $output = $company-&gt;getName() .</span><br><span class="line">            <span class="string">&quot; (&quot;</span> . money_format(<span class="string">&quot;%i&quot;</span>, $total) . <span class="string">&quot;)\n&quot;</span> . $output;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">visitDepartment</span><span class="params">(Department $department)</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $output = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        foreach ($department-&gt;getEmployees() as $employee) &#123;</span><br><span class="line">            $output .= <span class="string">&quot;   &quot;</span> . $<span class="keyword">this</span>-&gt;visitEmployee($employee);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $output = $department-&gt;getName() .</span><br><span class="line">            <span class="string">&quot; (&quot;</span> . money_format(<span class="string">&quot;%i&quot;</span>, $department-&gt;getCost()) . <span class="string">&quot;)\n\n&quot;</span> .</span><br><span class="line">            $output;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">visitEmployee</span><span class="params">(Employee $employee)</span>: string</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money_format(<span class="string">&quot;%#6n&quot;</span>, $employee-&gt;getSalary()) .</span><br><span class="line">            <span class="string">&quot; &quot;</span> . $employee-&gt;getName() .</span><br><span class="line">            <span class="string">&quot; (&quot;</span> . $employee-&gt;getPosition() . <span class="string">&quot;)\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$mobileDev = <span class="keyword">new</span> Department(<span class="string">&quot;Mobile Development&quot;</span>, [</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Albert Falmore&quot;</span>, <span class="string">&quot;designer&quot;</span>, <span class="number">100000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Ali Halabay&quot;</span>, <span class="string">&quot;programmer&quot;</span>, <span class="number">100000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Sarah Konor&quot;</span>, <span class="string">&quot;programmer&quot;</span>, <span class="number">90000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Monica Ronaldino&quot;</span>, <span class="string">&quot;QA engineer&quot;</span>, <span class="number">31000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;James Smith&quot;</span>, <span class="string">&quot;QA engineer&quot;</span>, <span class="number">30000</span>),</span><br><span class="line">]);</span><br><span class="line">$techSupport = <span class="keyword">new</span> Department(<span class="string">&quot;Tech Support&quot;</span>, [</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Larry Ulbrecht&quot;</span>, <span class="string">&quot;supervisor&quot;</span>, <span class="number">70000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Elton Pale&quot;</span>, <span class="string">&quot;operator&quot;</span>, <span class="number">30000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Rajeet Kumar&quot;</span>, <span class="string">&quot;operator&quot;</span>, <span class="number">30000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;John Burnovsky&quot;</span>, <span class="string">&quot;operator&quot;</span>, <span class="number">34000</span>),</span><br><span class="line">    <span class="keyword">new</span> Employee(<span class="string">&quot;Sergey Korolev&quot;</span>, <span class="string">&quot;operator&quot;</span>, <span class="number">35000</span>),</span><br><span class="line">]);</span><br><span class="line">$company = <span class="keyword">new</span> Company(<span class="string">&quot;SuperStarDevelopment&quot;</span>, [$mobileDev, $techSupport]);</span><br><span class="line"></span><br><span class="line">setlocale(LC_MONETARY, <span class="string">&#x27;en_US&#x27;</span>);</span><br><span class="line">$report = <span class="keyword">new</span> SalaryReport();</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;Client: I can print a report for a whole company:\n\n&quot;</span>;</span><br><span class="line">echo $company-&gt;accept($report);</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;\nClient: ...or just for a single department:\n\n&quot;</span>;</span><br><span class="line">echo $techSupport-&gt;accept($report);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $export = new JSONExport(); </span></span><br><span class="line"><span class="comment">// echo $company-&gt;accept($export);</span></span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Client: I can print a report for a whole company:</span><br><span class="line"></span><br><span class="line">SuperStarDevelopment (USD550,000.00)</span><br><span class="line"></span><br><span class="line">--Mobile Development (USD351,000.00)</span><br><span class="line"></span><br><span class="line">    $100,000.00 Albert Falmore (designer)</span><br><span class="line">    $100,000.00 Ali Halabay (programmer)</span><br><span class="line">    $ 90,000.00 Sarah Konor (programmer)</span><br><span class="line">    $ 31,000.00 Monica Ronaldino (QA engineer)</span><br><span class="line">    $ 30,000.00 James Smith (QA engineer)</span><br><span class="line"></span><br><span class="line">--Tech Support (USD199,000.00)</span><br><span class="line"></span><br><span class="line">    $ 70,000.00 Larry Ulbrecht (supervisor)</span><br><span class="line">    $ 30,000.00 Elton Pale (operator)</span><br><span class="line">    $ 30,000.00 Rajeet Kumar (operator)</span><br><span class="line">    $ 34,000.00 John Burnovsky (operator)</span><br><span class="line">    $ 35,000.00 Sergey Korolev (operator)</span><br><span class="line"></span><br><span class="line">Client: ...or just for a single department:</span><br><span class="line"></span><br><span class="line">Tech Support (USD199,000.00)</span><br><span class="line"></span><br><span class="line">    $ 70,000.00 Larry Ulbrecht (supervisor)</span><br><span class="line">    $ 30,000.00 Elton Pale (operator)</span><br><span class="line">    $ 30,000.00 Rajeet Kumar (operator)</span><br><span class="line">    $ 34,000.00 John Burnovsky (operator)</span><br><span class="line">    $ 35,000.00 Sergey Korolev (operator)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-5"><p><strong>在 Python 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.py:</strong> 概念示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Component interface declares an `accept` method that should take the</span></span><br><span class="line"><span class="string">    base visitor interface as an argument.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accept</span>(<span class="params">self, visitor: Visitor</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span>(<span class="params">Component</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Each Concrete Component must implement the `accept` method in such a way</span></span><br><span class="line"><span class="string">    that it calls the visitor&#x27;s method corresponding to the component&#x27;s class.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accept</span>(<span class="params">self, visitor: Visitor</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Note that we&#x27;re calling `visitConcreteComponentA`, which matches the</span></span><br><span class="line"><span class="string">        current class name. This way we let the visitor know the class of the</span></span><br><span class="line"><span class="string">        component it works with.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        visitor.visit_concrete_component_a(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exclusive_method_of_concrete_component_a</span>(<span class="params">self</span>) -&gt; str:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Concrete Components may have special methods that don&#x27;t exist in their</span></span><br><span class="line"><span class="string">        base class or interface. The Visitor is still able to use these methods</span></span><br><span class="line"><span class="string">        since it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span>(<span class="params">Component</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Same here: visitConcreteComponentB =&gt; ConcreteComponentB</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accept</span>(<span class="params">self, visitor: Visitor</span>):</span></span><br><span class="line">        visitor.visit_concrete_component_b(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">special_method_of_concrete_component_b</span>(<span class="params">self</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Visitor Interface declares a set of visiting methods that correspond to</span></span><br><span class="line"><span class="string">    component classes. The signature of a visiting method allows the visitor to</span></span><br><span class="line"><span class="string">    identify the exact class of the component that it&#x27;s dealing with.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_a</span>(<span class="params">self, element: ConcreteComponentA</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_b</span>(<span class="params">self, element: ConcreteComponentB</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Concrete Visitors implement several versions of the same algorithm, which can</span></span><br><span class="line"><span class="string">work with all concrete component classes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You can experience the biggest benefit of the Visitor pattern when using it with</span></span><br><span class="line"><span class="string">a complex object structure, such as a Composite tree. In this case, it might be</span></span><br><span class="line"><span class="string">helpful to store some intermediate state of the algorithm while executing</span></span><br><span class="line"><span class="string">visitor&#x27;s methods over various objects of the structure.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span>(<span class="params">Visitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_a</span>(<span class="params">self, element</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;element.exclusive_method_of_concrete_component_a()&#125;</span> + ConcreteVisitor1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_b</span>(<span class="params">self, element</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;element.special_method_of_concrete_component_b()&#125;</span> + ConcreteVisitor1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span>(<span class="params">Visitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_a</span>(<span class="params">self, element</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;element.exclusive_method_of_concrete_component_a()&#125;</span> + ConcreteVisitor2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_b</span>(<span class="params">self, element</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">f&quot;<span class="subst">&#123;element.special_method_of_concrete_component_b()&#125;</span> + ConcreteVisitor2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_code</span>(<span class="params">components: List[Component], visitor: Visitor</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The client code can run visitor operations over any set of elements without</span></span><br><span class="line"><span class="string">    figuring out their concrete classes. The accept operation directs a call to</span></span><br><span class="line"><span class="string">    the appropriate operation in the visitor object.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">for</span> component <span class="keyword">in</span> components:</span><br><span class="line">        component.accept(visitor)</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    components = [ConcreteComponentA(), ConcreteComponentB()]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;The client code works with all visitors via the base Visitor interface:&quot;</span>)</span><br><span class="line">    visitor1 = ConcreteVisitor1()</span><br><span class="line">    client_code(components, visitor1)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;It allows the same client code to work with different types of visitors:&quot;</span>)</span><br><span class="line">    visitor2 = ConcreteVisitor2()</span><br><span class="line">    client_code(components, visitor2)</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line">A + ConcreteVisitor2</span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-6"><p><strong>在 Ruby 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.rb:</strong> 概念示例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Component interface declares an `accept` method that should take the base</span></span><br><span class="line"><span class="comment"># visitor interface as an argument.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Visitor] visitor</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(_visitor)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Each Concrete Component must implement the `accept` method in such a way that</span></span><br><span class="line"><span class="comment"># it calls the visitor&#x27;s method corresponding to the component&#x27;s class.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span> &lt; Component</span></span><br><span class="line">  <span class="comment"># Note that we&#x27;re calling `visitConcreteComponentA`, which matches the current</span></span><br><span class="line">  <span class="comment"># class name. This way we let the visitor know the class of the component it</span></span><br><span class="line">  <span class="comment"># works with.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(visitor)</span></span></span><br><span class="line">    visitor.visit_concrete_component_a(<span class="keyword">self</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Concrete Components may have special methods that don&#x27;t exist in their base</span></span><br><span class="line">  <span class="comment"># class or interface. The Visitor is still able to use these methods since</span></span><br><span class="line">  <span class="comment"># it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exclusive_method_of_concrete_component_a</span></span></span><br><span class="line">    <span class="string">&#x27;A&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Same here: visit_concrete_component_b =&gt; ConcreteComponentB</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span> &lt; Component</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Visitor] visitor</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(visitor)</span></span></span><br><span class="line">    visitor.visit_concrete_component_b(<span class="keyword">self</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">special_method_of_concrete_component_b</span></span></span><br><span class="line">    <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Visitor Interface declares a set of visiting methods that correspond to</span></span><br><span class="line"><span class="comment"># component classes. The signature of a visiting method allows the visitor to</span></span><br><span class="line"><span class="comment"># identify the exact class of the component that it&#x27;s dealing with.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span></span></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [ConcreteComponentA] element</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_a</span><span class="params">(_element)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [ConcreteComponentB] element</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_b</span><span class="params">(_element)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concrete Visitors implement several versions of the same algorithm, which can</span></span><br><span class="line"><span class="comment"># work with all concrete component classes.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can experience the biggest benefit of the Visitor pattern when using it</span></span><br><span class="line"><span class="comment"># with a complex object structure, such as a Composite tree. In this case, it</span></span><br><span class="line"><span class="comment"># might be helpful to store some intermediate state of the algorithm while</span></span><br><span class="line"><span class="comment"># executing visitor&#x27;s methods over various objects of the structure.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> &lt; Visitor</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_a</span><span class="params">(element)</span></span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;element.exclusive_method_of_concrete_component_a&#125;</span> + <span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_b</span><span class="params">(element)</span></span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;element.special_method_of_concrete_component_b&#125;</span> + <span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> &lt; Visitor</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_a</span><span class="params">(element)</span></span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;element.exclusive_method_of_concrete_component_a&#125;</span> + <span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">visit_concrete_component_b</span><span class="params">(element)</span></span></span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;element.special_method_of_concrete_component_b&#125;</span> + <span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client code can run visitor operations over any set of elements without</span></span><br><span class="line"><span class="comment"># figuring out their concrete classes. The accept operation directs a call to</span></span><br><span class="line"><span class="comment"># the appropriate operation in the visitor object.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_code</span><span class="params">(components, visitor)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  components.each <span class="keyword">do</span> <span class="params">|component|</span></span><br><span class="line">    component.accept(visitor)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">components = [ConcreteComponentA.new, ConcreteComponentB.new]</span><br><span class="line"></span><br><span class="line">puts <span class="string">&#x27;The client code works with all visitors via the base Visitor interface:&#x27;</span></span><br><span class="line">visitor1 = ConcreteVisitor1.new</span><br><span class="line">client_code(components, visitor1)</span><br><span class="line"></span><br><span class="line">puts <span class="string">&#x27;It allows the same client code to work with different types of visitors:&#x27;</span></span><br><span class="line">visitor2 = ConcreteVisitor2.new</span><br><span class="line">client_code(components, visitor2)</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line">A + ConcreteVisitor2</span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-7"><p><strong>在 Swift 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><div class="tabs" id="swift"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#swift-1">概念示例</button></li><li class="tab"><button type="button" data-href="#swift-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="swift-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 Swift 应用案例。</p><p><strong>Example.swift:</strong> 概念示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Component interface declares an `accept` method that should take the</span></span><br><span class="line"><span class="comment">/// base visitor interface as an argument.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(<span class="number">_</span> visitor: Visitor)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Each Concrete Component must implement the `accept` method in such a way</span></span><br><span class="line"><span class="comment">/// that it calls the visitor&#x27;s method corresponding to the component&#x27;s class.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span>: <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Note that we&#x27;re calling `visitConcreteComponentA`, which matches the</span></span><br><span class="line">    <span class="comment">/// current class name. This way we let the visitor know the class of the</span></span><br><span class="line">    <span class="comment">/// component it works with.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(<span class="number">_</span> visitor: Visitor)</span></span> &#123;</span><br><span class="line">        visitor.visitConcreteComponentA(element: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Concrete Components may have special methods that don&#x27;t exist in their</span></span><br><span class="line">    <span class="comment">/// base class or interface. The Visitor is still able to use these methods</span></span><br><span class="line">    <span class="comment">/// since it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">exclusiveMethodOfConcreteComponentA</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span>: <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Same here: visitConcreteComponentB =&gt; ConcreteComponentB</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(<span class="number">_</span> visitor: Visitor)</span></span> &#123;</span><br><span class="line">        visitor.visitConcreteComponentB(element: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">specialMethodOfConcreteComponentB</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Visitor Interface declares a set of visiting methods that correspond to</span></span><br><span class="line"><span class="comment">/// component classes. The signature of a visiting method allows the visitor to</span></span><br><span class="line"><span class="comment">/// identify the exact class of the component that it&#x27;s dealing with.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visitConcreteComponentA</span><span class="params">(element: ConcreteComponentA)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visitConcreteComponentB</span><span class="params">(element: ConcreteComponentB)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Concrete Visitors implement several versions of the same algorithm, which</span></span><br><span class="line"><span class="comment">/// can work with all concrete component classes.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// You can experience the biggest benefit of the Visitor pattern when using it</span></span><br><span class="line"><span class="comment">/// with a complex object structure, such as a Composite tree. In this case, it</span></span><br><span class="line"><span class="comment">/// might be helpful to store some intermediate state of the algorithm while</span></span><br><span class="line"><span class="comment">/// executing visitor&#x27;s methods over various objects of the structure.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span>: <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visitConcreteComponentA</span><span class="params">(element: ConcreteComponentA)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(element.exclusiveMethodOfConcreteComponentA() + <span class="string">&quot; + ConcreteVisitor1\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visitConcreteComponentB</span><span class="params">(element: ConcreteComponentB)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(element.specialMethodOfConcreteComponentB() + <span class="string">&quot; + ConcreteVisitor1\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span>: <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visitConcreteComponentA</span><span class="params">(element: ConcreteComponentA)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(element.exclusiveMethodOfConcreteComponentA() + <span class="string">&quot; + ConcreteVisitor2\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visitConcreteComponentB</span><span class="params">(element: ConcreteComponentB)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(element.specialMethodOfConcreteComponentB() + <span class="string">&quot; + ConcreteVisitor2\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The client code can run visitor operations over any set of elements without</span></span><br><span class="line"><span class="comment">/// figuring out their concrete classes. The accept operation directs a call to</span></span><br><span class="line"><span class="comment">/// the appropriate operation in the visitor object.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">clientCode</span><span class="params">(components: [Component], visitor: Visitor)</span></span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        components.forEach(&#123; $<span class="number">0</span>.accept(visitor) &#125;)</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Let&#x27;s see how it all works together.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitorConceptual</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> components: [<span class="type">Component</span>] = [<span class="type">ConcreteComponentA</span>(), <span class="type">ConcreteComponentB</span>()]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The client code works with all visitors via the base Visitor interface:\n&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> visitor1 = <span class="type">ConcreteVisitor1</span>()</span><br><span class="line">        <span class="type">Client</span>.clientCode(components: components, visitor: visitor1)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nIt allows the same client code to work with different types of visitors:\n&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> visitor2 = <span class="type">ConcreteVisitor2</span>()</span><br><span class="line">        <span class="type">Client</span>.clientCode(components: components, visitor: visitor2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line"></span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line"></span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line"></span><br><span class="line">A + ConcreteVisitor2</span><br><span class="line"></span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="swift-2"><p><strong>真实世界示例</strong></p><p><strong>Example.swift:</strong> 真实世界示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Notification</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(visitor: NotificationPolicy)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> emailOfSender: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Email&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SMS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> phoneNumberOfSender: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;SMS&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Push</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> usernameOfSender: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Push&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Email</span>: <span class="title">Notification</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(visitor: NotificationPolicy)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.isTurnedOn(<span class="keyword">for</span>: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SMS</span>: <span class="title">Notification</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(visitor: NotificationPolicy)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.isTurnedOn(<span class="keyword">for</span>: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Push</span>: <span class="title">Notification</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(visitor: NotificationPolicy)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visitor.isTurnedOn(<span class="keyword">for</span>: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">NotificationPolicy</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> email: Email)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> sms: SMS)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> push: Push)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NightPolicyVisitor</span>: <span class="title">NotificationPolicy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> email: Email)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> sms: SMS)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> push: Push)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Night Policy Visitor&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultPolicyVisitor</span>: <span class="title">NotificationPolicy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> email: Email)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> sms: SMS)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> push: Push)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Default Policy Visitor&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackListVisitor</span>: <span class="title">NotificationPolicy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bannedEmails = [<span class="type">String</span>]()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bannedPhones = [<span class="type">String</span>]()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bannedUsernames = [<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(emails: [<span class="type">String</span>], phones: [<span class="type">String</span>], usernames: [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.bannedEmails = emails</span><br><span class="line">        <span class="keyword">self</span>.bannedPhones = phones</span><br><span class="line">        <span class="keyword">self</span>.bannedUsernames = usernames</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> email: Email)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bannedEmails.<span class="built_in">contains</span>(email.emailOfSender)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> sms: SMS)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bannedPhones.<span class="built_in">contains</span>(sms.phoneNumberOfSender)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isTurnedOn</span><span class="params">(<span class="keyword">for</span> push: Push)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bannedUsernames.<span class="built_in">contains</span>(push.usernameOfSender)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Black List Visitor&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitorRealWorld</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testVisitorRealWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> email = <span class="type">Email</span>(emailOfSender: <span class="string">&quot;some@email.com&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> sms = <span class="type">SMS</span>(phoneNumberOfSender: <span class="string">&quot;+3806700000&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> push = <span class="type">Push</span>(usernameOfSender: <span class="string">&quot;Spammer&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> notifications: [<span class="type">Notification</span>] = [email, sms, push]</span><br><span class="line"></span><br><span class="line">        clientCode(handle: notifications, with: <span class="type">DefaultPolicyVisitor</span>())</span><br><span class="line"></span><br><span class="line">        clientCode(handle: notifications, with: <span class="type">NightPolicyVisitor</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">VisitorRealWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Client code traverses notifications with visitors and checks whether a</span></span><br><span class="line">    <span class="comment">/// notification is in a blacklist and should be shown in accordance with a</span></span><br><span class="line">    <span class="comment">/// current SilencePolicy</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clientCode</span><span class="params">(handle notifications: [Notification], with policy: NotificationPolicy)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> blackList = createBlackList()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nClient: Using \(policy.description) and \(blackList.description)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        notifications.forEach &#123; item <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">guard</span> !item.accept(visitor: blackList) <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\tWARNING: &quot;</span> + item.description + <span class="string">&quot; is in a black list&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> item.accept(visitor: policy) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + item.description + <span class="string">&quot; notification will be shown&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + item.description + <span class="string">&quot; notification will be silenced&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">createBlackList</span><span class="params">()</span></span> -&gt; <span class="type">BlackListVisitor</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">BlackListVisitor</span>(emails: [<span class="string">&quot;banned@email.com&quot;</span>],</span><br><span class="line">                                phones: [<span class="string">&quot;000000000&quot;</span>, <span class="string">&quot;1234325232&quot;</span>],</span><br><span class="line">                                usernames: [<span class="string">&quot;Spammer&quot;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client: Using Default Policy Visitor and Black List Visitor</span><br><span class="line">    Email notification will be shown</span><br><span class="line">    SMS notification will be shown</span><br><span class="line">    WARNING: Push is in a black list</span><br><span class="line"></span><br><span class="line">Client: Using Night Policy Visitor and Black List Visitor</span><br><span class="line">    Email notification will be silenced</span><br><span class="line">    SMS notification will be shown</span><br><span class="line">    WARNING: Push is in a black list</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-8"><p><strong>在 TypeScript 中使用模式</strong></p><p><strong>复杂度：</strong> ★★★</p><p><strong>流行度：</strong> ★☆☆</p><p><strong>使用示例：</strong> 访问者不是常用的设计模式， 因为它不仅复杂， 应用范围也比较狭窄。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>访问者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>index.ts:</strong> 概念示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Component interface declares an `accept` method that should take the base</span></span><br><span class="line"><span class="comment"> * visitor interface as an argument.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Component &#123;</span><br><span class="line">    accept(visitor: Visitor): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Each Concrete Component must implement the `accept` method in such a way that</span></span><br><span class="line"><span class="comment"> * it calls the visitor&#x27;s method corresponding to the component&#x27;s class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span> <span class="title">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Note that we&#x27;re calling `visitConcreteComponentA`, which matches the</span></span><br><span class="line"><span class="comment">     * current class name. This way we let the visitor know the class of the</span></span><br><span class="line"><span class="comment">     * component it works with.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> accept(visitor: Visitor): <span class="built_in">void</span> &#123;</span><br><span class="line">        visitor.visitConcreteComponentA(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Concrete Components may have special methods that don&#x27;t exist in their</span></span><br><span class="line"><span class="comment">     * base class or interface. The Visitor is still able to use these methods</span></span><br><span class="line"><span class="comment">     * since it&#x27;s aware of the component&#x27;s concrete class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> exclusiveMethodOfConcreteComponentA(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentB</span> <span class="title">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Same here: visitConcreteComponentB =&gt; ConcreteComponentB</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> accept(visitor: Visitor): <span class="built_in">void</span> &#123;</span><br><span class="line">        visitor.visitConcreteComponentB(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> specialMethodOfConcreteComponentB(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Visitor Interface declares a set of visiting methods that correspond to</span></span><br><span class="line"><span class="comment"> * component classes. The signature of a visiting method allows the visitor to</span></span><br><span class="line"><span class="comment"> * identify the exact class of the component that it&#x27;s dealing with.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Visitor &#123;</span><br><span class="line">    visitConcreteComponentA(element: ConcreteComponentA): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    visitConcreteComponentB(element: ConcreteComponentB): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Visitors implement several versions of the same algorithm, which can</span></span><br><span class="line"><span class="comment"> * work with all concrete component classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You can experience the biggest benefit of the Visitor pattern when using it</span></span><br><span class="line"><span class="comment"> * with a complex object structure, such as a Composite tree. In this case, it</span></span><br><span class="line"><span class="comment"> * might be helpful to store some intermediate state of the algorithm while</span></span><br><span class="line"><span class="comment"> * executing visitor&#x27;s methods over various objects of the structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="title">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> visitConcreteComponentA(element: ConcreteComponentA): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;element.exclusiveMethodOfConcreteComponentA()&#125;</span> + ConcreteVisitor1`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> visitConcreteComponentB(element: ConcreteComponentB): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;element.specialMethodOfConcreteComponentB()&#125;</span> + ConcreteVisitor1`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="title">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> visitConcreteComponentA(element: ConcreteComponentA): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;element.exclusiveMethodOfConcreteComponentA()&#125;</span> + ConcreteVisitor2`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> visitConcreteComponentB(element: ConcreteComponentB): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;element.specialMethodOfConcreteComponentB()&#125;</span> + ConcreteVisitor2`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code can run visitor operations over any set of elements without</span></span><br><span class="line"><span class="comment"> * figuring out their concrete classes. The accept operation directs a call to</span></span><br><span class="line"><span class="comment"> * the appropriate operation in the visitor object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientCode</span>(<span class="params">components: Component[], visitor: Visitor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> component <span class="keyword">of</span> components) &#123;</span><br><span class="line">        component.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">    <span class="keyword">new</span> ConcreteComponentA(),</span><br><span class="line">    <span class="keyword">new</span> ConcreteComponentB(),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;The client code works with all visitors via the base Visitor interface:&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line">clientCode(components, visitor1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;It allows the same client code to work with different types of visitors:&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line">clientCode(components, visitor2);</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The client code works with all visitors via the base Visitor interface:</span><br><span class="line">A + ConcreteVisitor1</span><br><span class="line">B + ConcreteVisitor1</span><br><span class="line"></span><br><span class="line">It allows the same client code to work with different types of visitors:</span><br><span class="line">A + ConcreteVisitor2</span><br><span class="line">B + ConcreteVisitor2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-9"><p><strong>概念示例</strong></p><p>访问者模式允许你在结构体中添加行为， 而又不会对结构体造成实际变更。 假设你是一个代码库的维护者， 代码库中包含不同的形状结构体， 如：</p><ul><li>方形</li><li>圆形</li><li>三角形</li></ul><p>上述每个形状结构体都实现了通用形状接口。</p><p>在公司员工开始使用你维护的代码库时， 你就会被各种功能请求给淹没。 让我们来看看其中比较简单的请求： 有个团队请求你在形状结构体中添加 <code>get­Area</code>获取面积行为。</p><p>解决这一问题的办法有很多。</p><p>第一个选项便是将 <code>get­Area</code>方法直接添加至形状接口， 然后在各个形状结构体中进行实现。 这似乎是比较好的解决方案， 但其代价也比较高。 作为代码库的管理员， 相信你也不想在每次有人要求添加另外一种行为时就去冒着风险改动自己的宝贝代码。 不过， 你也一定想让其他团队的人还是用一用自己的代码库。</p><p>第二个选项是请求功能的团队自行实现行为。 然而这并不总是可行， 因为行为可能会依赖于私有代码。</p><p>第三个方法就是使用访问者模式来解决上述问题。 首先定义一个如下访问者接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> visitor <span class="keyword">interface</span> &#123;</span><br><span class="line">    visitForSquare(square)</span><br><span class="line">    visitForCircle(circle)</span><br><span class="line">    visitForTriangle(triangle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>visit­For­Square­(square)</code> 、  <code>visit­For­Circle­(circle)</code>以及 <code>visit­For­Triangle­(triangle)</code>函数来为方形、 圆形以及三角形添加相应的功能。</p><p>你可能在想， 为什么我们不再访问者接口里面使用单一的 <code>visit­(shape)</code>方法呢？ 这是因为 Go 语言不支持方法重载， 所以你无法以相同名称、 不同参数的方式来使用方法。</p><p>好了， 第二项重要的工作是将 <code>accept</code>接受方法添加至形状接口中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(v visitor)</span></span></span><br></pre></td></tr></table></figure><p>所有形状结构体都需要定义此方法， 类似于：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(obj *square)</span> <span class="title">accept</span><span class="params">(v visitor)</span></span>&#123;</span><br><span class="line">    v.visitForSquare(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等等， 我刚才是不是提到过， 我们并不想修改现有的形状结构体？ 很不幸， 在使用访问者模式时， 我们必须要修改形状结构体。 但这样的修改只需要进行一次。</p><p>如果添加任何其他行为， 比如 <code>get­Num­Sides</code>获取边数和 <code>get­Middle­Coordinates</code>获取中点坐标 ， 我们将使用相同的 <code>accept­(v visitor)</code>函数， 而无需对形状结构体进行进一步的修改。</p><p>最后， 形状结构体只需要修改一次， 并且所有未来针对不同行为的请求都可以使用相同的 accept 函数来进行处理。 如果团队成员请求 <code>get­Area</code>行为， 我们只需简单地定义访问者接口的具体实现， 并在其中编写面积的计算逻辑即可。</p><p><strong>shape.go:</strong> 元件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    getType() <span class="keyword">string</span></span><br><span class="line">    accept(visitor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>square.go:</strong> 具体元件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> square <span class="keyword">struct</span> &#123;</span><br><span class="line">    side <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *square)</span> <span class="title">accept</span><span class="params">(v visitor)</span></span> &#123;</span><br><span class="line">    v.visitForSquare(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *square)</span> <span class="title">getType</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Square&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>circle.go:</strong> 具体元件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    radius <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *circle)</span> <span class="title">accept</span><span class="params">(v visitor)</span></span> &#123;</span><br><span class="line">    v.visitForCircle(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *circle)</span> <span class="title">getType</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Circle&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>rectangle.go:</strong> 具体元件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    l <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *rectangle)</span> <span class="title">accept</span><span class="params">(v visitor)</span></span> &#123;</span><br><span class="line">    v.visitForrectangle(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *rectangle)</span> <span class="title">getType</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;rectangle&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>visitor.go:</strong> 访问者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> visitor <span class="keyword">interface</span> &#123;</span><br><span class="line">    visitForSquare(*square)</span><br><span class="line">    visitForCircle(*circle)</span><br><span class="line">    visitForrectangle(*rectangle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>areaCalculator.go:</strong> 具体访问者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> areaCalculator <span class="keyword">struct</span> &#123;</span><br><span class="line">    area <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *areaCalculator)</span> <span class="title">visitForSquare</span><span class="params">(s *square)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Calculate area for square.</span></span><br><span class="line">    <span class="comment">// Then assign in to the area instance variable.</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Calculating area for square&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *areaCalculator)</span> <span class="title">visitForCircle</span><span class="params">(s *circle)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Calculating area for circle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *areaCalculator)</span> <span class="title">visitForrectangle</span><span class="params">(s *rectangle)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Calculating area for rectangle&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>middleCoordinates.go:</strong> 具体访问者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> middleCoordinates <span class="keyword">struct</span> &#123;</span><br><span class="line">    x <span class="keyword">int</span></span><br><span class="line">    y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *middleCoordinates)</span> <span class="title">visitForSquare</span><span class="params">(s *square)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Calculate middle point coordinates for square.</span></span><br><span class="line">    <span class="comment">// Then assign in to the x and y instance variable.</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Calculating middle point coordinates for square&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *middleCoordinates)</span> <span class="title">visitForCircle</span><span class="params">(c *circle)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Calculating middle point coordinates for circle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *middleCoordinates)</span> <span class="title">visitForrectangle</span><span class="params">(t *rectangle)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Calculating middle point coordinates for rectangle&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.go:</strong> 客户端代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    square := &amp;square&#123;side: <span class="number">2</span>&#125;</span><br><span class="line">    circle := &amp;circle&#123;radius: <span class="number">3</span>&#125;</span><br><span class="line">    rectangle := &amp;rectangle&#123;l: <span class="number">2</span>, b: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">    areaCalculator := &amp;areaCalculator&#123;&#125;</span><br><span class="line"></span><br><span class="line">    square.accept(areaCalculator)</span><br><span class="line">    circle.accept(areaCalculator)</span><br><span class="line">    rectangle.accept(areaCalculator)</span><br><span class="line"></span><br><span class="line">    fmt.Println()</span><br><span class="line">    middleCoordinates := &amp;middleCoordinates&#123;&#125;</span><br><span class="line">    square.accept(middleCoordinates)</span><br><span class="line">    circle.accept(middleCoordinates)</span><br><span class="line">    rectangle.accept(middleCoordinates)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Calculating area for square</span><br><span class="line">Calculating area for circle</span><br><span class="line">Calculating area for rectangle</span><br><span class="line"></span><br><span class="line">Calculating middle point coordinates for square</span><br><span class="line">Calculating middle point coordinates for circle</span><br><span class="line">Calculating middle point coordinates for rectangle</span><br></pre></td></tr></table></figure><p><em>根据： <a href="https://golangbyexample.com/visitor-design-pattern-go/">Golang By Example</a></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/visitor&quot;&gt;https://refactoringguru.cn/design-patterns/visitor&lt;/a&gt;&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>行为模式-模板方法模式</title>
    <link href="http://wangyangyangisme.github.io/posts/d2372188/"/>
    <id>http://wangyangyangisme.github.io/posts/d2372188/</id>
    <published>2021-05-04T13:10:54.000Z</published>
    <updated>2021-05-04T13:10:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/template-method">https://refactoringguru.cn/design-patterns/template-method</a></p></blockquote><h1 id="行为模式-模板方法模式"><a href="#行为模式-模板方法模式" class="headerlink" title="行为模式-模板方法模式"></a>行为模式-模板方法模式</h1><p><strong>亦称：</strong> Template Method</p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>模板方法模式</strong>是一种行为设计模式， 它在超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/template-method.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你正在开发一款分析公司文档的数据挖掘程序。 用户需要向程序输入各种格式 （PDF、 DOC 或 CSV） 的文档， 程序则会试图从这些文件中抽取有意义的数据， 并以统一的格式将其返回给用户。</p><p>该程序的首个版本仅支持 DOC 文件。 在接下来的一个版本中， 程序能够支持 CSV 文件。 一个月后， 你 “教会” 了程序从 PDF 文件中抽取数据。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/problem-template-method.png" alt="数据挖掘类中包含许多重复代码。"></p><p>一段时间后， 你发现这三个类中包含许多相似代码。 尽管这些类处理不同数据格式的代码完全不同， 但数据处理和分析的代码却几乎完全一样。 如果能在保持算法结构完整的情况下去除重复代码， 这难道不是一件很棒的事情吗？</p><p>还有另一个与使用这些类的客户端代码相关的问题： 客户端代码中包含许多条件语句， 以根据不同的处理对象类型选择合适的处理过程。 如果所有处理数据的类都拥有相同的接口或基类， 那么你就可以去除客户端代码中的条件语句， 转而使用多态机制来在处理对象上调用函数。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>模板方法模式建议将算法分解为一系列步骤， 然后将这些步骤改写为方法， 最后在 “模板方法” 中依次调用这些方法。 步骤可以是 <code>抽象</code>的， 也可以有一些默认的实现。 为了能够使用算法， 客户端需要自行提供子类并实现所有的抽象步骤。 如有必要还需重写一些步骤 （但这一步中不包括模板方法自身）。</p><p>让我们考虑如何在数据挖掘应用中实现上述方案。 我们可为图中的三个解析算法创建一个基类， 该类将定义调用了一系列不同文档处理步骤的模板方法。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/solution-zh-template-method.png" alt="模板方法将算法分解为步骤， 并允许子类重写这些步骤， 而非重写实际的模板方法。"></p><p>首先， 我们将所有步骤声明为 <code>抽象</code>类型， 强制要求子类自行实现这些方法。 在我们的例子中， 子类中已有所有必要的实现， 因此我们只需调整这些方法的签名， 使之与超类的方法匹配即可。</p><p>现在， 让我们看看如何去除重复代码。 对于不同的数据格式， 打开和关闭文件以及抽取和解析数据的代码都不同， 因此无需修改这些方法。 但分析原始数据和生成报告等其他步骤的实现方式非常相似， 因此可将其提取到基类中， 以让子类共享这些代码。</p><p>正如你所看到的那样， 我们有两种类型的步骤：</p><ul><li><em>抽象步骤</em>必须由各个子类来实现</li><li><em>可选步骤</em>已有一些默认实现， 但仍可在需要时进行重写</li></ul><p>还有另一种名为<em>钩子</em>的步骤。 <em>钩子</em>是内容为空的可选步骤。 即使不重写钩子， 模板方法也能工作。 钩子通常放置在算法重要步骤的前后， 为子类提供额外的算法扩展点。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/live-example-template-method.png" alt="可对典型的建筑方案进行微调以更好地满足客户需求。"></p><p>模板方法可用于建造大量房屋。 标准房屋建造方案中可提供几个扩展点， 允许潜在房屋业主调整成品房屋的部分细节。</p><p>每个建造步骤 （例如打地基、 建造框架、 建造墙壁和安装水电管线等） 都能进行微调， 这使得成品房屋会略有不同。</p><h2 id="模板方法模式结构"><a href="#模板方法模式结构" class="headerlink" title="模板方法模式结构"></a>模板方法模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/structure-indexed-template-method.png" alt=""></p><ol><li><strong>抽象类</strong> （Abstract­Class） 会声明作为算法步骤的方法， 以及依次调用它们的实际模板方法。 算法步骤可以被声明为 <code>抽象</code>类型， 也可以提供一些默认实现。</li><li><strong>具体类</strong> （Concrete­Class） 可以重写所有步骤， 但不能重写模板方法自身。</li></ol><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>本例中的<strong>模板方法</strong>模式为一款简单策略游戏中人工智能的不同分支提供 “框架”。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/example-template-method.png" alt="一款简单游戏的 AI 类。"></p><p>游戏中所有的种族都有几乎同类的单位和建筑。 因此你可以在不同的种族上复用相同的 AI 结构， 同时还需要具备重写一些细节的能力。 通过这种方式， 你可以重写半兽人的 AI 使其更富攻击性， 也可以让人类侧重防守， 还可以禁止怪物建造建筑。 在游戏中新增种族需要创建新的 AI 子类， 还需要重写 AI 基类中所声明的默认方法。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类定义了一个模板方法，其中通常会包含某个由抽象原语操作调用组成的算</span></span><br><span class="line"><span class="comment">// 法框架。具体子类会实现这些操作，但是不会对模板方法做出修改。</span></span><br><span class="line"><span class="keyword">class</span> GameAI <span class="keyword">is</span></span><br><span class="line">    <span class="comment">// 模板方法定义了某个算法的框架。</span></span><br><span class="line">    method turn() <span class="keyword">is</span></span><br><span class="line">        collectResources()</span><br><span class="line">        buildStructures()</span><br><span class="line">        buildUnits()</span><br><span class="line">        attack()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 某些步骤可在基类中直接实现。</span></span><br><span class="line">    method collectResources() <span class="keyword">is</span></span><br><span class="line">        foreach (s <span class="keyword">in</span> this.builtStructures) <span class="keyword">do</span></span><br><span class="line">            s.collect()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 某些可定义为抽象类型。</span></span><br><span class="line">    <span class="keyword">abstract</span> method buildStructures()</span><br><span class="line">    <span class="keyword">abstract</span> method buildUnits()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个类可包含多个模板方法。</span></span><br><span class="line">    method attack() <span class="keyword">is</span></span><br><span class="line">        enemy = closestEnemy()</span><br><span class="line">        <span class="keyword">if</span> (enemy == null)</span><br><span class="line">            sendScouts(map.center)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sendWarriors(enemy.position)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> method sendScouts(position)</span><br><span class="line">    <span class="keyword">abstract</span> method sendWarriors(position)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类必须实现基类中的所有抽象操作，但是它们不能重写模板方法自身。</span></span><br><span class="line"><span class="keyword">class</span> OrcsAI extends GameAI <span class="keyword">is</span></span><br><span class="line">    method buildStructures() <span class="keyword">is</span></span><br><span class="line">        <span class="keyword">if</span> (there are some resources) <span class="keyword">then</span></span><br><span class="line">            <span class="comment">// 建造农场，接着是谷仓，然后是要塞。</span></span><br><span class="line"></span><br><span class="line">    method buildUnits() <span class="keyword">is</span></span><br><span class="line">        <span class="keyword">if</span> (there are plenty <span class="keyword">of</span> resources) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> (there are no scouts)</span><br><span class="line">                <span class="comment">// 建造苦工，将其加入侦查编组。</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 建造兽族步兵，将其加入战士编组。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    method sendScouts(position) <span class="keyword">is</span></span><br><span class="line">        <span class="keyword">if</span> (scouts.length &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="comment">// 将侦查编组送到指定位置。</span></span><br><span class="line"></span><br><span class="line">    method sendWarriors(position) <span class="keyword">is</span></span><br><span class="line">        <span class="keyword">if</span> (warriors.length &gt; <span class="number">5</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="comment">// 将战斗编组送到指定位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类可以重写部分默认的操作。</span></span><br><span class="line"><span class="keyword">class</span> MonstersAI extends GameAI <span class="keyword">is</span></span><br><span class="line">    method collectResources() <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 怪物不会采集资源。</span></span><br><span class="line"></span><br><span class="line">    method buildStructures() <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 怪物不会建造建筑。</span></span><br><span class="line"></span><br><span class="line">    method buildUnits() <span class="keyword">is</span></span><br><span class="line">        <span class="comment">// 怪物不会建造单位。</span></span><br></pre></td></tr></table></figure><h2 id="模板方法模式适合应用场景"><a href="#模板方法模式适合应用场景" class="headerlink" title="模板方法模式适合应用场景"></a>模板方法模式适合应用场景</h2><p><strong>当你只希望客户端扩展某个特定算法步骤， 而不是整个算法或其结构时， 可使用模板方法模式。</strong></p><p>模板方法将整个算法转换为一系列独立的步骤， 以便子类能对其进行扩展， 同时还可让超类中所定义的结构保持完整。</p><p><strong>当多个类的算法除一些细微不同之外几乎完全一样时， 你可使用该模式。 但其后果就是， 只要算法发生变化， 你就可能需要修改所有的类。</strong></p><p>在将算法转换为模板方法时， 你可将相似的实现步骤提取到超类中以去除重复代码。 子类间各不同的代码可继续保留在子类中。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>分析目标算法， 确定能否将其分解为多个步骤。 从所有子类的角度出发， 考虑哪些步骤能够通用， 哪些步骤各不相同。</li><li>创建抽象基类并声明一个模板方法和代表算法步骤的一系列抽象方法。 在模板方法中根据算法结构依次调用相应步骤。 可用 <code>final</code>最终修饰模板方法以防止子类对其进行重写。</li><li>虽然可将所有步骤全都设为抽象类型， 但默认实现可能会给部分步骤带来好处， 因为子类无需实现那些方法。</li><li>可考虑在算法的关键步骤之间添加钩子。</li><li>为每个算法变体新建一个具体子类， 它<em>必须</em>实现所有的抽象步骤， 也<em>可以</em>重写部分可选步骤。</li></ol><h2 id="模板方法模式优缺点"><a href="#模板方法模式优缺点" class="headerlink" title="模板方法模式优缺点"></a>模板方法模式优缺点</h2><p>优点</p><ul><li>你可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小。</li><li>你可将重复代码提取到一个超类中。</li></ul><p>缺点</p><ul><li>部分客户端可能会受到算法框架的限制。</li><li>通过子类抑制默认步骤实现可能会导致违反_里氏替换原则_。</li><li>模板方法中的步骤越多， 其维护工作就可能会越困难。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/factory-method">工厂方法模式</a>是<a href="https://refactoringguru.cn/design-patterns/template-method">模板方法模式</a>的一种特殊形式。 同时， <em>工厂方法</em>可以作为一个大型<em>模板方法</em>中的一个步骤。</li><li><a href="https://refactoringguru.cn/design-patterns/template-method">模板方法</a>基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 <a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a>基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 <em>模板方法</em>在类层次上运作， 因此它是静态的。 <em>策略</em>在对象层次上运作， 因此允许在运行时切换行为。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>模版方法</strong>是一种行为设计模式， 它在基类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">C#</button></li><li class="tab"><button type="button" data-href="#tags-2">C++</button></li><li class="tab"><button type="button" data-href="#tags-3">JAVA</button></li><li class="tab"><button type="button" data-href="#tags-4">PHP</button></li><li class="tab"><button type="button" data-href="#tags-5">Python</button></li><li class="tab"><button type="button" data-href="#tags-6">Ruby</button></li><li class="tab"><button type="button" data-href="#tags-7">Swift</button></li><li class="tab"><button type="button" data-href="#tags-8">TypeScrit</button></li><li class="tab"><button type="button" data-href="#tags-9">Golang</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><p><strong>在 C# 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 C# 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>模板方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>Program.cs:</strong> 概念示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru.DesignPatterns.TemplateMethod.Conceptual</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The Abstract Class defines a template method that contains a skeleton of</span></span><br><span class="line">    <span class="comment">// some algorithm, composed of calls to (usually) abstract primitive</span></span><br><span class="line">    <span class="comment">// operations.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Concrete subclasses should implement these operations, but leave the</span></span><br><span class="line">    <span class="comment">// template method itself intact.</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The template method defines the skeleton of an algorithm.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TemplateMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.BaseOperation1();</span><br><span class="line">            <span class="keyword">this</span>.RequiredOperations1();</span><br><span class="line">            <span class="keyword">this</span>.BaseOperation2();</span><br><span class="line">            <span class="keyword">this</span>.Hook1();</span><br><span class="line">            <span class="keyword">this</span>.RequiredOperation2();</span><br><span class="line">            <span class="keyword">this</span>.BaseOperation3();</span><br><span class="line">            <span class="keyword">this</span>.Hook2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// These operations already have implementations.</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">BaseOperation1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;AbstractClass says: I am doing the bulk of the work&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">BaseOperation2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;AbstractClass says: But I let subclasses override some operations&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">BaseOperation3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;AbstractClass says: But I am doing the bulk of the work anyway&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// These operations have to be implemented in subclasses.</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">RequiredOperations1</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">RequiredOperation2</span>(<span class="params"></span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not</span></span><br><span class="line">        <span class="comment">// mandatory since the hooks already have default (but empty)</span></span><br><span class="line">        <span class="comment">// implementation. Hooks provide additional extension points in some</span></span><br><span class="line">        <span class="comment">// crucial places of the algorithm.</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hook1</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hook2</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concrete classes have to implement all abstract operations of the base</span></span><br><span class="line">    <span class="comment">// class. They can also override some operations with a default</span></span><br><span class="line">    <span class="comment">// implementation.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteClass1</span> : <span class="title">AbstractClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RequiredOperations1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteClass1 says: Implemented Operation1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RequiredOperation2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteClass1 says: Implemented Operation2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Usually, concrete classes override only a fraction of base class&#x27;</span></span><br><span class="line">    <span class="comment">// operations.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteClass2</span> : <span class="title">AbstractClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RequiredOperations1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteClass2 says: Implemented Operation1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">RequiredOperation2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteClass2 says: Implemented Operation2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Hook1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteClass2 says: Overridden Hook1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The client code calls the template method to execute the algorithm.</span></span><br><span class="line">        <span class="comment">// Client code does not have to know the concrete class of an object it</span></span><br><span class="line">        <span class="comment">// works with, as long as it works with objects through the interface of</span></span><br><span class="line">        <span class="comment">// their base class.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClientCode</span>(<span class="params">AbstractClass abstractClass</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            abstractClass.TemplateMethod();</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Same client code can work with different subclasses:&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Client.ClientCode(<span class="keyword">new</span> ConcreteClass1());</span><br><span class="line"></span><br><span class="line">            Console.Write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Same client code can work with different subclasses:&quot;</span>);</span><br><span class="line">            Client.ClientCode(<span class="keyword">new</span> ConcreteClass2());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><p><strong>在 C++ 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 C++ 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>模板方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.cc:</strong> 概念示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Abstract Class defines a template method that contains a skeleton of some</span></span><br><span class="line"><span class="comment"> * algorithm, composed of calls to (usually) abstract primitive operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Concrete subclasses should implement these operations, but leave the template</span></span><br><span class="line"><span class="comment"> * method itself intact.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> &#123;</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The template method defines the skeleton of an algorithm.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">TemplateMethod</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;BaseOperation1();</span><br><span class="line">    <span class="keyword">this</span>-&gt;RequiredOperations1();</span><br><span class="line">    <span class="keyword">this</span>-&gt;BaseOperation2();</span><br><span class="line">    <span class="keyword">this</span>-&gt;Hook1();</span><br><span class="line">    <span class="keyword">this</span>-&gt;RequiredOperation2();</span><br><span class="line">    <span class="keyword">this</span>-&gt;BaseOperation3();</span><br><span class="line">    <span class="keyword">this</span>-&gt;Hook2();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * These operations already have implementations.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BaseOperation1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AbstractClass says: I am doing the bulk of the work\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BaseOperation2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AbstractClass says: But I let subclasses override some operations\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BaseOperation3</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AbstractClass says: But I am doing the bulk of the work anyway\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * These operations have to be implemented in subclasses.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RequiredOperations1</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RequiredOperation2</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not mandatory</span></span><br><span class="line"><span class="comment">   * since the hooks already have default (but empty) implementation. Hooks</span></span><br><span class="line"><span class="comment">   * provide additional extension points in some crucial places of the</span></span><br><span class="line"><span class="comment">   * algorithm.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hook1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Hook2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete classes have to implement all abstract operations of the base class.</span></span><br><span class="line"><span class="comment"> * They can also override some operations with a default implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> :</span> <span class="keyword">public</span> AbstractClass &#123;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RequiredOperations1</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteClass1 says: Implemented Operation1\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RequiredOperation2</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteClass1 says: Implemented Operation2\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Usually, concrete classes override only a fraction of base class&#x27; operations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> :</span> <span class="keyword">public</span> AbstractClass &#123;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RequiredOperations1</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteClass2 says: Implemented Operation1\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RequiredOperation2</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteClass2 says: Implemented Operation2\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Hook1</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteClass2 says: Overridden Hook1\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code calls the template method to execute the algorithm. Client</span></span><br><span class="line"><span class="comment"> * code does not have to know the concrete class of an object it works with, as</span></span><br><span class="line"><span class="comment"> * long as it works with objects through the interface of their base class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">(AbstractClass *class_)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  class_-&gt;TemplateMethod();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Same client code can work with different subclasses:\n&quot;</span>;</span><br><span class="line">  ConcreteClass1 *concreteClass1 = <span class="keyword">new</span> ConcreteClass1;</span><br><span class="line">  ClientCode(concreteClass1);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Same client code can work with different subclasses:\n&quot;</span>;</span><br><span class="line">  ConcreteClass2 *concreteClass2 = <span class="keyword">new</span> ConcreteClass2;</span><br><span class="line">  ClientCode(concreteClass2);</span><br><span class="line">  <span class="keyword">delete</span> concreteClass1;</span><br><span class="line">  <span class="keyword">delete</span> concreteClass2;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-3"><p><strong>在 Java 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 Java 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p>这里是一些核心 Java 程序库中模版方法的示例：</p><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html"><code>java.io.InputStream</code></a>、 <a href="http://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"><code>java.io.OutputStream</code></a>、 <a href="http://docs.oracle.com/javase/8/docs/api/java/io/Reader.html"><code>java.io.Reader</code></a> 和 <a href="http://docs.oracle.com/javase/8/docs/api/java/io/Writer.html"><code>java.io.Writer</code></a> 的所有非抽象方法。</li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html"><code>java.util.AbstractList</code></a>、 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html"><code>java.util.AbstractSet</code></a> 和 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html"><code>java.util.AbstractMap</code></a> 的所有非抽象方法。</li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"><code>javax.servlet.http.HttpServlet</code></a>， 所有默认发送 HTTP 405 “方法不允许” 错误响应的 <code>do­XXX()</code>方法。 你可随时对其进行重写。</li></ul><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><p><strong>重写算法的标准步骤</strong></p><p>在本例中， 模版方法模式定义了一个可与社交网络协作的算法。 与特定社交网络相匹配的子类将根据社交网络所提供的 API 来实现这些步骤。</p><p><strong>networks</strong></p><p><strong>networks/Network.java:</strong> 基础社交网络类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.template_method.example.networks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base class of social network.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    String userName;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    Network() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Publish the data to whatever network.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Authenticate before posting. Every network uses a different</span></span><br><span class="line">        <span class="comment">// authentication method.</span></span><br><span class="line">        <span class="keyword">if</span> (logIn(<span class="keyword">this</span>.userName, <span class="keyword">this</span>.password)) &#123;</span><br><span class="line">            <span class="comment">// Send the post data.</span></span><br><span class="line">            <span class="keyword">boolean</span> result =  sendData(message.getBytes());</span><br><span class="line">            logOut();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">logIn</span><span class="params">(String userName, String password)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">sendData</span><span class="params">(<span class="keyword">byte</span>[] data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">logOut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>networks/Facebook.java:</strong> 具体社交网络</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.template_method.example.networks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class of social network</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facebook</span> <span class="keyword">extends</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facebook</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">logIn</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\nChecking user&#x27;s parameters&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + <span class="keyword">this</span>.userName);</span><br><span class="line">        System.out.print(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.password.length(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        simulateNetworkLatency();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\nLogIn success on Facebook&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> messagePosted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (messagePosted) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Message: &#x27;&quot;</span> + <span class="keyword">new</span> String(data) + <span class="string">&quot;&#x27; was posted on Facebook&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User: &#x27;&quot;</span> + userName + <span class="string">&quot;&#x27; was logged out from Facebook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">simulateNetworkLatency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>networks/Twitter.java:</strong> 另一个社交网络</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.template_method.example.networks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class of social network</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Twitter</span> <span class="keyword">extends</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Twitter</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">logIn</span><span class="params">(String userName, String password)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\nChecking user&#x27;s parameters&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + <span class="keyword">this</span>.userName);</span><br><span class="line">        System.out.print(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.password.length(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        simulateNetworkLatency();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n\nLogIn success on Twitter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> messagePosted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (messagePosted) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Message: &#x27;&quot;</span> + <span class="keyword">new</span> String(data) + <span class="string">&quot;&#x27; was posted on Twitter&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User: &#x27;&quot;</span> + userName + <span class="string">&quot;&#x27; was logged out from Twitter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">simulateNetworkLatency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Demo.java:</strong> 客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.template_method.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.template_method.example.networks.Facebook;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.template_method.example.networks.Network;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.template_method.example.networks.Twitter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Demo class. Everything comes together here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        Network network = <span class="keyword">null</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;Input user name: &quot;</span>);</span><br><span class="line">        String userName = reader.readLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;Input password: &quot;</span>);</span><br><span class="line">        String password = reader.readLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enter the message.</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Input message: &quot;</span>);</span><br><span class="line">        String message = reader.readLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\nChoose social network for posting message.\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;1 - Facebook\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;2 - Twitter&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> choice = Integer.parseInt(reader.readLine());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create proper network object and send the message.</span></span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">1</span>) &#123;</span><br><span class="line">            network = <span class="keyword">new</span> Facebook(userName, password);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>) &#123;</span><br><span class="line">            network = <span class="keyword">new</span> Twitter(userName, password);</span><br><span class="line">        &#125;</span><br><span class="line">        network.post(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OutputDemo.png:</strong>  执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input user name: Jhonatan</span><br><span class="line">Input password: qswe</span><br><span class="line">Input message: Hello, World!</span><br><span class="line"></span><br><span class="line">Choose social network for posting message.</span><br><span class="line">1 - Facebook</span><br><span class="line">2 - Twitter</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Checking user&#39;s parameters</span><br><span class="line">Name: Jhonatan</span><br><span class="line">Password: ****</span><br><span class="line">..........</span><br><span class="line"></span><br><span class="line">LogIn success on Twitter</span><br><span class="line">Message: &#39;Hello, World!&#39; was posted on Twitter</span><br><span class="line">User: &#39;Jhonatan&#39; was logged out from Twitter</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-4"><p><strong>在 PHP 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 PHP 框架中很常见。 该模式简化了通过类继承对默认框架行为进行扩展时的工作。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><div class="tabs" id="php"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#php-1">概念示例</button></li><li class="tab"><button type="button" data-href="#php-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="php-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>模版方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 PHP 应用案例。</p><p><strong>index.php:</strong> 概念示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">TemplateMethod</span>\<span class="title">Conceptual</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Abstract Class defines a template method that contains a skeleton of some</span></span><br><span class="line"><span class="comment"> * algorithm, composed of calls to (usually) abstract primitive operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Concrete subclasses should implement these operations, but leave the template</span></span><br><span class="line"><span class="comment"> * method itself intact.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The template method defines the skeleton of an algorithm.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">templateMethod</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;baseOperation1();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;requiredOperations1();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;baseOperation2();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook1();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;requiredOperation2();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;baseOperation3();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hook2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * These operations already have implementations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">baseOperation1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;AbstractClass says: I am doing the bulk of the work\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">baseOperation2</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;AbstractClass says: But I let subclasses override some operations\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">baseOperation3</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;AbstractClass says: But I am doing the bulk of the work anyway\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * These operations have to be implemented in subclasses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">requiredOperations1</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">requiredOperation2</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not mandatory</span></span><br><span class="line"><span class="comment">     * since the hooks already have default (but empty) implementation. Hooks</span></span><br><span class="line"><span class="comment">     * provide additional extension points in some crucial places of the</span></span><br><span class="line"><span class="comment">     * algorithm.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">hook1</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">hook2</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete classes have to implement all abstract operations of the base class.</span></span><br><span class="line"><span class="comment"> * They can also override some operations with a default implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">requiredOperations1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteClass1 says: Implemented Operation1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">requiredOperation2</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteClass1 says: Implemented Operation2\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Usually, concrete classes override only a fraction of base class&#x27; operations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">requiredOperations1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteClass2 says: Implemented Operation1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">requiredOperation2</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteClass2 says: Implemented Operation2\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">hook1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteClass2 says: Overridden Hook1\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code calls the template method to execute the algorithm. Client</span></span><br><span class="line"><span class="comment"> * code does not have to know the concrete class of an object it works with, as</span></span><br><span class="line"><span class="comment"> * long as it works with objects through the interface of their base class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientCode</span>(<span class="params">AbstractClass $class</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    $class-&gt;templateMethod();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Same client code can work with different subclasses:\n&quot;</span>;</span><br><span class="line">clientCode(<span class="keyword">new</span> ConcreteClass1());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Same client code can work with different subclasses:\n&quot;</span>;</span><br><span class="line">clientCode(<span class="keyword">new</span> ConcreteClass2());</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing bulk of the work</span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses to override some operations</span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing bulk of the work anyway</span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing bulk of the work</span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses to override some operations</span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="php-2"><p><strong>真实世界示例</strong></p><p>在本例中， <strong>模版方法</strong>模式定义了在社交网络上发布消息的算法框架。 每个子类都代表一个不同的社交网络， 它们虽以不同方式实现所有步骤， 但却会复用基本的算法。</p><p><strong>index.php:</strong> 真实世界示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace RefactoringGuru\TemplateMethod\RealWorld;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Abstract Class defines the template method and declares all its steps.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialNetwork</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">__construct</span><span class="params">(string $username, string $password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;username = $username;</span><br><span class="line">        $<span class="keyword">this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The actual template method calls abstract steps in a specific order. A</span></span><br><span class="line"><span class="comment">     * subclass may implement all of the steps, allowing this method to actually</span></span><br><span class="line"><span class="comment">     * post something to a social network.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">post</span><span class="params">(string $message)</span>: bool</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Authenticate before posting. Every network uses a different</span></span><br><span class="line">        <span class="comment">// authentication method.</span></span><br><span class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>-&gt;logIn($<span class="keyword">this</span>-&gt;username, $<span class="keyword">this</span>-&gt;password)) &#123;</span><br><span class="line">            <span class="comment">// Send the post data. All networks have different APIs.</span></span><br><span class="line">            $result = $<span class="keyword">this</span>-&gt;sendData($message);</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            $<span class="keyword">this</span>-&gt;logOut();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The steps are declared abstract to force the subclasses to implement them</span></span><br><span class="line"><span class="comment">     * all.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> function <span class="title">logIn</span><span class="params">(string $userName, string $password)</span>: bool</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> function <span class="title">sendData</span><span class="params">(string $message)</span>: bool</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> function <span class="title">logOut</span><span class="params">()</span>: <span class="keyword">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This Concrete Class implements the Facebook API (all right, it pretends to).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facebook</span> <span class="keyword">extends</span> <span class="title">SocialNetwork</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">logIn</span><span class="params">(string $userName, string $password)</span>: bool</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;\nChecking user&#x27;s credentials...\n&quot;</span>;</span><br><span class="line">        echo <span class="string">&quot;Name: &quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        echo <span class="string">&quot;Password: &quot;</span> . str_repeat(<span class="string">&quot;*&quot;</span>, strlen($<span class="keyword">this</span>-&gt;password)) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        simulateNetworkLatency();</span><br><span class="line"></span><br><span class="line">        echo <span class="string">&quot;\n\nFacebook: &#x27;&quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;&#x27; has logged in successfully.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">sendData</span><span class="params">(string $message)</span>: bool</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;Facebook: &#x27;&quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;&#x27; has posted &#x27;&quot;</span> . $message . <span class="string">&quot;&#x27;.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">logOut</span><span class="params">()</span>: <span class="keyword">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;Facebook: &#x27;&quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;&#x27; has been logged out.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This Concrete Class implements the Twitter API.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Twitter</span> <span class="keyword">extends</span> <span class="title">SocialNetwork</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">logIn</span><span class="params">(string $userName, string $password)</span>: bool</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;\nChecking user&#x27;s credentials...\n&quot;</span>;</span><br><span class="line">        echo <span class="string">&quot;Name: &quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        echo <span class="string">&quot;Password: &quot;</span> . str_repeat(<span class="string">&quot;*&quot;</span>, strlen($<span class="keyword">this</span>-&gt;password)) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        simulateNetworkLatency();</span><br><span class="line"></span><br><span class="line">        echo <span class="string">&quot;\n\nTwitter: &#x27;&quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;&#x27; has logged in successfully.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">sendData</span><span class="params">(string $message)</span>: bool</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;Twitter: &#x27;&quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;&#x27; has posted &#x27;&quot;</span> . $message . <span class="string">&quot;&#x27;.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> function <span class="title">logOut</span><span class="params">()</span>: <span class="keyword">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        echo <span class="string">&quot;Twitter: &#x27;&quot;</span> . $<span class="keyword">this</span>-&gt;username . <span class="string">&quot;&#x27; has been logged out.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A little helper function that makes waiting times feel real.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">function <span class="title">simulateNetworkLatency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ($i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        echo <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        $i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">echo <span class="string">&quot;Username: \n&quot;</span>;</span><br><span class="line">$username = readline();</span><br><span class="line">echo <span class="string">&quot;Password: \n&quot;</span>;</span><br><span class="line">$password = readline();</span><br><span class="line">echo <span class="string">&quot;Message: \n&quot;</span>;</span><br><span class="line">$message = readline();</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;\nChoose the social network to post the message:\n&quot;</span> .</span><br><span class="line">    <span class="string">&quot;1 - Facebook\n&quot;</span> .</span><br><span class="line">    <span class="string">&quot;2 - Twitter\n&quot;</span>;</span><br><span class="line">$choice = readline();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, let&#x27;s create a proper social network object and send the message.</span></span><br><span class="line"><span class="keyword">if</span> ($choice == <span class="number">1</span>) &#123;</span><br><span class="line">    $network = <span class="keyword">new</span> Facebook($username, $password);</span><br><span class="line">&#125; elseif ($choice == <span class="number">2</span>) &#123;</span><br><span class="line">    $network = <span class="keyword">new</span> Twitter($username, $password);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    die(<span class="string">&quot;Sorry, I&#x27;m not sure what you mean by that.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$network-&gt;post($message);</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Username:</span><br><span class="line">&gt; neo</span><br><span class="line">Password:</span><br><span class="line">&gt; 123123</span><br><span class="line">Message:</span><br><span class="line">&gt; What is the Matrix?</span><br><span class="line"></span><br><span class="line">Choose the social network to post the message:</span><br><span class="line">1 - Facebook</span><br><span class="line">2 - Twitter</span><br><span class="line">&gt; 1</span><br><span class="line"></span><br><span class="line">Checking user&#39;s credentials...</span><br><span class="line">Name: neo</span><br><span class="line">Password: ******</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">Facebook: &#39;neo&#39; has logged in successfully.</span><br><span class="line">Facebook: &#39;neo&#39; has posted &#39;What is the Matrix?&#39;.</span><br><span class="line">Facebook: &#39;neo&#39; has been logged out.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-5"><p><strong>在 Python 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 Python 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>模板方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.py:</strong> 概念示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Abstract Class defines a template method that contains a skeleton of</span></span><br><span class="line"><span class="string">    some algorithm, composed of calls to (usually) abstract primitive</span></span><br><span class="line"><span class="string">    operations.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Concrete subclasses should implement these operations, but leave the</span></span><br><span class="line"><span class="string">    template method itself intact.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">template_method</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The template method defines the skeleton of an algorithm.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        self.base_operation1()</span><br><span class="line">        self.required_operations1()</span><br><span class="line">        self.base_operation2()</span><br><span class="line">        self.hook1()</span><br><span class="line">        self.required_operations2()</span><br><span class="line">        self.base_operation3()</span><br><span class="line">        self.hook2()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># These operations already have implementations.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base_operation1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;AbstractClass says: I am doing the bulk of the work&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base_operation2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;AbstractClass says: But I let subclasses override some operations&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base_operation3</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;AbstractClass says: But I am doing the bulk of the work anyway&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># These operations have to be implemented in subclasses.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">required_operations1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">required_operations2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not mandatory</span></span><br><span class="line">    <span class="comment"># since the hooks already have default (but empty) implementation. Hooks</span></span><br><span class="line">    <span class="comment"># provide additional extension points in some crucial places of the</span></span><br><span class="line">    <span class="comment"># algorithm.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hook1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hook2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span>(<span class="params">AbstractClass</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Concrete classes have to implement all abstract operations of the base</span></span><br><span class="line"><span class="string">    class. They can also override some operations with a default implementation.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">required_operations1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteClass1 says: Implemented Operation1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">required_operations2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteClass1 says: Implemented Operation2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span>(<span class="params">AbstractClass</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Usually, concrete classes override only a fraction of base class&#x27;</span></span><br><span class="line"><span class="string">    operations.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">required_operations1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteClass2 says: Implemented Operation1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">required_operations2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteClass2 says: Implemented Operation2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hook1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteClass2 says: Overridden Hook1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_code</span>(<span class="params">abstract_class: AbstractClass</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The client code calls the template method to execute the algorithm. Client</span></span><br><span class="line"><span class="string">    code does not have to know the concrete class of an object it works with, as</span></span><br><span class="line"><span class="string">    long as it works with objects through the interface of their base class.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    abstract_class.template_method()</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;Same client code can work with different subclasses:&quot;</span>)</span><br><span class="line">    client_code(ConcreteClass1())</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Same client code can work with different subclasses:&quot;</span>)</span><br><span class="line">    client_code(ConcreteClass2())</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-6"><p><strong>在 Ruby 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 Ruby 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>模板方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.rb:</strong> 概念示例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Abstract Class defines a template method that contains a skeleton of some</span></span><br><span class="line"><span class="comment"># algorithm, composed of calls to (usually) abstract primitive operations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Concrete subclasses should implement these operations, but leave the template</span></span><br><span class="line"><span class="comment"># method itself intact.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span></span><br><span class="line">  <span class="comment"># The template method defines the skeleton of an algorithm.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">template_method</span></span></span><br><span class="line">    base_operation1</span><br><span class="line">    required_operations1</span><br><span class="line">    base_operation2</span><br><span class="line">    hook1</span><br><span class="line">    required_operations2</span><br><span class="line">    base_operation3</span><br><span class="line">    hook2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># These operations already have implementations.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">base_operation1</span></span></span><br><span class="line">    puts <span class="string">&#x27;AbstractClass says: I am doing the bulk of the work&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">base_operation2</span></span></span><br><span class="line">    puts <span class="string">&#x27;AbstractClass says: But I let subclasses override some operations&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">base_operation3</span></span></span><br><span class="line">    puts <span class="string">&#x27;AbstractClass says: But I am doing the bulk of the work anyway&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># These operations have to be implemented in subclasses.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">required_operations1</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">required_operations2</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not mandatory</span></span><br><span class="line">  <span class="comment"># since the hooks already have default (but empty) implementation. Hooks</span></span><br><span class="line">  <span class="comment"># provide additional extension points in some crucial places of the algorithm.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hook1</span>;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hook2</span>;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concrete classes have to implement all abstract operations of the base class.</span></span><br><span class="line"><span class="comment"># They can also override some operations with a default implementation.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> &lt; AbstractClass</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">required_operations1</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteClass1 says: Implemented Operation1&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">required_operations2</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteClass1 says: Implemented Operation2&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usually, concrete classes override only a fraction of base class&#x27; operations.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> &lt; AbstractClass</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">required_operations1</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteClass2 says: Implemented Operation1&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">required_operations2</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteClass2 says: Implemented Operation2&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hook1</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteClass2 says: Overridden Hook1&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client code calls the template method to execute the algorithm. Client</span></span><br><span class="line"><span class="comment"># code does not have to know the concrete class of an object it works with, as</span></span><br><span class="line"><span class="comment"># long as it works with objects through the interface of their base class.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_code</span><span class="params">(abstract_class)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  abstract_class.template_method</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&#x27;Same client code can work with different subclasses:&#x27;</span></span><br><span class="line">client_code(ConcreteClass1.new)</span><br><span class="line">puts <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&#x27;Same client code can work with different subclasses:&#x27;</span></span><br><span class="line">client_code(ConcreteClass2.new)</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-7"><p><strong>在 Swift 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 Swift 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><div class="tabs" id="swift"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#swift-1">概念示例</button></li><li class="tab"><button type="button" data-href="#swift-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="swift-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>模版方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 Swift 应用案例。</p><p><strong>Example.swift:</strong> 概念示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Abstract Protocol and its extension defines a template method that</span></span><br><span class="line"><span class="comment">/// contains a skeleton of some algorithm, composed of calls to (usually)</span></span><br><span class="line"><span class="comment">/// abstract primitive operations.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Concrete subclasses should implement these operations, but leave the</span></span><br><span class="line"><span class="comment">/// template method itself intact.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The template method defines the skeleton of an algorithm.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">templateMethod</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// These operations already have implementations.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">baseOperation1</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">baseOperation2</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">baseOperation3</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// These operations have to be implemented in subclasses.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredOperations1</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredOperation2</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not mandatory</span></span><br><span class="line">    <span class="comment">/// since the hooks already have default (but empty) implementation. Hooks</span></span><br><span class="line">    <span class="comment">/// provide additional extension points in some crucial places of the</span></span><br><span class="line">    <span class="comment">/// algorithm.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hook1</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hook2</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">templateMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">        baseOperation1()</span><br><span class="line">        requiredOperations1()</span><br><span class="line">        baseOperation2()</span><br><span class="line">        hook1()</span><br><span class="line">        requiredOperation2()</span><br><span class="line">        baseOperation3()</span><br><span class="line">        hook2()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// These operations already have implementations.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">baseOperation1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;AbstractProtocol says: I am doing the bulk of the work\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">baseOperation2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;AbstractProtocol says: But I let subclasses override some operations\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">baseOperation3</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;AbstractProtocol says: But I am doing the bulk of the work anyway\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hook1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hook2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Concrete classes have to implement all abstract operations of the base</span></span><br><span class="line"><span class="comment">/// class. They can also override some operations with a default implementation.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span>: <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredOperations1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteClass1 says: Implemented Operation1\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredOperation2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteClass1 says: Implemented Operation2\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hook2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteClass1 says: Overridden Hook2\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Usually, concrete classes override only a fraction of base class&#x27;</span></span><br><span class="line"><span class="comment">/// operations.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span>: <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredOperations1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteClass2 says: Implemented Operation1\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requiredOperation2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteClass2 says: Implemented Operation2\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hook1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteClass2 says: Overridden Hook1\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The client code calls the template method to execute the algorithm. Client</span></span><br><span class="line"><span class="comment">/// code does not have to know the concrete class of an object it works with, as</span></span><br><span class="line"><span class="comment">/// long as it works with objects through the interface of their base class.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">clientCode</span><span class="params">(use object: AbstractProtocol)</span></span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        object.templateMethod()</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Let&#x27;s see how it all works together.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodConceptual</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Same client code can work with different subclasses:\n&quot;</span>)</span><br><span class="line">        <span class="type">Client</span>.clientCode(use: <span class="type">ConcreteClass1</span>())</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSame client code can work with different subclasses:\n&quot;</span>)</span><br><span class="line">        <span class="type">Client</span>.clientCode(use: <span class="type">ConcreteClass2</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line"></span><br><span class="line">AbstractProtocol says: I am doing the bulk of the work</span><br><span class="line"></span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line"></span><br><span class="line">AbstractProtocol says: But I let subclasses override some operations</span><br><span class="line"></span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line"></span><br><span class="line">AbstractProtocol says: But I am doing the bulk of the work anyway</span><br><span class="line"></span><br><span class="line">ConcreteClass1 says: Overridden Hook2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line"></span><br><span class="line">AbstractProtocol says: I am doing the bulk of the work</span><br><span class="line"></span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line"></span><br><span class="line">AbstractProtocol says: But I let subclasses override some operations</span><br><span class="line"></span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line"></span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line"></span><br><span class="line">AbstractProtocol says: But I am doing the bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="swift-2"><p><strong>真实世界示例</strong></p><p><strong>Example.swift:</strong> 真实世界示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"><span class="keyword">import</span> AVFoundation</span><br><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"><span class="keyword">import</span> Photos</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodRealWorld</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A good example of Template Method is a life cycle of UIViewController</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testTemplateMethodReal</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> accessors = [<span class="type">CameraAccessor</span>(), <span class="type">MicrophoneAccessor</span>(), <span class="type">PhotoLibraryAccessor</span>()]</span><br><span class="line"></span><br><span class="line">        accessors.forEach &#123; item <span class="keyword">in</span></span><br><span class="line">            item.requestAccessIfNeeded(&#123; status <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> message = status ? <span class="string">&quot;You have access to &quot;</span> : <span class="string">&quot;You do not have access to &quot;</span></span><br><span class="line">                <span class="built_in">print</span>(message + item.description + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionAccessor</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Completion</span> = (<span class="type">Bool</span>) -&gt; ()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestAccessIfNeeded</span><span class="params">(<span class="number">_</span> completion: @escaping Completion)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> !hasAccess() <span class="keyword">else</span> &#123; completion(<span class="literal">true</span>); <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">        willReceiveAccess()</span><br><span class="line"></span><br><span class="line">        requestAccess &#123; status <span class="keyword">in</span></span><br><span class="line">            status ? <span class="keyword">self</span>.didReceiveAccess() : <span class="keyword">self</span>.didRejectAccess()</span><br><span class="line"></span><br><span class="line">            completion(status)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">requestAccess</span><span class="params">(<span class="number">_</span> completion: @escaping Completion)</span></span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Should be overridden&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hasAccess</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Should be overridden&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;PermissionAccessor&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Hooks</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">willReceiveAccess</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didReceiveAccess</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didRejectAccess</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CameraAccessor</span>: <span class="title">PermissionAccessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccess</span><span class="params">(<span class="number">_</span> completion: @escaping Completion)</span></span> &#123;</span><br><span class="line">        <span class="type">AVCaptureDevice</span>.requestAccess(<span class="keyword">for</span>: .video) &#123; status <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> completion(status)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccess</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">AVCaptureDevice</span>.authorizationStatus(<span class="keyword">for</span>: .video) == .authorized</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Camera&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MicrophoneAccessor</span>: <span class="title">PermissionAccessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccess</span><span class="params">(<span class="number">_</span> completion: @escaping Completion)</span></span> &#123;</span><br><span class="line">        <span class="type">AVAudioSession</span>.sharedInstance().requestRecordPermission &#123; status <span class="keyword">in</span></span><br><span class="line">            completion(status)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccess</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">AVAudioSession</span>.sharedInstance().recordPermission == .granted</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;Microphone&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoLibraryAccessor</span>: <span class="title">PermissionAccessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccess</span><span class="params">(<span class="number">_</span> completion: @escaping Completion)</span></span> &#123;</span><br><span class="line">        <span class="type">PHPhotoLibrary</span>.requestAuthorization &#123; status <span class="keyword">in</span></span><br><span class="line">            completion(status == .authorized)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccess</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">PHPhotoLibrary</span>.authorizationStatus() == .authorized</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;PhotoLibrary&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveAccess</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">/// We want to track how many people give access to the PhotoLibrary.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PhotoLibrary Accessor: Receive access. Updating analytics...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didRejectAccess</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">/// ... and also we want to track how many people rejected access.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PhotoLibrary Accessor: Rejected with access. Updating analytics...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">You have access to Camera</span><br><span class="line"></span><br><span class="line">You have access to Microphone</span><br><span class="line"></span><br><span class="line">PhotoLibrary Accessor: Rejected with access. Updating analytics...</span><br><span class="line">You do not have access to PhotoLibrary</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-8"><p><strong>在 TypeScript 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 模版方法模式在 TypeScript 框架中很常见。 开发者通常使用它来向框架用户提供通过继承实现的、 对标准功能进行扩展的简单方式。</p><p><strong>识别方法：</strong> 模版方法可以通过行为方法来识别， 该方法已有一个在基类中定义的 “默认” 行为。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>模版方法</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>index.ts:</strong> 概念示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Abstract Class defines a template method that contains a skeleton of some</span></span><br><span class="line"><span class="comment"> * algorithm, composed of calls to (usually) abstract primitive operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Concrete subclasses should implement these operations, but leave the template</span></span><br><span class="line"><span class="comment"> * method itself intact.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The template method defines the skeleton of an algorithm.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> templateMethod(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.baseOperation1();</span><br><span class="line">        <span class="built_in">this</span>.requiredOperations1();</span><br><span class="line">        <span class="built_in">this</span>.baseOperation2();</span><br><span class="line">        <span class="built_in">this</span>.hook1();</span><br><span class="line">        <span class="built_in">this</span>.requiredOperation2();</span><br><span class="line">        <span class="built_in">this</span>.baseOperation3();</span><br><span class="line">        <span class="built_in">this</span>.hook2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * These operations already have implementations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> baseOperation1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;AbstractClass says: I am doing the bulk of the work&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> baseOperation2(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;AbstractClass says: But I let subclasses override some operations&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> baseOperation3(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;AbstractClass says: But I am doing the bulk of the work anyway&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * These operations have to be implemented in subclasses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> requiredOperations1(): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> requiredOperation2(): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * These are &quot;hooks.&quot; Subclasses may override them, but it&#x27;s not mandatory</span></span><br><span class="line"><span class="comment">     * since the hooks already have default (but empty) implementation. Hooks</span></span><br><span class="line"><span class="comment">     * provide additional extension points in some crucial places of the</span></span><br><span class="line"><span class="comment">     * algorithm.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> hook1(): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> hook2(): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete classes have to implement all abstract operations of the base class.</span></span><br><span class="line"><span class="comment"> * They can also override some operations with a default implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> requiredOperations1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteClass1 says: Implemented Operation1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> requiredOperation2(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteClass1 says: Implemented Operation2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Usually, concrete classes override only a fraction of base class&#x27; operations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> requiredOperations1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteClass2 says: Implemented Operation1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> requiredOperation2(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteClass2 says: Implemented Operation2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> hook1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteClass2 says: Overridden Hook1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code calls the template method to execute the algorithm. Client</span></span><br><span class="line"><span class="comment"> * code does not have to know the concrete class of an object it works with, as</span></span><br><span class="line"><span class="comment"> * long as it works with objects through the interface of their base class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientCode</span>(<span class="params">abstractClass: AbstractClass</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    abstractClass.templateMethod();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Same client code can work with different subclasses:&#x27;</span>);</span><br><span class="line">clientCode(<span class="keyword">new</span> ConcreteClass1());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Same client code can work with different subclasses:&#x27;</span>);</span><br><span class="line">clientCode(<span class="keyword">new</span> ConcreteClass2());</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass1 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass1 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br><span class="line"></span><br><span class="line">Same client code can work with different subclasses:</span><br><span class="line">AbstractClass says: I am doing the bulk of the work</span><br><span class="line">ConcreteClass2 says: Implemented Operation1</span><br><span class="line">AbstractClass says: But I let subclasses override some operations</span><br><span class="line">ConcreteClass2 says: Overridden Hook1</span><br><span class="line">ConcreteClass2 says: Implemented Operation2</span><br><span class="line">AbstractClass says: But I am doing the bulk of the work anyway</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-9"><p><strong>概念示例</strong></p><p>让我们来考虑一个一次性密码功能 （OTP） 的例子。 将 OTP 传递给用户的方式多种多样 （短信、 邮件等）。 但无论是短信还是邮件， 整个 OTP 流程都是相同的：</p><ol><li>生成随机的 n 位数字。</li><li>在缓存中保存这组数字以便进行后续验证。</li><li>准备内容。</li><li>发送通知。</li><li>发布。</li></ol><p>后续引入的任何新 OTP 类型都很有可能需要进行相同的上述步骤。</p><p>因此， 我们会有这样的一个场景， 其中某个特定操作的步骤是相同的， 但实现方式却可能有所不同。 这正是适合考虑使用模板方法模式的情况。</p><p>首先， 我们定义一个由固定数量的方法组成的基础模板算法。 这就是我们的模板方法。 然后我们将实现每一个步骤方法， 但不会改变模板方法。</p><p><strong>otp.go:</strong> 模板方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> iOtp <span class="keyword">interface</span> &#123;</span><br><span class="line">    genRandomOTP(<span class="keyword">int</span>) <span class="keyword">string</span></span><br><span class="line">    saveOTPCache(<span class="keyword">string</span>)</span><br><span class="line">    getMessage(<span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">    sendNotification(<span class="keyword">string</span>) error</span><br><span class="line">    publishMetric()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type otp struct &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func (o *otp) genAndSendOTP(iOtp iOtp, otpLength int) error &#123;</span></span><br><span class="line"><span class="comment">//  otp := iOtp.genRandomOTP(otpLength)</span></span><br><span class="line"><span class="comment">//  iOtp.saveOTPCache(otp)</span></span><br><span class="line"><span class="comment">//  message := iOtp.getMessage(otp)</span></span><br><span class="line"><span class="comment">//  err := iOtp.sendNotification(message)</span></span><br><span class="line"><span class="comment">//  if err != nil &#123;</span></span><br><span class="line"><span class="comment">//      return err</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  iOtp.publishMetric()</span></span><br><span class="line"><span class="comment">//  return nil</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> otp <span class="keyword">struct</span> &#123;</span><br><span class="line">    iOtp iOtp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *otp)</span> <span class="title">genAndSendOTP</span><span class="params">(otpLength <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    otp := o.iOtp.genRandomOTP(otpLength)</span><br><span class="line">    o.iOtp.saveOTPCache(otp)</span><br><span class="line">    message := o.iOtp.getMessage(otp)</span><br><span class="line">    err := o.iOtp.sendNotification(message)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    o.iOtp.publishMetric()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sms.go:</strong> 具体实施</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sms <span class="keyword">struct</span> &#123;</span><br><span class="line">    otp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sms)</span> <span class="title">genRandomOTP</span><span class="params">(<span class="built_in">len</span> <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    randomOTP := <span class="string">&quot;1234&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;SMS: generating random otp %s\n&quot;</span>, randomOTP)</span><br><span class="line">    <span class="keyword">return</span> randomOTP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sms)</span> <span class="title">saveOTPCache</span><span class="params">(otp <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;SMS: saving otp: %s to cache\n&quot;</span>, otp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sms)</span> <span class="title">getMessage</span><span class="params">(otp <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;SMS OTP for login is &quot;</span> + otp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sms)</span> <span class="title">sendNotification</span><span class="params">(message <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;SMS: sending sms: %s\n&quot;</span>, message)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sms)</span> <span class="title">publishMetric</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;SMS: publishing metrics\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>email.go:</strong> 具体实施</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> email <span class="keyword">struct</span> &#123;</span><br><span class="line">    otp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *email)</span> <span class="title">genRandomOTP</span><span class="params">(<span class="built_in">len</span> <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    randomOTP := <span class="string">&quot;1234&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;EMAIL: generating random otp %s\n&quot;</span>, randomOTP)</span><br><span class="line">    <span class="keyword">return</span> randomOTP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *email)</span> <span class="title">saveOTPCache</span><span class="params">(otp <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;EMAIL: saving otp: %s to cache\n&quot;</span>, otp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *email)</span> <span class="title">getMessage</span><span class="params">(otp <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;EMAIL OTP for login is &quot;</span> + otp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *email)</span> <span class="title">sendNotification</span><span class="params">(message <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;EMAIL: sending email: %s\n&quot;</span>, message)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *email)</span> <span class="title">publishMetric</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;EMAIL: publishing metrics\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.go:</strong> 客户端代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// otp := otp&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// smsOTP := &amp;sms&#123;</span></span><br><span class="line">    <span class="comment">//  otp: otp,</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// smsOTP.genAndSendOTP(smsOTP, 4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// emailOTP := &amp;email&#123;</span></span><br><span class="line">    <span class="comment">//  otp: otp,</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// emailOTP.genAndSendOTP(emailOTP, 4)</span></span><br><span class="line">    <span class="comment">// fmt.Scanln()</span></span><br><span class="line">    smsOTP := &amp;sms&#123;&#125;</span><br><span class="line">    o := otp&#123;</span><br><span class="line">        iOtp: smsOTP,</span><br><span class="line">    &#125;</span><br><span class="line">    o.genAndSendOTP(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    emailOTP := &amp;email&#123;&#125;</span><br><span class="line">    o = otp&#123;</span><br><span class="line">        iOtp: emailOTP,</span><br><span class="line">    &#125;</span><br><span class="line">    o.genAndSendOTP(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SMS: generating random otp 1234</span><br><span class="line">SMS: saving otp: 1234 to cache</span><br><span class="line">SMS: sending sms: SMS OTP for login is 1234</span><br><span class="line">SMS: publishing metrics</span><br><span class="line"></span><br><span class="line">EMAIL: generating random otp 1234</span><br><span class="line">EMAIL: saving otp: 1234 to cache</span><br><span class="line">EMAIL: sending email: EMAIL OTP for login is 1234</span><br><span class="line">EMAIL: publishing metrics</span><br></pre></td></tr></table></figure><p><em>根据： <a href="https://golangbyexample.com/template-method-design-pattern-golang/">Golang By Example</a></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/template-method&quot;&gt;https://refactoringguru.cn/design-patterns/template-met
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>行为模式-策略模式</title>
    <link href="http://wangyangyangisme.github.io/posts/6dffd2a3/"/>
    <id>http://wangyangyangisme.github.io/posts/6dffd2a3/</id>
    <published>2021-05-04T12:50:43.000Z</published>
    <updated>2021-05-04T12:50:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/strategy">https://refactoringguru.cn/design-patterns/strategy</a></p></blockquote><h1 id="行为模式-策略模式"><a href="#行为模式-策略模式" class="headerlink" title="行为模式-策略模式"></a>行为模式-策略模式</h1><p><strong>亦称：</strong> Strategy</p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>策略模式</strong>是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/strategy.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一天， 你打算为游客们创建一款导游程序。 该程序的核心功能是提供美观的地图， 以帮助用户在任何城市中快速定位。</p><p>用户期待的程序新功能是自动路线规划： 他们希望输入地址后就能在地图上看到前往目的地的最快路线。</p><p>程序的首个版本只能规划公路路线。 驾车旅行的人们对此非常满意。 但很显然， 并非所有人都会在度假时开车。 因此你在下次更新时添加了规划步行路线的功能。 此后， 你又添加了规划公共交通路线的功能。</p><p>而这只是个开始。 不久后， 你又要为骑行者规划路线。 又过了一段时间， 你又要为游览城市中的所有景点规划路线。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/problem-strategy.png" alt="导游代码将变得非常臃肿。"></p><p>尽管从商业角度来看， 这款应用非常成功， 但其技术部分却让你非常头疼： 每次添加新的路线规划算法后， 导游应用中主要类的体积就会增加一倍。 终于在某个时候， 你觉得自己没法继续维护这堆代码了。</p><p>无论是修复简单缺陷还是微调街道权重， 对某个算法进行任何修改都会影响整个类， 从而增加在已有正常运行代码中引入错误的风险。</p><p>此外， 团队合作将变得低效。 如果你在应用成功发布后招募了团队成员， 他们会抱怨在合并冲突的工作上花费了太多时间。 在实现新功能的过程中， 你的团队需要修改同一个巨大的类， 这样他们所编写的代码相互之间就可能会出现冲突。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>策略模式建议找出负责用许多不同方式完成特定任务的类， 然后将其中的算法抽取到一组被称为<em>策略</em>的独立类中。</p><p>名为<em>上下文</em>的原始类必须包含一个成员变量来存储对于每种策略的引用。 上下文并不执行任务， 而是将工作委派给已连接的策略对象。</p><p>上下文不负责选择符合任务需要的算法——客户端会将所需策略传递给上下文。 实际上， 上下文并不十分了解策略， 它会通过同样的通用接口与所有策略进行交互， 而该接口只需暴露一个方法来触发所选策略中封装的算法即可。</p><p>因此， 上下文可独立于具体策略。 这样你就可在不修改上下文代码或其他策略的情况下添加新算法或修改已有算法了。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/solution-strategy.png" alt="路线规划策略。"></p><p>在导游应用中， 每个路线规划算法都可被抽取到只有一个 <code>build­Route</code>生成路线方法的独立类中。 该方法接收起点和终点作为参数， 并返回路线中途点的集合。</p><p>即使传递给每个路径规划类的参数一模一样， 其所创建的路线也可能完全不同。 主要导游类的主要工作是在地图上渲染一系列中途点， 不会在意如何选择算法。 该类中还有一个用于切换当前路径规划策略的方法， 因此客户端 （例如用户界面中的按钮） 可用其他策略替换当前选择的路径规划行为。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/strategy-comic-1-zh.png" alt="各种前往机场的出行策略"></p><p>假如你需要前往机场。 你可以选择乘坐公共汽车、 预约出租车或骑自行车。 这些就是你的出行策略。 你可以根据预算或时间等因素来选择其中一种策略。</p><h2 id="策略模式结构"><a href="#策略模式结构" class="headerlink" title="策略模式结构"></a>策略模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/structure-indexed-strategy.png" alt=""></p><ol><li><strong>上下文</strong> （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。</li><li><strong>策略</strong> （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。</li><li><strong>具体策略</strong> （Concrete Strategies） 实现了上下文所用算法的各种不同变体。</li><li>当上下文需要运行算法时， 它会在其已连接的策略对象上调用执行方法。 上下文不清楚其所涉及的策略类型与算法的执行方式。</li><li><strong>客户端</strong> （Client） 会创建一个特定策略对象并将其传递给上下文。 上下文则会提供一个设置器以便客户端在运行时替换相关联的策略。</li></ol><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>在本例中， 上下文使用了多个<strong>策略</strong>来执行不同的计算操作。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略接口声明了某个算法各个不同版本间所共有的操作。上下文会使用该接口来</span></span><br><span class="line"><span class="comment">// 调用有具体策略定义的算法。</span></span><br><span class="line"><span class="keyword">interface</span> Strategy <span class="keyword">is</span></span><br><span class="line">    method execute(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略会在遵循策略基础接口的情况下实现算法。该接口实现了它们在上下文</span></span><br><span class="line"><span class="comment">// 中的互换性。</span></span><br><span class="line"><span class="keyword">class</span> ConcreteStrategyAdd <span class="keyword">implements</span> Strategy <span class="keyword">is</span></span><br><span class="line">    method execute(a, b) <span class="keyword">is</span></span><br><span class="line">        return a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ConcreteStrategySubtract <span class="keyword">implements</span> Strategy <span class="keyword">is</span></span><br><span class="line">    method execute(a, b) <span class="keyword">is</span></span><br><span class="line">        return a - b</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ConcreteStrategyMultiply <span class="keyword">implements</span> Strategy <span class="keyword">is</span></span><br><span class="line">    method execute(a, b) <span class="keyword">is</span></span><br><span class="line">        return a * b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文定义了客户端关注的接口。</span></span><br><span class="line"><span class="keyword">class</span> Context <span class="keyword">is</span></span><br><span class="line">    <span class="comment">// 上下文会维护指向某个策略对象的引用。上下文不知晓策略的具体类。上下</span></span><br><span class="line">    <span class="comment">// 文必须通过策略接口来与所有策略进行交互。</span></span><br><span class="line">    <span class="keyword">private</span> strategy: Strategy</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下文通常会通过构造函数来接收策略对象，同时还提供设置器以便在运行</span></span><br><span class="line">    <span class="comment">// 时切换策略。</span></span><br><span class="line">    method setStrategy(Strategy strategy) <span class="keyword">is</span></span><br><span class="line">        this.strategy = strategy</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下文会将一些工作委派给策略对象，而不是自行实现不同版本的算法。</span></span><br><span class="line">    method executeStrategy(int a, int b) <span class="keyword">is</span></span><br><span class="line">        return strategy.execute(a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码会选择具体策略并将其传递给上下文。客户端必须知晓策略之间的差</span></span><br><span class="line"><span class="comment">// 异，才能做出正确的选择。</span></span><br><span class="line"><span class="keyword">class</span> ExampleApplication <span class="keyword">is</span></span><br><span class="line">    method main() <span class="keyword">is</span></span><br><span class="line"></span><br><span class="line">        创建上下文对象。</span><br><span class="line"></span><br><span class="line">        读取第一个数。</span><br><span class="line">        读取最后一个数。</span><br><span class="line">        从用户输入中读取期望进行的行为。</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == addition) <span class="keyword">then</span></span><br><span class="line">            context.setStrategy(new ConcreteStrategyAdd())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == subtraction) <span class="keyword">then</span></span><br><span class="line">            context.setStrategy(new ConcreteStrategySubtract())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == multiplication) <span class="keyword">then</span></span><br><span class="line">            context.setStrategy(new ConcreteStrategyMultiply())</span><br><span class="line"></span><br><span class="line">        result = context.executeStrategy(First number, Second number)</span><br><span class="line"></span><br><span class="line">        打印结果。</span><br></pre></td></tr></table></figure><h2 id="策略模式适合应用场景"><a href="#策略模式适合应用场景" class="headerlink" title="策略模式适合应用场景"></a>策略模式适合应用场景</h2><p><strong>当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。</strong></p><p>策略模式让你能够将对象关联至可以不同方式执行特定子任务的不同子对象， 从而以间接方式在运行时更改对象行为。</p><p><strong>当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。</strong></p><p>策略模式让你能将不同行为抽取到一个独立类层次结构中， 并将原始类组合成同一个， 从而减少重复代码。</p><p><strong>如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。</strong></p><p>策略模式让你能将各种算法的代码、 内部数据和依赖关系与其他代码隔离开来。 不同客户端可通过一个简单接口执行算法， 并能在运行时进行切换。</p><p><strong>当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。</strong></p><p>策略模式将所有继承自同样接口的算法抽取到独立类中， 因此不再需要条件语句。 原始对象并不实现所有算法的变体， 而是将执行工作委派给其中的一个独立算法对象。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>从上下文类中找出修改频率较高的算法 （也可能是用于在运行时选择某个算法变体的复杂条件运算符）。</li><li>声明该算法所有变体的通用策略接口。</li><li>将算法逐一抽取到各自的类中， 它们都必须实现策略接口。</li><li>在上下文类中添加一个成员变量用于保存对于策略对象的引用。 然后提供设置器以修改该成员变量。 上下文仅可通过策略接口同策略对象进行交互， 如有需要还可定义一个接口来让策略访问其数据。</li><li>客户端必须将上下文类与相应策略进行关联， 使上下文可以预期的方式完成其主要工作。</li></ol><h2 id="策略模式优缺点"><a href="#策略模式优缺点" class="headerlink" title="策略模式优缺点"></a>策略模式优缺点</h2><p>优点</p><ul><li>你可以在运行时切换对象内的算法。</li><li>你可以将算法的实现和使用算法的代码隔离开来。</li><li>你可以使用组合来代替继承。</li><li><em>开闭原则</em>。 你无需对上下文进行修改就能够引入新的策略。</li></ul><p>缺点</p><ul><li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li><li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li><a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>看上去很像， 因为两者都能通过某些行为来参数化对象。 但是， 它们的意图有非常大的不同。<ul><li>你可以使用<em>命令</em>来将任何操作转换为对象。 操作的参数将成为对象的成员变量。 你可以通过转换来延迟操作的执行、 将操作放入队列、 保存历史命令或者向远程服务发送命令等。</li><li>另一方面， <em>策略</em>通常可用于描述完成某件事的不同方式， 让你能够在同一个上下文类中切换算法。</li></ul></li><li><a href="https://refactoringguru.cn/design-patterns/decorator">装饰模式</a>可让你更改对象的外表， <a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>则让你能够改变其本质。</li><li><a href="https://refactoringguru.cn/design-patterns/template-method">模板方法模式</a>基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 <a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 <em>模板方法</em>在类层次上运作， 因此它是静态的。 <em>策略</em>在对象层次上运作， 因此允许在运行时切换行为。</li><li><a href="https://refactoringguru.cn/design-patterns/state">状态</a>可被视为<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 <em>策略</em>使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但<em>状态</em>模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>策略</strong>是一种行为设计模式， 它将一组行为转换为对象， 并使其在原始上下文对象内部能够相互替换。</p><p>原始对象被称为上下文， 它包含指向策略对象的引用并将执行行为的任务分派给策略对象。 为了改变上下文完成其工作的方式， 其他对象可以使用另一个对象来替换当前链接的策略对象。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">C#</button></li><li class="tab"><button type="button" data-href="#tags-2">C++</button></li><li class="tab"><button type="button" data-href="#tags-3">JAVA</button></li><li class="tab"><button type="button" data-href="#tags-4">PHP</button></li><li class="tab"><button type="button" data-href="#tags-5">Python</button></li><li class="tab"><button type="button" data-href="#tags-6">Ruby</button></li><li class="tab"><button type="button" data-href="#tags-7">Swift</button></li><li class="tab"><button type="button" data-href="#tags-8">TypeScrit</button></li><li class="tab"><button type="button" data-href="#tags-9">Golang</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><p><strong>在 C# 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 C# 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>Program.cs:</strong> 概念示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru.DesignPatterns.Strategy.Conceptual</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The Context defines the interface of interest to clients.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The Context maintains a reference to one of the Strategy objects. The</span></span><br><span class="line">        <span class="comment">// Context does not know the concrete class of a strategy. It should</span></span><br><span class="line">        <span class="comment">// work with all strategies via the Strategy interface.</span></span><br><span class="line">        <span class="keyword">private</span> IStrategy _strategy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Usually, the Context accepts a strategy through the constructor, but</span></span><br><span class="line">        <span class="comment">// also provides a setter to change it at runtime.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">IStrategy strategy</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._strategy = strategy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetStrategy</span>(<span class="params">IStrategy strategy</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._strategy = strategy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The Context delegates some work to the Strategy object instead of</span></span><br><span class="line">        <span class="comment">// implementing multiple versions of the algorithm on its own.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomeBusinessLogic</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Context: Sorting data using the strategy (not sure how it&#x27;ll do it)&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>._strategy.DoAlgorithm(<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> resultStr = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> element <span class="keyword">in</span> result <span class="keyword">as</span> List&lt;<span class="built_in">string</span>&gt;)</span><br><span class="line">            &#123;</span><br><span class="line">                resultStr += element + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(resultStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Strategy interface declares operations common to all supported</span></span><br><span class="line">    <span class="comment">// versions of some algorithm.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line">    <span class="comment">// Strategies.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">object</span> <span class="title">DoAlgorithm</span>(<span class="params"><span class="built_in">object</span> data</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concrete Strategies implement the algorithm while following the base</span></span><br><span class="line">    <span class="comment">// Strategy interface. The interface makes them interchangeable in the</span></span><br><span class="line">    <span class="comment">// Context.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> : <span class="title">IStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">DoAlgorithm</span>(<span class="params"><span class="built_in">object</span> data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> list = data <span class="keyword">as</span> List&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">            list.Sort();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> : <span class="title">IStrategy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">DoAlgorithm</span>(<span class="params"><span class="built_in">object</span> data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> list = data <span class="keyword">as</span> List&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">            list.Sort();</span><br><span class="line">            list.Reverse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// The client code picks a concrete strategy and passes it to the</span></span><br><span class="line">            <span class="comment">// context. The client should be aware of the differences between</span></span><br><span class="line">            <span class="comment">// strategies in order to make the right choice.</span></span><br><span class="line">            <span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Client: Strategy is set to normal sorting.&quot;</span>);</span><br><span class="line">            context.SetStrategy(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line">            context.DoSomeBusinessLogic();</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Client: Strategy is set to reverse sorting.&quot;</span>);</span><br><span class="line">            context.SetStrategy(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line">            context.DoSomeBusinessLogic();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">a,b,c,d,e</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">e,d,c,b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><p><strong>在 C++ 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 C++ 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.cc:</strong> 概念示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Strategy interface declares operations common to all supported versions</span></span><br><span class="line"><span class="comment"> * of some algorithm.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line"><span class="comment"> * Strategies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Strategy() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">DoAlgorithm</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; &amp;data)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Context defines the interface of interest to clients.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @var Strategy The Context maintains a reference to one of the Strategy</span></span><br><span class="line"><span class="comment">     * objects. The Context does not know the concrete class of a strategy. It</span></span><br><span class="line"><span class="comment">     * should work with all strategies via the Strategy interface.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Strategy *strategy_;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the Context accepts a strategy through the constructor, but also</span></span><br><span class="line"><span class="comment">     * provides a setter to change it at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Context(Strategy *strategy = <span class="literal">nullptr</span>) : strategy_(strategy)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Context()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;strategy_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_strategy</span><span class="params">(Strategy *strategy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;strategy_;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy_ = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context delegates some work to the Strategy object instead of</span></span><br><span class="line"><span class="comment">     * implementing +multiple versions of the algorithm on its own.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoSomeBusinessLogic</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Context: Sorting data using the strategy (not sure how it&#x27;ll do it)\n&quot;</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> result = <span class="keyword">this</span>-&gt;strategy_-&gt;DoAlgorithm(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Strategies implement the algorithm while following the base Strategy</span></span><br><span class="line"><span class="comment"> * interface. The interface makes them interchangeable in the Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> :</span> <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">DoAlgorithm</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; &amp;data)</span> <span class="keyword">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> result;</span><br><span class="line">        <span class="built_in">std</span>::for_each(<span class="built_in">std</span>::begin(data), <span class="built_in">std</span>::end(data), [&amp;result](<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;letter) &#123;</span><br><span class="line">            result += letter;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">std</span>::sort(<span class="built_in">std</span>::begin(result), <span class="built_in">std</span>::end(result));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> :</span> <span class="keyword">public</span> Strategy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">DoAlgorithm</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; &amp;data)</span> <span class="keyword">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> result;</span><br><span class="line">        <span class="built_in">std</span>::for_each(<span class="built_in">std</span>::begin(data), <span class="built_in">std</span>::end(data), [&amp;result](<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;letter) &#123;</span><br><span class="line">            result += letter;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">std</span>::sort(<span class="built_in">std</span>::begin(result), <span class="built_in">std</span>::end(result));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size() / <span class="number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(result[i], result[result.size() - i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code picks a concrete strategy and passes it to the context. The</span></span><br><span class="line"><span class="comment"> * client should be aware of the differences between strategies in order to make</span></span><br><span class="line"><span class="comment"> * the right choice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Context *context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Client: Strategy is set to normal sorting.\n&quot;</span>;</span><br><span class="line">    context-&gt;DoSomeBusinessLogic();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Client: Strategy is set to reverse sorting.\n&quot;</span>;</span><br><span class="line">    context-&gt;set_strategy(<span class="keyword">new</span> ConcreteStrategyB);</span><br><span class="line">    context-&gt;DoSomeBusinessLogic();</span><br><span class="line">    <span class="keyword">delete</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ClientCode();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">abcde</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">edcba</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-3"><p><strong>在 Java 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 Java 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p>Java 8 开始支持 lambda 方法， 它可作为一种替代策略模式的简单方式。</p><p>这里有一些核心 Java 程序库中策略模式的示例：</p><ul><li>对 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#compare-T-T-"><code>java.util.Comparator#compare()</code></a> 的调用来自 <code>Collections#sort()</code>.</li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"><code>javax.servlet.http.HttpServlet</code></a>：  <code>service­()</code>方法， 还有所有接受 <code>Http­Servlet­Request</code>和 <code>Http­Servlet­Response</code>对象作为参数的 <code>do­XXX()</code>方法。</li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-"><code>javax.servlet.Filter#doFilter()</code></a></li></ul><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><p><strong>电子商务应用中的支付方法</strong></p><p>在本例中， 策略模式被用于在电子商务应用中实现各种支付方法。 客户选中希望购买的商品后需要选择一种支付方式： Paypal 或者信用卡。</p><p>具体策略不仅会完成实际的支付工作， 还会改变支付表单的行为， 并在表单中提供相应的字段来记录支付信息。</p><p><strong>strategies</strong></p><p><strong>strategies/PayStrategy.java:</strong> 通用的支付方法接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.strategy.example.strategies;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Common interface for all strategies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> paymentAmount)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">collectPaymentDetails</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>strategies/PayByPayPal.java:</strong> 使用 PayPal 支付</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.strategy.example.strategies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete strategy. Implements PayPal payment method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayByPayPal</span> <span class="keyword">implements</span> <span class="title">PayStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; DATA_BASE = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BufferedReader READER = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> signedIn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DATA_BASE.put(<span class="string">&quot;amanda1985&quot;</span>, <span class="string">&quot;amanda@ya.com&quot;</span>);</span><br><span class="line">        DATA_BASE.put(<span class="string">&quot;qwerty&quot;</span>, <span class="string">&quot;john@amazon.eu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Collect customer&#x27;s data.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectPaymentDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!signedIn) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;Enter the user&#x27;s email: &quot;</span>);</span><br><span class="line">                email = READER.readLine();</span><br><span class="line">                System.out.print(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">                password = READER.readLine();</span><br><span class="line">                <span class="keyword">if</span> (verify()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Data verification has been successful.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Wrong email or password!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setSignedIn(email.equals(DATA_BASE.get(password)));</span><br><span class="line">        <span class="keyword">return</span> signedIn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save customer data for future shopping attempts.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> paymentAmount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (signedIn) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Paying &quot;</span> + paymentAmount + <span class="string">&quot; using PayPal.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSignedIn</span><span class="params">(<span class="keyword">boolean</span> signedIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.signedIn = signedIn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>strategies/PayByCreditCard.java:</strong> 使用信用卡支付</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.strategy.example.strategies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete strategy. Implements credit card payment method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayByCreditCard</span> <span class="keyword">implements</span> <span class="title">PayStrategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BufferedReader READER = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">private</span> CreditCard card;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Collect credit card data.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectPaymentDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Enter the card number: &quot;</span>);</span><br><span class="line">            String number = READER.readLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;Enter the card expiration date &#x27;mm/yy&#x27;: &quot;</span>);</span><br><span class="line">            String date = READER.readLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;Enter the CVV code: &quot;</span>);</span><br><span class="line">            String cvv = READER.readLine();</span><br><span class="line">            card = <span class="keyword">new</span> CreditCard(number, date, cvv);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Validate credit card number...</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * After card validation we can charge customer&#x27;s credit card.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> paymentAmount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cardIsPresent()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Paying &quot;</span> + paymentAmount + <span class="string">&quot; using Credit Card.&quot;</span>);</span><br><span class="line">            card.setAmount(card.getAmount() - paymentAmount);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cardIsPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>strategies/CreditCard.java:</strong> 信用卡类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.strategy.example.strategies;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dummy credit card class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreditCard</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> String cvv;</span><br><span class="line"></span><br><span class="line">    CreditCard(String number, String date, String cvv) &#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = <span class="number">100_000</span>;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">        <span class="keyword">this</span>.cvv = cvv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAmount</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>order/Order.java:</strong> 订单类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.strategy.example.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.strategy.example.strategies.PayStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Order class. Doesn&#x27;t know the concrete payment method (strategy) user has</span></span><br><span class="line"><span class="comment"> * picked. It uses common strategy interface to delegate collecting payment data</span></span><br><span class="line"><span class="comment"> * to strategy object. It can be used to save order to database.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isClosed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOrder</span><span class="params">(PayStrategy strategy)</span> </span>&#123;</span><br><span class="line">        strategy.collectPaymentDetails();</span><br><span class="line">        <span class="comment">// Here we could collect and store payment data from the strategy.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCost</span><span class="params">(<span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalCost += cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalCost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isClosed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClosed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isClosed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Demo.java:</strong> 客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.strategy.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.strategy.example.order.Order;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.strategy.example.strategies.PayByCreditCard;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.strategy.example.strategies.PayByPayPal;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.strategy.example.strategies.PayStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * World first console e-commerce application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; priceOnProducts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PayStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        priceOnProducts.put(<span class="number">1</span>, <span class="number">2200</span>);</span><br><span class="line">        priceOnProducts.put(<span class="number">2</span>, <span class="number">1850</span>);</span><br><span class="line">        priceOnProducts.put(<span class="number">3</span>, <span class="number">1100</span>);</span><br><span class="line">        priceOnProducts.put(<span class="number">4</span>, <span class="number">890</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!order.isClosed()) &#123;</span><br><span class="line">            <span class="keyword">int</span> cost;</span><br><span class="line"></span><br><span class="line">            String continueChoice;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;Please, select a product:&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;1 - Mother board&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;2 - CPU&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;3 - HDD&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;4 - Memory&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> choice = Integer.parseInt(reader.readLine());</span><br><span class="line">                cost = priceOnProducts.get(choice);</span><br><span class="line">                System.out.print(<span class="string">&quot;Count: &quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> count = Integer.parseInt(reader.readLine());</span><br><span class="line">                order.setTotalCost(cost * count);</span><br><span class="line">                System.out.print(<span class="string">&quot;Do you wish to continue selecting products? Y/N: &quot;</span>);</span><br><span class="line">                continueChoice = reader.readLine();</span><br><span class="line">            &#125; <span class="keyword">while</span> (continueChoice.equalsIgnoreCase(<span class="string">&quot;Y&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (strategy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Please, select a payment method:&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;1 - PalPay&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;2 - Credit Card&quot;</span>);</span><br><span class="line">                String paymentMethod = reader.readLine();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Client creates different strategies based on input from user,</span></span><br><span class="line">                <span class="comment">// application configuration, etc.</span></span><br><span class="line">                <span class="keyword">if</span> (paymentMethod.equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">                    strategy = <span class="keyword">new</span> PayByPayPal();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    strategy = <span class="keyword">new</span> PayByCreditCard();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Order object delegates gathering payment data to strategy object,</span></span><br><span class="line">            <span class="comment">// since only strategies know what data they need to process a</span></span><br><span class="line">            <span class="comment">// payment.</span></span><br><span class="line">            order.processOrder(strategy);</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">&quot;Pay &quot;</span> + order.getTotalCost() + <span class="string">&quot; units or Continue shopping? P/C: &quot;</span>);</span><br><span class="line">            String proceed = reader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (proceed.equalsIgnoreCase(<span class="string">&quot;P&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// Finally, strategy handles the payment.</span></span><br><span class="line">                <span class="keyword">if</span> (strategy.pay(order.getTotalCost())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Payment has been successful.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;FAIL! Please, check your data.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                order.setClosed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OutputDemo.png:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Please, select a product:</span><br><span class="line">1 - Mother board</span><br><span class="line">2 - CPU</span><br><span class="line">3 - HDD</span><br><span class="line">4 - Memory</span><br><span class="line">1</span><br><span class="line">Count: 2</span><br><span class="line">Do you wish to continue selecting products? Y&#x2F;N: y</span><br><span class="line">Please, select a product:</span><br><span class="line">1 - Mother board</span><br><span class="line">2 - CPU</span><br><span class="line">3 - HDD</span><br><span class="line">4 - Memory</span><br><span class="line">2</span><br><span class="line">Count: 1</span><br><span class="line">Do you wish to continue selecting products? Y&#x2F;N: n</span><br><span class="line">Please, select a payment method:</span><br><span class="line">1 - PalPay</span><br><span class="line">2 - Credit Card</span><br><span class="line">1</span><br><span class="line">Enter the user&#39;s email: user@example.com</span><br><span class="line">Enter the password: qwerty</span><br><span class="line">Wrong email or password!</span><br><span class="line">Enter user email: amanda@ya.com</span><br><span class="line">Enter password: amanda1985</span><br><span class="line">Data verification has been successful.</span><br><span class="line">Pay 6250 units or Continue shopping?  P&#x2F;C: p</span><br><span class="line">Paying 6250 using PayPal.</span><br><span class="line">Payment has been successful.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-4"><p><strong>在 PHP 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> PHP 代码中经常使用策略模式， 特别是必须在运行时切换算法的情形中。 但是， PHP 从 2009 年开始支持匿名函数， 以其为代表的强大竞争对手挑战着模式的使用。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><div class="tabs" id="php"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#php-1">概念示例</button></li><li class="tab"><button type="button" data-href="#php-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="php-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 PHP 应用案例。</p><p><strong>index.php:</strong> 概念示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">Strategy</span>\<span class="title">Conceptual</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Context defines the interface of interest to clients.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Strategy The Context maintains a reference to one of the Strategy</span></span><br><span class="line"><span class="comment">     * objects. The Context does not know the concrete class of a strategy. It</span></span><br><span class="line"><span class="comment">     * should work with all strategies via the Strategy interface.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the Context accepts a strategy through the constructor, but also</span></span><br><span class="line"><span class="comment">     * provides a setter to change it at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Strategy $strategy</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;strategy = $strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setStrategy</span>(<span class="params">Strategy $strategy</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;strategy = $strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context delegates some work to the Strategy object instead of</span></span><br><span class="line"><span class="comment">     * implementing multiple versions of the algorithm on its own.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomeBusinessLogic</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Context: Sorting data using the strategy (not sure how it&#x27;ll do it)\n&quot;</span>;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;strategy-&gt;doAlgorithm([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> implode(<span class="string">&quot;,&quot;</span>, $result) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Strategy interface declares operations common to all supported versions</span></span><br><span class="line"><span class="comment"> * of some algorithm.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line"><span class="comment"> * Strategies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doAlgorithm</span>(<span class="params"><span class="keyword">array</span> $data</span>): <span class="title">array</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Strategies implement the algorithm while following the base Strategy</span></span><br><span class="line"><span class="comment"> * interface. The interface makes them interchangeable in the Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doAlgorithm</span>(<span class="params"><span class="keyword">array</span> $data</span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort($data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doAlgorithm</span>(<span class="params"><span class="keyword">array</span> $data</span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rsort($data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code picks a concrete strategy and passes it to the context. The</span></span><br><span class="line"><span class="comment"> * client should be aware of the differences between strategies in order to make</span></span><br><span class="line"><span class="comment"> * the right choice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Client: Strategy is set to normal sorting.\n&quot;</span>;</span><br><span class="line">$context-&gt;doSomeBusinessLogic();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Client: Strategy is set to reverse sorting.\n&quot;</span>;</span><br><span class="line">$context-&gt;setStrategy(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line">$context-&gt;doSomeBusinessLogic();</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">a,b,c,d,e</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">e,d,c,b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="php-2"><p><strong>真实世界示例</strong></p><p>在本例中， <strong>策略</strong>模式被用于表示电子商务应用中的支付方式。</p><p>每种支付方式都可以展示特定的支付表单以收集相应的用户支付信息， 并能将其发送给支付处理公司。 然后， 支付处理公司会将用户重定向回我们的网站， 然后支付方法会验证返回参数并帮助确定订单是否已完成。</p><p><strong>index.php:</strong> 真实世界示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">Strategy</span>\<span class="title">RealWorld</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the router and controller of our application. Upon receiving a</span></span><br><span class="line"><span class="comment"> * request, this class decides what behavior should be executed. When the app</span></span><br><span class="line"><span class="comment"> * receives a payment request, the OrderController class also decides which</span></span><br><span class="line"><span class="comment"> * payment method it should use to process the request. Thus, the class acts as</span></span><br><span class="line"><span class="comment"> * the Context and the Client at the same time.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle POST requests.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params"><span class="keyword">string</span> $url, <span class="keyword">array</span> $data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Controller: POST request to <span class="subst">$url</span> with &quot;</span> . json_encode($data) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        $path = parse_url($url, PHP_URL_PATH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;#^/orders?$#&#x27;</span>, $path, $matches)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;postNewOrder($data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Controller: 404 page\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle GET requests.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="keyword">string</span> $url</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Controller: GET request to <span class="subst">$url</span>\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        $path = parse_url($url, PHP_URL_PATH);</span><br><span class="line">        $query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line">        parse_str($query, $data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;#^/orders?$#&#x27;</span>, $path, $matches)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;getAllOrders();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">&#x27;#^/order/([0-9]+?)/payment/([a-z]+?)(/return)?$#&#x27;</span>, $path, $matches)) &#123;</span><br><span class="line">            $order = Order::get($matches[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The payment method (strategy) is selected according to the value</span></span><br><span class="line">            <span class="comment">// passed along with the request.</span></span><br><span class="line">            $paymentMethod = PaymentFactory::getPaymentMethod($matches[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>($matches[<span class="number">3</span>])) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;getPayment($paymentMethod, $order, $data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;getPaymentReturn($paymentMethod, $order, $data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Controller: 404 page\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * POST /order &#123;data&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">postNewOrder</span>(<span class="params"><span class="keyword">array</span> $data</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $order = <span class="keyword">new</span> Order($data);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Controller: Created the order #<span class="subst">&#123;$order-&gt;id&#125;</span>.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET /orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllOrders</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Controller: Here&#x27;s all orders:\n&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (Order::get() <span class="keyword">as</span> $order) &#123;</span><br><span class="line">            <span class="keyword">echo</span> json_encode($order, JSON_PRETTY_PRINT) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET /order/123/payment/XX</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPayment</span>(<span class="params">PaymentMethod $method, Order $order, <span class="keyword">array</span> $data</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// The actual work is delegated to the payment method object.</span></span><br><span class="line">        $form = $method-&gt;getPaymentForm($order);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Controller: here&#x27;s the payment form:\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> $form . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET /order/123/payment/XXX/return?key=AJHKSJHJ3423&amp;success=true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPaymentReturn</span>(<span class="params">PaymentMethod $method, Order $order, <span class="keyword">array</span> $data</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Another type of work delegated to the payment method.</span></span><br><span class="line">            <span class="keyword">if</span> ($method-&gt;validateReturn($order, $data)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Controller: Thanks for your order!\n&quot;</span>;</span><br><span class="line">                $order-&gt;complete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> $e) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Controller: got an exception (&quot;</span> . $e-&gt;getMessage() . <span class="string">&quot;)\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A simplified representation of the Order class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * For the sake of simplicity, we&#x27;ll store all created orders here...</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> $orders = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ...and access them from here.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $orderId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="keyword">int</span> $orderId = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($orderId === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">static</span>::$orders;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">static</span>::$orders[$orderId];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Order constructor assigns the values of the order&#x27;s fields. To keep</span></span><br><span class="line"><span class="comment">     * things simple, there is no validation whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $attributes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $attributes</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = count(<span class="built_in">static</span>::$orders);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;status = <span class="string">&quot;new&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($attributes <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;$key&#125; = $value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">static</span>::$orders[<span class="keyword">$this</span>-&gt;id] = <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The method to call when an order gets paid.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">complete</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;status = <span class="string">&quot;completed&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Order: #<span class="subst">&#123;$this-&gt;id&#125;</span> is now <span class="subst">&#123;$this-&gt;status&#125;</span>.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class helps to produce a proper strategy object for handling a payment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a payment method by its ID.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PaymentMethod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getPaymentMethod</span>(<span class="params"><span class="keyword">string</span> $id</span>): <span class="title">PaymentMethod</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ($id) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;cc&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CreditCardPayment();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;paypal&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PayPalPayment();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&quot;Unknown Payment Method&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Strategy interface describes how a client can use various Concrete</span></span><br><span class="line"><span class="comment"> * Strategies.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that in most examples you can find on the Web, strategies tend to do</span></span><br><span class="line"><span class="comment"> * some tiny thing within one method. However, in reality, your strategies can</span></span><br><span class="line"><span class="comment"> * be much more robust (by having several methods, for example).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PaymentMethod</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPaymentForm</span>(<span class="params">Order $order</span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateReturn</span>(<span class="params">Order $order, <span class="keyword">array</span> $data</span>): <span class="title">bool</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This Concrete Strategy provides a payment form and validates returns for</span></span><br><span class="line"><span class="comment"> * credit card payments.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreditCardPayment</span> <span class="keyword">implements</span> <span class="title">PaymentMethod</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">private</span> $store_secret_key = <span class="string">&quot;swordfish&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPaymentForm</span>(<span class="params">Order $order</span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $returnURL = <span class="string">&quot;https://our-website.com/&quot;</span> .</span><br><span class="line">            <span class="string">&quot;order/<span class="subst">&#123;$order-&gt;id&#125;</span>/payment/cc/return&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &lt;&lt;&lt;FORM</span><br><span class="line">&lt;form action=<span class="string">&quot;https://my-credit-card-processor.com/charge&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;<span class="subst">&#123;$order-&gt;email&#125;</span>&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;total&quot;</span> value=<span class="string">&quot;<span class="subst">&#123;$order-&gt;total&#125;</span>&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;returnURL&quot;</span> value=<span class="string">&quot;<span class="subst">$returnURL</span>&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;cardholder-name&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;credit-card&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;expiration-date&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;ccv-number&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Pay&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">FORM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateReturn</span>(<span class="params">Order $order, <span class="keyword">array</span> $data</span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;CreditCardPayment: ...validating... &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($data[<span class="string">&#x27;key&#x27;</span>] != md5($order-&gt;id . <span class="built_in">static</span>::$store_secret_key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&quot;Payment key is wrong.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($data[<span class="string">&#x27;success&#x27;</span>]) || !$data[<span class="string">&#x27;success&#x27;</span>] || $data[<span class="string">&#x27;success&#x27;</span>] == <span class="string">&#x27;false&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&quot;Payment failed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (floatval($data[<span class="string">&#x27;total&#x27;</span>]) &lt; $order-&gt;total) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&quot;Payment amount is wrong.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Done!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This Concrete Strategy provides a payment form and validates returns for</span></span><br><span class="line"><span class="comment"> * PayPal payments.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayPalPayment</span> <span class="keyword">implements</span> <span class="title">PaymentMethod</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPaymentForm</span>(<span class="params">Order $order</span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $returnURL = <span class="string">&quot;https://our-website.com/&quot;</span> .</span><br><span class="line">            <span class="string">&quot;order/<span class="subst">&#123;$order-&gt;id&#125;</span>/payment/paypal/return&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &lt;&lt;&lt;FORM</span><br><span class="line">&lt;form action=<span class="string">&quot;https://paypal.com/payment&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;<span class="subst">&#123;$order-&gt;email&#125;</span>&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;total&quot;</span> value=<span class="string">&quot;<span class="subst">&#123;$order-&gt;total&#125;</span>&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;returnURL&quot;</span> value=<span class="string">&quot;<span class="subst">$returnURL</span>&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Pay on PayPal&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">FORM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validateReturn</span>(<span class="params">Order $order, <span class="keyword">array</span> $data</span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;PayPalPayment: ...validating... &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Done!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$controller = <span class="keyword">new</span> OrderController();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Client: Let&#x27;s create some orders\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">$controller-&gt;post(<span class="string">&quot;/orders&quot;</span>, [</span><br><span class="line">    <span class="string">&quot;email&quot;</span> =&gt; <span class="string">&quot;me@example.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;product&quot;</span> =&gt; <span class="string">&quot;ABC Cat food (XL)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;total&quot;</span> =&gt; <span class="number">9.95</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$controller-&gt;post(<span class="string">&quot;/orders&quot;</span>, [</span><br><span class="line">    <span class="string">&quot;email&quot;</span> =&gt; <span class="string">&quot;me@example.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;product&quot;</span> =&gt; <span class="string">&quot;XYZ Cat litter (XXL)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;total&quot;</span> =&gt; <span class="number">19.95</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nClient: List my orders, please\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">$controller-&gt;get(<span class="string">&quot;/orders&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nClient: I&#x27;d like to pay for the second, show me the payment form\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">$controller-&gt;get(<span class="string">&quot;/order/1/payment/paypal&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nClient: ...pushes the Pay button...\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nClient: Oh, I&#x27;m redirected to the PayPal.\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nClient: ...pays on the PayPal...\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\nClient: Alright, I&#x27;m back with you, guys.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">$controller-&gt;get(<span class="string">&quot;/order/1/payment/paypal/return&quot;</span> .</span><br><span class="line">    <span class="string">&quot;?key=c55a3964833a4b0fa4469ea94a057152&amp;success=true&amp;total=19.95&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Client: Let&#39;s create some orders</span><br><span class="line">Controller: POST request to &#x2F;orders with &#123;&quot;email&quot;:&quot;me@example.com&quot;,&quot;product&quot;:&quot;ABC Cat food (XL)&quot;,&quot;total&quot;:9.95&#125;</span><br><span class="line">Controller: Created the order #0.</span><br><span class="line">Controller: POST request to &#x2F;orders with &#123;&quot;email&quot;:&quot;me@example.com&quot;,&quot;product&quot;:&quot;XYZ Cat litter (XXL)&quot;,&quot;total&quot;:19.95&#125;</span><br><span class="line">Controller: Created the order #1.</span><br><span class="line"></span><br><span class="line">Client: List my orders, please</span><br><span class="line">Controller: GET request to &#x2F;orders</span><br><span class="line">Controller: Here&#39;s all orders:</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 0,</span><br><span class="line">    &quot;status&quot;: &quot;new&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;me@example.com&quot;,</span><br><span class="line">    &quot;product&quot;: &quot;ABC Cat food (XL)&quot;,</span><br><span class="line">    &quot;total&quot;: 9.95</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;status&quot;: &quot;new&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;me@example.com&quot;,</span><br><span class="line">    &quot;product&quot;: &quot;XYZ Cat litter (XXL)&quot;,</span><br><span class="line">    &quot;total&quot;: 19.95</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Client: I&#39;d like to pay for the second, show me the payment form</span><br><span class="line">Controller: GET request to &#x2F;order&#x2F;1&#x2F;payment&#x2F;paypal</span><br><span class="line">Controller: here&#39;s the payment form:</span><br><span class="line">&lt;form action&#x3D;&quot;https:&#x2F;&#x2F;paypal.com&#x2F;payment&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;email&quot; value&#x3D;&quot;me@example.com&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;total&quot; value&#x3D;&quot;19.95&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;returnURL&quot; value&#x3D;&quot;https:&#x2F;&#x2F;our-website.com&#x2F;order&#x2F;1&#x2F;payment&#x2F;paypal&#x2F;return&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Pay on PayPal&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">Client: ...pushes the Pay button...</span><br><span class="line"></span><br><span class="line">Client: Oh, I&#39;m redirected to the PayPal.</span><br><span class="line"></span><br><span class="line">Client: ...pays on the PayPal...</span><br><span class="line"></span><br><span class="line">Client: Alright, I&#39;m back with you, guys.</span><br><span class="line">Controller: GET request to &#x2F;order&#x2F;1&#x2F;payment&#x2F;paypal&#x2F;return?key&#x3D;c55a3964833a4b0fa4469ea94a057152&amp;success&#x3D;true&amp;total&#x3D;19.95</span><br><span class="line">PayPalPayment: ...validating... Done!</span><br><span class="line">Controller: Thanks for your order!</span><br><span class="line">Order: #1 is now completed.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-5"><p><strong>在 Python 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 Python 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.py:</strong> 概念示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Context defines the interface of interest to clients.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, strategy: Strategy</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Usually, the Context accepts a strategy through the constructor, but</span></span><br><span class="line"><span class="string">        also provides a setter to change it at runtime.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        self._strategy = strategy</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strategy</span>(<span class="params">self</span>) -&gt; Strategy:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The Context maintains a reference to one of the Strategy objects. The</span></span><br><span class="line"><span class="string">        Context does not know the concrete class of a strategy. It should work</span></span><br><span class="line"><span class="string">        with all strategies via the Strategy interface.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self._strategy</span><br><span class="line"></span><br><span class="line"><span class="meta">    @strategy.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strategy</span>(<span class="params">self, strategy: Strategy</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        self._strategy = strategy</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_some_business_logic</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The Context delegates some work to the Strategy object instead of</span></span><br><span class="line"><span class="string">        implementing multiple versions of the algorithm on its own.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Context: Sorting data using the strategy (not sure how it&#x27;ll do it)&quot;</span>)</span><br><span class="line">        result = self._strategy.do_algorithm([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>])</span><br><span class="line">        print(<span class="string">&quot;,&quot;</span>.join(result))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Strategy interface declares operations common to all supported versions</span></span><br><span class="line"><span class="string">    of some algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line"><span class="string">    Strategies.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_algorithm</span>(<span class="params">self, data: List</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Concrete Strategies implement the algorithm while following the base Strategy</span></span><br><span class="line"><span class="string">interface. The interface makes them interchangeable in the Context.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span>(<span class="params">Strategy</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_algorithm</span>(<span class="params">self, data: List</span>) -&gt; List:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span>(<span class="params">Strategy</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_algorithm</span>(<span class="params">self, data: List</span>) -&gt; List:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reversed</span>(<span class="built_in">sorted</span>(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># The client code picks a concrete strategy and passes it to the context.</span></span><br><span class="line">    <span class="comment"># The client should be aware of the differences between strategies in order</span></span><br><span class="line">    <span class="comment"># to make the right choice.</span></span><br><span class="line"></span><br><span class="line">    context = Context(ConcreteStrategyA())</span><br><span class="line">    print(<span class="string">&quot;Client: Strategy is set to normal sorting.&quot;</span>)</span><br><span class="line">    context.do_some_business_logic()</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Client: Strategy is set to reverse sorting.&quot;</span>)</span><br><span class="line">    context.strategy = ConcreteStrategyB()</span><br><span class="line">    context.do_some_business_logic()</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">a,b,c,d,e</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">e,d,c,b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-6"><p><strong>在 Ruby 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 Ruby 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.rb:</strong> 概念示例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Context defines the interface of interest to clients.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line">  <span class="comment"># The Context maintains a reference to one of the Strategy objects. The</span></span><br><span class="line">  <span class="comment"># Context does not know the concrete class of a strategy. It should work with</span></span><br><span class="line">  <span class="comment"># all strategies via the Strategy interface.</span></span><br><span class="line">  <span class="keyword">attr_writer</span> <span class="symbol">:strategy</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Usually, the Context accepts a strategy through the constructor, but also</span></span><br><span class="line">  <span class="comment"># provides a setter to change it at runtime.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(strategy)</span></span></span><br><span class="line">    @strategy = strategy</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">strategy=</span><span class="params">(strategy)</span></span></span><br><span class="line">    @strategy = strategy</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The Context delegates some work to the Strategy object instead of</span></span><br><span class="line">  <span class="comment"># implementing multiple versions of the algorithm on its own.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_some_business_logic</span></span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    puts <span class="string">&#x27;Context: Sorting data using the strategy (not sure how it\&#x27;ll do it)&#x27;</span></span><br><span class="line">    result = @strategy.do_algorithm(<span class="string">%w[a b c d e]</span>)</span><br><span class="line">    print result.join(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Strategy interface declares operations common to all supported versions of</span></span><br><span class="line"><span class="comment"># some algorithm.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line"><span class="comment"># Strategies.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span></span></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Array] data</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_algorithm</span><span class="params">(_data)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concrete Strategies implement the algorithm while following the base Strategy</span></span><br><span class="line"><span class="comment"># interface. The interface makes them interchangeable in the Context.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> &lt; Strategy</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Array] data</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@return</span> [Array]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_algorithm</span><span class="params">(data)</span></span></span><br><span class="line">    data.sort</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> &lt; Strategy</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Array] data</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@return</span> [Array]</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_algorithm</span><span class="params">(data)</span></span></span><br><span class="line">    data.sort.reverse</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client code picks a concrete strategy and passes it to the context. The</span></span><br><span class="line"><span class="comment"># client should be aware of the differences between strategies in order to make</span></span><br><span class="line"><span class="comment"># the right choice.</span></span><br><span class="line"></span><br><span class="line">context = Context.new(ConcreteStrategyA.new)</span><br><span class="line">puts <span class="string">&#x27;Client: Strategy is set to normal sorting.&#x27;</span></span><br><span class="line">context.do_some_business_logic</span><br><span class="line">puts <span class="string">&quot;\n\n&quot;</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&#x27;Client: Strategy is set to reverse sorting.&#x27;</span></span><br><span class="line">context.strategy = ConcreteStrategyB.new</span><br><span class="line">context.do_some_business_logic</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">a,b,c,d,e</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">e,d,c,b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-7"><p><strong>在 Swift 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 Swift 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><div class="tabs" id="swift"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#swift-1">概念示例</button></li><li class="tab"><button type="button" data-href="#swift-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="swift-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 Swift 应用案例。</p><p><strong>Example.swift:</strong> 概念示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Context defines the interface of interest to clients.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The Context maintains a reference to one of the Strategy objects. The</span></span><br><span class="line">    <span class="comment">/// Context does not know the concrete class of a strategy. It should work</span></span><br><span class="line">    <span class="comment">/// with all strategies via the Strategy interface.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> strategy: <span class="type">Strategy</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Usually, the Context accepts a strategy through the constructor, but</span></span><br><span class="line">    <span class="comment">/// also provides a setter to change it at runtime.</span></span><br><span class="line">    <span class="keyword">init</span>(strategy: <span class="type">Strategy</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.strategy = strategy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(strategy: Strategy)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.strategy = strategy</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The Context delegates some work to the Strategy object instead of</span></span><br><span class="line">    <span class="comment">/// implementing multiple versions of the algorithm on its own.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doSomeBusinessLogic</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Context: Sorting data using the strategy (not sure how it&#x27;ll do it)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> result = strategy.doAlgorithm([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>])</span><br><span class="line">        <span class="built_in">print</span>(result.joined(separator: <span class="string">&quot;,&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Strategy interface declares operations common to all supported versions</span></span><br><span class="line"><span class="comment">/// of some algorithm.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line"><span class="comment">/// Strategies.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doAlgorithm</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> data: [T])</span></span> -&gt; [<span class="type">T</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Concrete Strategies implement the algorithm while following the base</span></span><br><span class="line"><span class="comment">/// Strategy interface. The interface makes them interchangeable in the Context.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span>: <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doAlgorithm</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> data: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> data.sorted()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span>: <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doAlgorithm</span>&lt;T: Comparable&gt;<span class="params">(<span class="number">_</span> data: [T])</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> data.sorted(by: &gt;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Let&#x27;s see how it all works together.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyConceptual</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// The client code picks a concrete strategy and passes it to the</span></span><br><span class="line">        <span class="comment">/// context. The client should be aware of the differences between</span></span><br><span class="line">        <span class="comment">/// strategies in order to make the right choice.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> context = <span class="type">Context</span>(strategy: <span class="type">ConcreteStrategyA</span>())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Client: Strategy is set to normal sorting.\n&quot;</span>)</span><br><span class="line">        context.doSomeBusinessLogic()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nClient: Strategy is set to reverse sorting.\n&quot;</span>)</span><br><span class="line">        context.update(strategy: <span class="type">ConcreteStrategyB</span>())</span><br><span class="line">        context.doSomeBusinessLogic()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line"></span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line"></span><br><span class="line">a,b,c,d,e</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line"></span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line"></span><br><span class="line">e,d,c,b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="swift-2"><p><strong>真实世界示例</strong></p><p><strong>Example.swift:</strong> 真实世界示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyRealWorld</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// This example shows a simple implementation of a list controller that is</span></span><br><span class="line">    <span class="comment">/// able to display models from different data sources:</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// (MemoryStorage, CoreDataStorage, RealmStorage)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> controller = <span class="type">ListController</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> memoryStorage = <span class="type">MemoryStorage</span>&lt;<span class="type">User</span>&gt;()</span><br><span class="line">        memoryStorage.add(usersFromNetwork())</span><br><span class="line"></span><br><span class="line">        clientCode(use: controller, with: memoryStorage)</span><br><span class="line"></span><br><span class="line">        clientCode(use: controller, with: <span class="type">CoreDataStorage</span>())</span><br><span class="line"></span><br><span class="line">        clientCode(use: controller, with: <span class="type">RealmStorage</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clientCode</span><span class="params">(use controller: ListController, with dataSource: DataSource)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        controller.update(dataSource: dataSource)</span><br><span class="line">        controller.displayModels()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">usersFromNetwork</span><span class="params">()</span></span> -&gt; [<span class="type">User</span>] &#123;</span><br><span class="line">        <span class="keyword">let</span> firstUser = <span class="type">User</span>(id: <span class="number">1</span>, username: <span class="string">&quot;username1&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> secondUser = <span class="type">User</span>(id: <span class="number">2</span>, username: <span class="string">&quot;username2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> [firstUser, secondUser]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dataSource: <span class="type">DataSource?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(dataSource: DataSource)</span></span> &#123;</span><br><span class="line">        <span class="comment">/// ... resest current states ...</span></span><br><span class="line">        <span class="keyword">self</span>.dataSource = dataSource</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">displayModels</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> dataSource = dataSource <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> models = dataSource.loadModels() <span class="keyword">as</span> [<span class="type">User</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// Bind models to cells of a list view...</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nListController: Displaying models...&quot;</span>)</span><br><span class="line">        models.forEach(&#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadModels</span>&lt;T: DomainModel&gt;<span class="params">()</span></span> -&gt; [<span class="type">T</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStorage</span>&lt;<span class="title">Model</span>&gt;: <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> items = [<span class="type">Model</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> items: [Model])</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.items.append(contentsOf: items)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadModels</span>&lt;T: DomainModel&gt;<span class="params">()</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">T</span>.<span class="keyword">self</span> == <span class="type">User</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line">        <span class="keyword">return</span> items <span class="keyword">as</span>! [<span class="type">T</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoreDataStorage</span>: <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadModels</span>&lt;T: DomainModel&gt;<span class="params">()</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">T</span>.<span class="keyword">self</span> == <span class="type">User</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> firstUser = <span class="type">User</span>(id: <span class="number">3</span>, username: <span class="string">&quot;username3&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> secondUser = <span class="type">User</span>(id: <span class="number">4</span>, username: <span class="string">&quot;username4&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [firstUser, secondUser] <span class="keyword">as</span>! [<span class="type">T</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealmStorage</span>: <span class="title">DataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">loadModels</span>&lt;T: DomainModel&gt;<span class="params">()</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">T</span>.<span class="keyword">self</span> == <span class="type">User</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> [] &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> firstUser = <span class="type">User</span>(id: <span class="number">5</span>, username: <span class="string">&quot;username5&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> secondUser = <span class="type">User</span>(id: <span class="number">6</span>, username: <span class="string">&quot;username6&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [firstUser, secondUser] <span class="keyword">as</span>! [<span class="type">T</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DomainModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">DomainModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ListController: Displaying models...</span><br><span class="line">User(id: 1, username: &quot;username1&quot;)</span><br><span class="line">User(id: 2, username: &quot;username2&quot;)</span><br><span class="line"></span><br><span class="line">ListController: Displaying models...</span><br><span class="line">User(id: 3, username: &quot;username3&quot;)</span><br><span class="line">User(id: 4, username: &quot;username4&quot;)</span><br><span class="line"></span><br><span class="line">ListController: Displaying models...</span><br><span class="line">User(id: 5, username: &quot;username5&quot;)</span><br><span class="line">User(id: 6, username: &quot;username6&quot;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-8"><p><strong>在 TypeScript 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 策略模式在 TypeScript 代码中很常见。 它经常在各种框架中使用， 能在不扩展类的情况下向用户提供改变其行为的方式。</p><p><strong>识别方法：</strong> 策略模式可以通过允许嵌套对象完成实际工作的方法以及允许将该对象替换为不同对象的设置器来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>策略</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>index.ts:</strong> 概念示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Context defines the interface of interest to clients.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type <span class="type">&#123;Strategy&#125;</span> </span>The Context maintains a reference to one of the Strategy</span></span><br><span class="line"><span class="comment">     * objects. The Context does not know the concrete class of a strategy. It</span></span><br><span class="line"><span class="comment">     * should work with all strategies via the Strategy interface.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> strategy: Strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the Context accepts a strategy through the constructor, but also</span></span><br><span class="line"><span class="comment">     * provides a setter to change it at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">strategy: Strategy</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the Context allows replacing a Strategy object at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">setStrategy</span>(<span class="params">strategy: Strategy</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context delegates some work to the Strategy object instead of</span></span><br><span class="line"><span class="comment">     * implementing multiple versions of the algorithm on its own.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> doSomeBusinessLogic(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Context: Sorting data using the strategy (not sure how it\&#x27;ll do it)&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="built_in">this</span>.strategy.doAlgorithm([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(result.join(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Strategy interface declares operations common to all supported versions</span></span><br><span class="line"><span class="comment"> * of some algorithm.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The Context uses this interface to call the algorithm defined by Concrete</span></span><br><span class="line"><span class="comment"> * Strategies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Strategy &#123;</span><br><span class="line">    doAlgorithm(data: <span class="built_in">string</span>[]): <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Strategies implement the algorithm while following the base Strategy</span></span><br><span class="line"><span class="comment"> * interface. The interface makes them interchangeable in the Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="title">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> doAlgorithm(data: <span class="built_in">string</span>[]): <span class="built_in">string</span>[] &#123;</span><br><span class="line">        <span class="keyword">return</span> data.sort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="title">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> doAlgorithm(data: <span class="built_in">string</span>[]): <span class="built_in">string</span>[] &#123;</span><br><span class="line">        <span class="keyword">return</span> data.reverse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code picks a concrete strategy and passes it to the context. The</span></span><br><span class="line"><span class="comment"> * client should be aware of the differences between strategies in order to make</span></span><br><span class="line"><span class="comment"> * the right choice.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Client: Strategy is set to normal sorting.&#x27;</span>);</span><br><span class="line">context.doSomeBusinessLogic();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Client: Strategy is set to reverse sorting.&#x27;</span>);</span><br><span class="line">context.setStrategy(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line">context.doSomeBusinessLogic();</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Client: Strategy is set to normal sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">a,b,c,d,e</span><br><span class="line"></span><br><span class="line">Client: Strategy is set to reverse sorting.</span><br><span class="line">Context: Sorting data using the strategy (not sure how it&#39;ll do it)</span><br><span class="line">e,d,c,b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-9"><p><strong>概念示例</strong></p><p>思考一下构建内存缓存的情形。 由于处在内存中， 故其大小会存在限制。 在达到其上限后， 一些条目就必须被移除以留出空间。 此类操作可通过多种算法进行实现。 一些流行的算法有：</p><ul><li>最少最近使用 （LRU）： 移除最近使用最少的一条条目。</li><li>先进先出 （FIFO）： 移除最早创建的条目。</li><li>最少使用 （LFU）： 移除使用频率最低一条条目。</li></ul><p>问题在于如何将我们的缓存类与这些算法解耦， 以便在运行时更改算法。 此外， 在添加新算法时， 缓存类不应改变。</p><p>这就是策略模式发挥作用的场景。 可创建一系列的算法， 每个算法都有自己的类。 这些类中的每一个都遵循相同的接口， 这使得系列算法之间可以互换。 假设通用接口名称为 <code>eviction­Algo</code>移除算法 。</p><p>现在， 我们的主要缓存类将嵌入至 <code>eviction­Algo</code>接口中。 缓存类会将全部类型的移除算法委派给 <code>eviction­Algo</code>接口， 而不是自行实现。 鉴于 <code>eviction­Algo</code>是一个接口， 我们可在运行时将算法更改为 LRU、 FIFO 或者 LFU， 而不需要对缓存类做出任何更改。</p><p><strong>evictionAlgo.go:</strong> 策略接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> evictionAlgo <span class="keyword">interface</span> &#123;</span><br><span class="line">    evict(c *cache)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fifo.go:</strong> 具体策略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fifo <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *fifo)</span> <span class="title">evict</span><span class="params">(c *cache)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Evicting by fifo strtegy&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>lru.go:</strong> 具体策略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> lru <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *lru)</span> <span class="title">evict</span><span class="params">(c *cache)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Evicting by lru strtegy&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>lfu.go:</strong> 具体策略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> lfu <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *lfu)</span> <span class="title">evict</span><span class="params">(c *cache)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Evicting by lfu strtegy&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cache.go:</strong> 背景</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cache <span class="keyword">struct</span> &#123;</span><br><span class="line">    storage      <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">    evictionAlgo evictionAlgo</span><br><span class="line">    capacity     <span class="keyword">int</span></span><br><span class="line">    maxCapacity  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initCache</span><span class="params">(e evictionAlgo)</span> *<span class="title">cache</span></span> &#123;</span><br><span class="line">    storage := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">return</span> &amp;cache&#123;</span><br><span class="line">        storage:      storage,</span><br><span class="line">        evictionAlgo: e,</span><br><span class="line">        capacity:     <span class="number">0</span>,</span><br><span class="line">        maxCapacity:  <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cache)</span> <span class="title">setEvictionAlgo</span><span class="params">(e evictionAlgo)</span></span> &#123;</span><br><span class="line">    c.evictionAlgo = e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cache)</span> <span class="title">add</span><span class="params">(key, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> c.capacity == c.maxCapacity &#123;</span><br><span class="line">        c.evict()</span><br><span class="line">    &#125;</span><br><span class="line">    c.capacity++</span><br><span class="line">    c.storage[key] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cache)</span> <span class="title">get</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">delete</span>(c.storage, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cache)</span> <span class="title">evict</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c.evictionAlgo.evict(c)</span><br><span class="line">    c.capacity--</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.go:</strong> 客户端代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lfu := &amp;lfu&#123;&#125;</span><br><span class="line">    cache := initCache(lfu)</span><br><span class="line"></span><br><span class="line">    cache.add(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    cache.add(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    cache.add(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    lru := &amp;lru&#123;&#125;</span><br><span class="line">    cache.setEvictionAlgo(lru)</span><br><span class="line"></span><br><span class="line">    cache.add(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fifo := &amp;fifo&#123;&#125;</span><br><span class="line">    cache.setEvictionAlgo(fifo)</span><br><span class="line"></span><br><span class="line">    cache.add(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Evicting by lfu strtegy</span><br><span class="line">Evicting by lru strtegy</span><br><span class="line">Evicting by fifo strtegy</span><br></pre></td></tr></table></figure><p><em>根据： <a href="https://golangbyexample.com/strategy-design-pattern-golang/">Golang By Example</a></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/strategy&quot;&gt;https://refactoringguru.cn/design-patterns/strategy&lt;/a&gt;&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>行为模式-状态模式</title>
    <link href="http://wangyangyangisme.github.io/posts/95d77da4/"/>
    <id>http://wangyangyangisme.github.io/posts/95d77da4/</id>
    <published>2021-05-04T12:24:54.000Z</published>
    <updated>2021-05-04T12:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/state">https://refactoringguru.cn/design-patterns/state</a></p></blockquote><h1 id="行为模式-状态模式"><a href="#行为模式-状态模式" class="headerlink" title="行为模式-状态模式"></a>行为模式-状态模式</h1><p><strong>亦称：</strong> State</p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>状态模式</strong>是一种行为设计模式， 让你能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/state-zh.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>状态模式与<a href="https://en.wikipedia.org/wiki/Finite-state_machine">有限状态机</a>的概念紧密相关。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/problem1-state.png" alt="有限状态机。"></p><p>其主要思想是程序在任意时刻仅可处于几种<em>有限</em>的<em>状态</em>中。 在任何一个特定状态中， 程序的行为都不相同， 且可瞬间从一个状态切换到另一个状态。 不过， 根据当前状态， 程序可能会切换到另外一种状态， 也可能会保持当前状态不变。 这些数量有限且预先定义的状态切换规则被称为<em>转移</em>。</p><p>你还可将该方法应用在对象上。 假如你有一个 <code>文档</code>Document类。 文档可能会处于 <code>草稿</code>Draft 、  <code>审阅中</code>Moderation和 <code>已发布</code>Published三种状态中的一种。 文档的 <code>publish</code>发布方法在不同状态下的行为略有不同：</p><ul><li>处于 <code>草稿</code>状态时， 它会将文档转移到审阅中状态。</li><li>处于 <code>审阅中</code>状态时， 如果当前用户是管理员， 它会公开发布文档。</li><li>处于 <code>已发布</code>状态时， 它不会进行任何操作。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/problem2-zh-state.png" alt="文档对象的全部状态和转移。"></p><p>状态机通常由众多条件运算符 （ <code>if</code>或 <code>switch</code> ） 实现， 可根据对象的当前状态选择相应的行为。  “状态” 通常只是对象中的一组成员变量值。 即使你之前从未听说过有限状态机， 你也很可能已经实现过状态模式。 下面的代码应该能帮助你回忆起来。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Document <span class="keyword">is</span></span><br><span class="line">    field state: <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    method publish() <span class="keyword">is</span></span><br><span class="line">        switch (state)</span><br><span class="line">            &quot;draft&quot;:</span><br><span class="line">                state = &quot;moderation&quot;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &quot;moderation&quot;:</span><br><span class="line">                <span class="keyword">if</span> (currentUser.role == <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">                    state = &quot;published&quot;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &quot;published&quot;:</span><br><span class="line">                <span class="comment">// 什么也不做。</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>当我们逐步在 <code>文档</code>类中添加更多状态和依赖于状态的行为后， 基于条件语句的状态机就会暴露其最大的弱点。 为了能根据当前状态选择完成相应行为的方法， 绝大部分方法中会包含复杂的条件语句。 修改其转换逻辑可能会涉及到修改所有方法中的状态条件语句， 导致代码的维护工作非常艰难。</p><p>这个问题会随着项目进行变得越发严重。 我们很难在设计阶段预测到所有可能的状态和转换。 随着时间推移， 最初仅包含有限条件语句的简洁状态机可能会变成臃肿的一团乱麻。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>状态模式建议为对象的所有可能状态新建一个类， 然后将所有状态的对应行为抽取到这些类中。</p><p>原始对象被称为<em>上下文</em> （context）， 它并不会自行实现所有行为， 而是会保存一个指向表示当前状态的状态对象的引用， 且将所有与状态相关的工作委派给该对象。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/solution-zh-state.png" alt="文档将工作委派给一个状态对象。"></p><p>如需将上下文转换为另外一种状态， 则需将当前活动的状态对象替换为另外一个代表新状态的对象。 采用这种方式是有前提的： 所有状态类都必须遵循同样的接口， 而且上下文必须仅通过接口与这些对象进行交互。</p><p>这个结构可能看上去与<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>模式相似， 但有一个关键性的不同——在状态模式中， 特定状态知道其他所有状态的存在， 且能触发从一个状态到另一个状态的转换； 策略则几乎完全不知道其他策略的存在。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p>智能手机的按键和开关会根据设备当前状态完成不同行为：</p><ul><li>当手机处于解锁状态时， 按下按键将执行各种功能。</li><li>当手机处于锁定状态时， 按下任何按键都将解锁屏幕。</li><li>当手机电量不足时， 按下任何按键都将显示充电页面。</li></ul><h2 id="状态模式结构"><a href="#状态模式结构" class="headerlink" title="状态模式结构"></a>状态模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/structure-zh-indexed-state.png" alt=""></p><ol><li><p><strong>上下文</strong> （Context） 保存了对于一个具体状态对象的引用， 并会将所有与该状态相关的工作委派给它。 上下文通过状态接口与状态对象交互， 且会提供一个设置器用于传递新的状态对象。</p></li><li><p><strong>状态</strong> （State） 接口会声明特定于状态的方法。 这些方法应能被其他所有具体状态所理解， 因为你不希望某些状态所拥有的方法永远不会被调用。</p></li><li><p><strong>具体状态</strong> （Concrete States） 会自行实现特定于状态的方法。 为了避免多个状态中包含相似代码， 你可以提供一个封装有部分通用行为的中间抽象类。</p><p>状态对象可存储对于上下文对象的反向引用。 状态可以通过该引用从上下文处获取所需信息， 并且能触发状态转移。</p></li><li><p>上下文和具体状态都可以设置上下文的下个状态， 并可通过替换连接到上下文的状态对象来完成实际的状态转换。</p></li></ol><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>在本例中， <strong>状态</strong>模式将根据当前回放状态， 让媒体播放器中的相同控件完成不同的行为。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/example-state.png" alt="使用状态对象更改对象行为的示例。"></p><p>播放器的主要对象总是会连接到一个负责播放器绝大部分工作的状态对象中。 部分操作会更换播放器当前的状态对象， 以此改变播放器对于用户互动所作出的反应。</p><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 音频播放器（Audio­Player）类即为上下文。它还会维护指向状态类实例的引用，</span></span><br><span class="line"><span class="comment">// 该状态类则用于表示音频播放器当前的状态。</span></span><br><span class="line"><span class="keyword">class</span> AudioPlayer <span class="keyword">is</span></span><br><span class="line">    field state: State</span><br><span class="line">    field UI, volume, playlist, currentSong</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">AudioPlayer</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">state</span> = <span class="title">new</span> <span class="title">ReadyState</span><span class="params">(this)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="comment">// 上下文会将处理用户输入的工作委派给状态对象。由于每个状态都以不</span></span></span><br><span class="line"><span class="function">        <span class="comment">// 同的方式处理输入，其结果自然将依赖于当前所处的状态。</span></span></span><br><span class="line"><span class="function">        <span class="title">UI</span> = <span class="title">new</span> <span class="title">UserInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">UI</span>.<span class="title">lockButton</span>.<span class="title">onClick</span><span class="params">(this.clickLock)</span></span></span><br><span class="line"><span class="function">        <span class="title">UI</span>.<span class="title">playButton</span>.<span class="title">onClick</span><span class="params">(this.clickPlay)</span></span></span><br><span class="line"><span class="function">        <span class="title">UI</span>.<span class="title">nextButton</span>.<span class="title">onClick</span><span class="params">(this.clickNext)</span></span></span><br><span class="line"><span class="function">        <span class="title">UI</span>.<span class="title">prevButton</span>.<span class="title">onClick</span><span class="params">(this.clickPrevious)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// 其他对象必须能切换音频播放器当前所处的状态。</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">changeState</span><span class="params">(state: State)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">state</span> = <span class="title">state</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// UI 方法会将执行工作委派给当前状态。</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickLock</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">state</span>.<span class="title">clickLock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPlay</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">state</span>.<span class="title">clickPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickNext</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">state</span>.<span class="title">clickNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPrevious</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">state</span>.<span class="title">clickPrevious</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// 状态可调用上下文的一些服务方法。</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">startPlayback</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">stopPlayback</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">nextSong</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">previousSong</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">fastForward</span><span class="params">(time)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">rewind</span><span class="params">(time)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// ...</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 所有具体状态类都必须实现状态基类声明的方法，并提供反向引用指向与状态相</span></span></span><br><span class="line"><span class="function"><span class="comment">// 关的上下文对象。状态可使用反向引用将上下文转换为另一个状态。</span></span></span><br><span class="line"><span class="function"><span class="title">abstract</span> <span class="title">class</span> <span class="title">State</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">protected</span> <span class="title">field</span> <span class="title">player</span>:</span> AudioPlayer</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下文将自身传递给状态构造函数。这可帮助状态在需要时获取一些有用的</span></span><br><span class="line">    <span class="comment">// 上下文数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">State</span><span class="params">(player)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">player</span> = <span class="title">player</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">abstract</span> <span class="title">method</span> <span class="title">clickLock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">abstract</span> <span class="title">method</span> <span class="title">clickPlay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">abstract</span> <span class="title">method</span> <span class="title">clickNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">abstract</span> <span class="title">method</span> <span class="title">clickPrevious</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 具体状态会实现与上下文状态相关的多种行为。</span></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">LockedState</span> <span class="title">extends</span> <span class="title">State</span> <span class="title">is</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// 当你解锁一个锁定的播放器时，它可能处于两种状态之一。</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickLock</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="params">(player.playing)</span></span></span><br><span class="line"><span class="function">            <span class="title">player</span>.<span class="title">changeState</span><span class="params">(new PlayingState(player)</span>)</span></span><br><span class="line"><span class="function">        <span class="title">else</span></span></span><br><span class="line"><span class="function">            <span class="title">player</span>.<span class="title">changeState</span><span class="params">(new ReadyState(player)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPlay</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// 已锁定，什么也不做。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickNext</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// 已锁定，什么也不做。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPrevious</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="comment">// 已锁定，什么也不做。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 它们还可在上下文中触发状态转换。</span></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">ReadyState</span> <span class="title">extends</span> <span class="title">State</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickLock</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">changeState</span><span class="params">(new LockedState(player)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPlay</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">startPlayback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">changeState</span><span class="params">(new PlayingState(player)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickNext</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">nextSong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPrevious</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">previousSong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">PlayingState</span> <span class="title">extends</span> <span class="title">State</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickLock</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">changeState</span><span class="params">(new LockedState(player)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPlay</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">stopPlayback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">player</span>.<span class="title">changeState</span><span class="params">(new ReadyState(player)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickNext</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="params">(event.doubleclick)</span></span></span><br><span class="line"><span class="function">            <span class="title">player</span>.<span class="title">nextSong</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">else</span></span></span><br><span class="line"><span class="function">            <span class="title">player</span>.<span class="title">fastForward</span><span class="params">(5)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">clickPrevious</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="params">(event.doubleclick)</span></span></span><br><span class="line"><span class="function">            <span class="title">player</span>.<span class="title">previous</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">else</span></span></span><br><span class="line"><span class="function">            <span class="title">player</span>.<span class="title">rewind</span><span class="params">(5)</span></span></span><br></pre></td></tr></table></figure><h2 id="状态模式适合应用场景"><a href="#状态模式适合应用场景" class="headerlink" title="状态模式适合应用场景"></a>状态模式适合应用场景</h2><p><strong>如果对象需要根据自身当前状态进行不同行为， 同时状态的数量非常多且与状态相关的代码会频繁变更的话， 可使用状态模式。</strong></p><p>模式建议你将所有特定于状态的代码抽取到一组独立的类中。 这样一来， 你可以在独立于其他状态的情况下添加新状态或修改已有状态， 从而减少维护成本。</p><p><strong>如果某个类需要根据成员变量的当前值改变自身行为， 从而需要使用大量的条件语句时， 可使用该模式。</strong></p><p>状态模式会将这些条件语句的分支抽取到相应状态类的方法中。 同时， 你还可以清除主要类中与特定状态相关的临时成员变量和帮手方法代码。</p><p><strong>当相似状态和基于条件的状态机转换中存在许多重复代码时， 可使用状态模式。</strong></p><p>状态模式让你能够生成状态类层次结构， 通过将公用代码抽取到抽象基类中来减少重复。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>确定哪些类是上下文。 它可能是包含依赖于状态的代码的已有类； 如果特定于状态的代码分散在多个类中， 那么它可能是一个新的类。</p></li><li><p>声明状态接口。 虽然你可能会需要完全复制上下文中声明的所有方法， 但最好是仅把关注点放在那些可能包含特定于状态的行为的方法上。</p></li><li><p>为每个实际状态创建一个继承于状态接口的类。 然后检查上下文中的方法并将与特定状态相关的所有代码抽取到新建的类中。</p><p>在将代码移动到状态类的过程中， 你可能会发现它依赖于上下文中的一些私有成员。 你可以采用以下几种变通方式：</p><ul><li>将这些成员变量或方法设为公有。</li><li>将需要抽取的上下文行为更改为上下文中的公有方法， 然后在状态类中调用。 这种方式简陋却便捷， 你可以稍后再对其进行修补。</li><li>将状态类嵌套在上下文类中。 这种方式需要你所使用的编程语言支持嵌套类。</li></ul></li><li><p>在上下文类中添加一个状态接口类型的引用成员变量， 以及一个用于修改该成员变量值的公有设置器。</p></li><li><p>再次检查上下文中的方法， 将空的条件语句替换为相应的状态对象方法。</p></li><li><p>为切换上下文状态， 你需要创建某个状态类实例并将其传递给上下文。 你可以在上下文、 各种状态或客户端中完成这项工作。 无论在何处完成这项工作， 该类都将依赖于其所实例化的具体类。</p></li></ol><h2 id="状态模式优缺点"><a href="#状态模式优缺点" class="headerlink" title="状态模式优缺点"></a>状态模式优缺点</h2><p>优点</p><ul><li>s<em>单一职责原则</em>。 将与特定状态相关的代码放在单独的类中。</li><li><em>开闭原则</em>。 无需修改已有状态类和上下文就能引入新状态。</li><li>通过消除臃肿的状态机条件语句简化上下文代码。</li></ul><p>缺点</p><ul><li>如果状态机只有很少的几个状态， 或者很少发生改变， 那么应用该模式可能会显得小题大作。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><a href="https://refactoringguru.cn/design-patterns/bridge">桥接模式</a>、 <a href="https://refactoringguru.cn/design-patterns/state">状态模式</a>和<a href="https://refactoringguru.cn/design-patterns/strategy">策略模式</a> （在某种程度上包括<a href="https://refactoringguru.cn/design-patterns/adapter">适配器模式</a>） 模式的接口非常相似。 实际上， 它们都基于<a href="https://refactoringguru.cn/design-patterns/composite">组合模式</a>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li><a href="https://refactoringguru.cn/design-patterns/state">状态</a>可被视为<a href="https://refactoringguru.cn/design-patterns/strategy">策略</a>的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 <em>策略</em>使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 但<em>状态</em>模式没有限制具体状态之间的依赖， 且允许它们自行改变在不同情景下的状态。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>状态</strong>是一种行为设计模式， 让你能在一个对象的内部状态变化时改变其行为。</p><p>该模式将与状态相关的行为抽取到独立的状态类中， 让原对象将工作委派给这些类的实例， 而不是自行进行处理。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">C#</button></li><li class="tab"><button type="button" data-href="#tags-2">C++</button></li><li class="tab"><button type="button" data-href="#tags-3">JAVA</button></li><li class="tab"><button type="button" data-href="#tags-4">PHP</button></li><li class="tab"><button type="button" data-href="#tags-5">Python</button></li><li class="tab"><button type="button" data-href="#tags-6">Ruby</button></li><li class="tab"><button type="button" data-href="#tags-7">Swift</button></li><li class="tab"><button type="button" data-href="#tags-8">TypeScrit</button></li><li class="tab"><button type="button" data-href="#tags-9">Golang</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><p><strong>在 C# 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 C# 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>Program.cs:</strong> 概念示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru.DesignPatterns.State.Conceptual</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The Context defines the interface of interest to clients. It also</span></span><br><span class="line">    <span class="comment">// maintains a reference to an instance of a State subclass, which</span></span><br><span class="line">    <span class="comment">// represents the current state of the Context.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// A reference to the current state of the Context.</span></span><br><span class="line">        <span class="keyword">private</span> State _state = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">State state</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.TransitionTo(state);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The Context allows changing the State object at runtime.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransitionTo</span>(<span class="params">State state</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Context: Transition to <span class="subst">&#123;state.GetType().Name&#125;</span>.&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>._state = state;</span><br><span class="line">            <span class="keyword">this</span>._state.SetContext(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The Context delegates part of its behavior to the current State</span></span><br><span class="line">        <span class="comment">// object.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._state.Handle1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._state.Handle2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The base State class declares methods that all Concrete State should</span></span><br><span class="line">    <span class="comment">// implement and also provides a backreference to the Context object,</span></span><br><span class="line">    <span class="comment">// associated with the State. This backreference can be used by States to</span></span><br><span class="line">    <span class="comment">// transition the Context to another State.</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> Context _context;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetContext</span>(<span class="params">Context context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._context = context;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Handle1</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Handle2</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concrete States implement various behaviors, associated with a state of</span></span><br><span class="line">    <span class="comment">// the Context.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteStateA</span> : <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteStateA handles request1.&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteStateA wants to change the state of the context.&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>._context.TransitionTo(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteStateA handles request2.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteStateB</span> : <span class="title">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;ConcreteStateB handles request1.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Handle2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteStateB handles request2.&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ConcreteStateB wants to change the state of the context.&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>._context.TransitionTo(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// The client code.</span></span><br><span class="line">            <span class="keyword">var</span> context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">            context.Request1();</span><br><span class="line">            context.Request2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to ConcreteStateA.</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateB.</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateA.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><p><strong>在 C++ 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 C++ 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.cc:</strong> 概念示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The base State class declares methods that all Concrete State should</span></span><br><span class="line"><span class="comment"> * implement and also provides a backreference to the Context object, associated</span></span><br><span class="line"><span class="comment"> * with the State. This backreference can be used by States to transition the</span></span><br><span class="line"><span class="comment"> * Context to another State.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> &#123;</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @var Context</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  Context *context_;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~State() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_context</span><span class="params">(Context *context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;context_ = context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Handle1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Handle2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Context defines the interface of interest to clients. It also maintains a</span></span><br><span class="line"><span class="comment"> * reference to an instance of a State subclass, which represents the current</span></span><br><span class="line"><span class="comment"> * state of the Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> &#123;</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @var State A reference to the current state of the Context.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  State *state_;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Context(State *state) : state_(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;TransitionTo(state);</span><br><span class="line">  &#125;</span><br><span class="line">  ~Context() &#123;</span><br><span class="line">    <span class="keyword">delete</span> state_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The Context allows changing the State object at runtime.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">TransitionTo</span><span class="params">(State *state)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Context: Transition to &quot;</span> &lt;&lt; <span class="keyword">typeid</span>(*state).name() &lt;&lt; <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;state_ != <span class="literal">nullptr</span>)</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;state_;</span><br><span class="line">    <span class="keyword">this</span>-&gt;state_ = state;</span><br><span class="line">    <span class="keyword">this</span>-&gt;state_-&gt;set_context(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The Context delegates part of its behavior to the current State object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Request1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;state_-&gt;Handle1();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Request2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;state_-&gt;Handle2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete States implement various behaviors, associated with a state of the</span></span><br><span class="line"><span class="comment"> * Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> :</span> <span class="keyword">public</span> State &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Handle1</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Handle2</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteStateA handles request2.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> :</span> <span class="keyword">public</span> State &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Handle1</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteStateB handles request1.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Handle2</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteStateB handles request2.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteStateB wants to change the state of the context.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;context_-&gt;TransitionTo(<span class="keyword">new</span> ConcreteStateA);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ConcreteStateA::Handle1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteStateA handles request1.\n&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ConcreteStateA wants to change the state of the context.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;context_-&gt;TransitionTo(<span class="keyword">new</span> ConcreteStateB);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Context *context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA);</span><br><span class="line">  context-&gt;Request1();</span><br><span class="line">  context-&gt;Request2();</span><br><span class="line">  <span class="keyword">delete</span> context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ClientCode();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to 14ConcreteStateA.</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line">Context: Transition to 14ConcreteStateB.</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line">Context: Transition to 14ConcreteStateA.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-3"><p><strong>在 Java 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 Java 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p>这里是核心 Java 程序库中一些状态模式的示例：</p><ul><li><a href="http://docs.oracle.com/javaee/7/api/javax/faces/lifecycle/Lifecycle.html#execute-javax.faces.context.FacesContext-"><code>javax.faces.lifecycle.LifeCycle#execute()</code></a> （由<a href="http://docs.oracle.com/javaee/7/api/javax/faces/webapp/FacesServlet.html"> <code>Faces­Servlet</code></a>控制： 行为依赖于当前 JSF 生命周期的阶段 （状态））</li></ul><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><p><strong>媒体播放器的接口</strong></p><p>在本例中， 状态模式允许媒体播放器根据当前的回放状态进行不同的控制行为。 播放器主类包含一个指向状态对象的引用， 它将完成播放器的绝大部分工作。 某些行为可能会用一个状态对象替换另一个状态对象， 改变播放器对用户交互的回应方式。</p><p><strong>states</strong></p><p><strong>states/State.java:</strong> 通用状态接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example.states;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.ui.Player;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Common interface for all states.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    Player player;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Context passes itself through the state constructor. This may help a</span></span><br><span class="line"><span class="comment">     * state to fetch some useful context data if needed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    State(Player player) &#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">onLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">onPlay</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">onNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">onPrevious</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>states/LockedState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example.states;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.ui.Player;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete states provide the special implementation for all interface methods.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockedState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LockedState(Player player) &#123;</span><br><span class="line">        <span class="keyword">super</span>(player);</span><br><span class="line">        player.setPlaying(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (player.isPlaying()) &#123;</span><br><span class="line">            player.changeState(<span class="keyword">new</span> ReadyState(player));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Stop playing&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Locked...&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.changeState(<span class="keyword">new</span> ReadyState(player));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Ready&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Locked...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Locked...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>states/ReadyState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example.states;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.ui.Player;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * They can also trigger state transitions in the context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadyState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadyState</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(player);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.changeState(<span class="keyword">new</span> LockedState(player));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Locked...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String action = player.startPlayback();</span><br><span class="line">        player.changeState(<span class="keyword">new</span> PlayingState(player));</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Locked...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Locked...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>states/PlayingState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example.states;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.ui.Player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayingState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PlayingState(Player player) &#123;</span><br><span class="line">        <span class="keyword">super</span>(player);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.changeState(<span class="keyword">new</span> LockedState(player));</span><br><span class="line">        player.setCurrentTrackAfterStop();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Stop playing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        player.changeState(<span class="keyword">new</span> ReadyState(player));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Paused...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> player.nextTrack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">onPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> player.previousTrack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ui</strong></p><p><strong>ui/Player.java:</strong> 播放器的主要代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.states.ReadyState;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.states.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> playing = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; playlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentTrack = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">new</span> ReadyState(<span class="keyword">this</span>);</span><br><span class="line">        setPlaying(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">            playlist.add(<span class="string">&quot;Track &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlaying</span><span class="params">(<span class="keyword">boolean</span> playing)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.playing = playing;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPlaying</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> playing;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">startPlayback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Playing &quot;</span> + playlist.get(currentTrack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nextTrack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentTrack++;</span><br><span class="line">        <span class="keyword">if</span> (currentTrack &gt; playlist.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            currentTrack = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Playing &quot;</span> + playlist.get(currentTrack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">previousTrack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentTrack--;</span><br><span class="line">        <span class="keyword">if</span> (currentTrack &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            currentTrack = playlist.size() - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Playing &quot;</span> + playlist.get(currentTrack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentTrackAfterStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTrack = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ui/UI.java:</strong> 播放器的 GUI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Player player;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JTextField textField = <span class="keyword">new</span> JTextField();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UI</span><span class="params">(Player player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.player = player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">&quot;Test player&quot;</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        JPanel context = <span class="keyword">new</span> JPanel();</span><br><span class="line">        context.setLayout(<span class="keyword">new</span> BoxLayout(context, BoxLayout.Y_AXIS));</span><br><span class="line">        frame.getContentPane().add(context);</span><br><span class="line">        JPanel buttons = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout(FlowLayout.CENTER));</span><br><span class="line">        context.add(textField);</span><br><span class="line">        context.add(buttons);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Context delegates handling user&#x27;s input to a state object. Naturally,</span></span><br><span class="line">        <span class="comment">// the outcome will depend on what state is currently active, since all</span></span><br><span class="line">        <span class="comment">// states can handle the input differently.</span></span><br><span class="line">        JButton play = <span class="keyword">new</span> JButton(<span class="string">&quot;Play&quot;</span>);</span><br><span class="line">        play.addActionListener(e -&gt; textField.setText(player.getState().onPlay()));</span><br><span class="line">        JButton stop = <span class="keyword">new</span> JButton(<span class="string">&quot;Stop&quot;</span>);</span><br><span class="line">        stop.addActionListener(e -&gt; textField.setText(player.getState().onLock()));</span><br><span class="line">        JButton next = <span class="keyword">new</span> JButton(<span class="string">&quot;Next&quot;</span>);</span><br><span class="line">        next.addActionListener(e -&gt; textField.setText(player.getState().onNext()));</span><br><span class="line">        JButton prev = <span class="keyword">new</span> JButton(<span class="string">&quot;Prev&quot;</span>);</span><br><span class="line">        prev.addActionListener(e -&gt; textField.setText(player.getState().onPrevious()));</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.setSize(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">        buttons.add(play);</span><br><span class="line">        buttons.add(stop);</span><br><span class="line">        buttons.add(next);</span><br><span class="line">        buttons.add(prev);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Demo.java:</strong> 初始化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.state.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.ui.Player;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.state.example.ui.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Demo class. Everything comes together here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Player player = <span class="keyword">new</span> Player();</span><br><span class="line">        UI ui = <span class="keyword">new</span> UI(player);</span><br><span class="line">        ui.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OutputDemo.png:</strong>  屏幕截图</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/OutputDemo-state.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-4"><p><strong>在 PHP 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 PHP 语言中， 状态模式有时会被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><div class="tabs" id="php"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#php-1">概念示例</button></li><li class="tab"><button type="button" data-href="#php-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="php-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 PHP 应用案例。</p><p><strong>index.php:</strong> 概念示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">State</span>\<span class="title">Conceptual</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Context defines the interface of interest to clients. It also maintains a</span></span><br><span class="line"><span class="comment"> * reference to an instance of a State subclass, which represents the current</span></span><br><span class="line"><span class="comment"> * state of the Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> State A reference to the current state of the Context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">State $state</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;transitionTo($state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context allows changing the State object at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transitionTo</span>(<span class="params">State $state</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Context: Transition to &quot;</span> . get_class($state) . <span class="string">&quot;.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = $state;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state-&gt;setContext(<span class="keyword">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context delegates part of its behavior to the current State object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state-&gt;handle1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request2</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state-&gt;handle2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The base State class declares methods that all Concrete State should</span></span><br><span class="line"><span class="comment"> * implement and also provides a backreference to the Context object, associated</span></span><br><span class="line"><span class="comment"> * with the State. This backreference can be used by States to transition the</span></span><br><span class="line"><span class="comment"> * Context to another State.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setContext</span>(<span class="params">Context $context</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;context = $context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle1</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle2</span>(<span class="params"></span>): <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete States implement various behaviors, associated with a state of the</span></span><br><span class="line"><span class="comment"> * Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteStateA handles request1.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteStateA wants to change the state of the context.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;context-&gt;transitionTo(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle2</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteStateA handles request2.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle1</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteStateB handles request1.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle2</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteStateB handles request2.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ConcreteStateB wants to change the state of the context.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;context-&gt;transitionTo(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">$context-&gt;request1();</span><br><span class="line">$context-&gt;request2();</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to RefactoringGuru\State\Conceptual\ConcreteStateA.</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line">Context: Transition to RefactoringGuru\State\Conceptual\ConcreteStateB.</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line">Context: Transition to RefactoringGuru\State\Conceptual\ConcreteStateA.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="php-2"><p><strong>真实世界示例</strong></p><p>尽管状态机和状态模式自身在开发者中非常流行， 但是我却想不到任何 PHP 中的实际应用来作为该模式在真实世界的示例。</p><p>但是， 如果你曾在项目中使用过该模式， 欢迎通过<a href="https://refactoring.userecho.com/">论坛</a>或邮件<a href="mailto:support@refactoring.guru">support@refactoring.guru</a>分享你的经验。 谢谢！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-5"><p><strong>在 Python 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 Python 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.py:</strong> 概念示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Context defines the interface of interest to clients. It also maintains</span></span><br><span class="line"><span class="string">    a reference to an instance of a State subclass, which represents the current</span></span><br><span class="line"><span class="string">    state of the Context.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _state = <span class="literal">None</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A reference to the current state of the Context.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, state: State</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.transition_to(state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transition_to</span>(<span class="params">self, state: State</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The Context allows changing the State object at runtime.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f&quot;Context: Transition to <span class="subst">&#123;<span class="built_in">type</span>(state).__name__&#125;</span>&quot;</span>)</span><br><span class="line">        self._state = state</span><br><span class="line">        self._state.context = self</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Context delegates part of its behavior to the current State object.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request1</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._state.handle1()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request2</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._state.handle2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The base State class declares methods that all Concrete State should</span></span><br><span class="line"><span class="string">    implement and also provides a backreference to the Context object,</span></span><br><span class="line"><span class="string">    associated with the State. This backreference can be used by States to</span></span><br><span class="line"><span class="string">    transition the Context to another State.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context</span>(<span class="params">self</span>) -&gt; Context:</span></span><br><span class="line">        <span class="keyword">return</span> self._context</span><br><span class="line"></span><br><span class="line"><span class="meta">    @context.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">context</span>(<span class="params">self, context: Context</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._context = context</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Concrete States implement various behaviors, associated with a state of the</span></span><br><span class="line"><span class="string">Context.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span>(<span class="params">State</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteStateA handles request1.&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;ConcreteStateA wants to change the state of the context.&quot;</span>)</span><br><span class="line">        self.context.transition_to(ConcreteStateB())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteStateA handles request2.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span>(<span class="params">State</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle1</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteStateB handles request1.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle2</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;ConcreteStateB handles request2.&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;ConcreteStateB wants to change the state of the context.&quot;</span>)</span><br><span class="line">        self.context.transition_to(ConcreteStateA())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># The client code.</span></span><br><span class="line"></span><br><span class="line">    context = Context(ConcreteStateA())</span><br><span class="line">    context.request1()</span><br><span class="line">    context.request2()</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to ConcreteStateA</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateB</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateA</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-6"><p><strong>在 Ruby 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 Ruby 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.rb:</strong> 概念示例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Context defines the interface of interest to clients. It also maintains a</span></span><br><span class="line"><span class="comment"># reference to an instance of a State subclass, which represents the current</span></span><br><span class="line"><span class="comment"># state of the Context.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line">  <span class="comment"># A reference to the current state of the Context.</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:state</span></span><br><span class="line">  private <span class="symbol">:state</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [State] state</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(state)</span></span></span><br><span class="line">    transition_to(state)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The Context allows changing the State object at runtime.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">transition_to</span><span class="params">(state)</span></span></span><br><span class="line">    puts <span class="string">&quot;Context: Transition to <span class="subst">#&#123;state.<span class="keyword">class</span>&#125;</span>&quot;</span></span><br><span class="line">    @state = state</span><br><span class="line">    @state.context = <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The Context delegates part of its behavior to the current State object.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">request1</span></span></span><br><span class="line">    @state.handle1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">request2</span></span></span><br><span class="line">    @state.handle2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The base State class declares methods that all Concrete State should implement</span></span><br><span class="line"><span class="comment"># and also provides a backreference to the Context object, associated with the</span></span><br><span class="line"><span class="comment"># State. This backreference can be used by States to transition the Context to</span></span><br><span class="line"><span class="comment"># another State.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:context</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle1</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@abstract</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle2</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concrete States implement various behaviors, associated with a state of the</span></span><br><span class="line"><span class="comment"># Context.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> &lt; State</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle1</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteStateA handles request1.&#x27;</span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteStateA wants to change the state of the context.&#x27;</span></span><br><span class="line">    @context.transition_to(ConcreteStateB.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle2</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteStateA handles request2.&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> &lt; State</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle1</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteStateB handles request1.&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">handle2</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteStateB handles request2.&#x27;</span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteStateB wants to change the state of the context.&#x27;</span></span><br><span class="line">    @context.transition_to(ConcreteStateA.new)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client code.</span></span><br><span class="line"></span><br><span class="line">context = Context.new(ConcreteStateA.new)</span><br><span class="line">context.request1</span><br><span class="line">context.request2</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to ConcreteStateA</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateB</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateA</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-7"><p><strong>在 Swift 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 Swift 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><div class="tabs" id="swift"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#swift-1">概念示例</button></li><li class="tab"><button type="button" data-href="#swift-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="swift-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更容易地理解下面基于真实世界的 Swift 应用案例。</p><p><strong>Example.swift:</strong> 概念示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Context defines the interface of interest to clients. It also maintains</span></span><br><span class="line"><span class="comment">/// a reference to an instance of a State subclass, which represents the current</span></span><br><span class="line"><span class="comment">/// state of the Context.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A reference to the current state of the Context.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> state: <span class="type">State</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> state: <span class="type">State</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.state = state</span><br><span class="line">        transitionTo(state: state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The Context allows changing the State object at runtime.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transitionTo</span><span class="params">(state: State)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Context: Transition to &quot;</span> + <span class="type">String</span>(describing: state))</span><br><span class="line">        <span class="keyword">self</span>.state = state</span><br><span class="line">        <span class="keyword">self</span>.state.update(context: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The Context delegates part of its behavior to the current State object.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        state.handle1()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        state.handle2()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The base State class declares methods that all Concrete State should</span></span><br><span class="line"><span class="comment">/// implement and also provides a backreference to the Context object,</span></span><br><span class="line"><span class="comment">/// associated with the State. This backreference can be used by States to</span></span><br><span class="line"><span class="comment">/// transition the Context to another State.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">State</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(context: Context)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle1</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle2</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseState</span>: <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">weak</span> <span class="keyword">var</span> context: <span class="type">Context?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(context: Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.context = context</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">handle2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Concrete States implement various behaviors, associated with a state of the</span></span><br><span class="line"><span class="comment">/// Context.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span>: <span class="title">BaseState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">handle1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteStateA handles request1.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteStateA wants to change the state of the context.\n&quot;</span>)</span><br><span class="line">        context?.transitionTo(state: <span class="type">ConcreteStateB</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">handle2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteStateA handles request2.\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span>: <span class="title">BaseState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">handle1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteStateB handles request1.\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">handle2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteStateB handles request2.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ConcreteStateB wants to change the state of the context.\n&quot;</span>)</span><br><span class="line">        context?.transitionTo(state: <span class="type">ConcreteStateA</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Let&#x27;s see how it all works together.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateConceptual</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="type">Context</span>(<span class="type">ConcreteStateA</span>())</span><br><span class="line">        context.request1()</span><br><span class="line">        context.request2()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to StateConceptual.ConcreteStateA</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line"></span><br><span class="line">Context: Transition to StateConceptual.ConcreteStateB</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line"></span><br><span class="line">Context: Transition to StateConceptual.ConcreteStateA</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="swift-2"><p><strong>真实世界示例</strong></p><p><strong>Example.swift:</strong> 真实世界示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateRealWorld</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Client: I&#x27;m starting working with a location tracker&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> tracker = <span class="type">LocationTracker</span>()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        tracker.startTracking()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        tracker.pauseTracking(<span class="keyword">for</span>: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        tracker.makeCheckIn()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        tracker.findMyChildren()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        tracker.stopTracking()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationTracker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Location tracking is enabled by default</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> trackingState: <span class="type">TrackingState</span> = <span class="type">EnabledTrackingState</span>(tracker: <span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startTracking</span><span class="params">()</span></span> &#123;</span><br><span class="line">        trackingState.startTracking()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stopTracking</span><span class="params">()</span></span> &#123;</span><br><span class="line">        trackingState.stopTracking()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseTracking</span><span class="params">(<span class="keyword">for</span> time: TimeInterval)</span></span> &#123;</span><br><span class="line">        trackingState.pauseTracking(<span class="keyword">for</span>: time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCheckIn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        trackingState.makeCheckIn()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMyChildren</span><span class="params">()</span></span> &#123;</span><br><span class="line">        trackingState.findMyChildren()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(state: TrackingState)</span></span> &#123;</span><br><span class="line">        trackingState = state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TrackingState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startTracking</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stopTracking</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseTracking</span><span class="params">(<span class="keyword">for</span> time: TimeInterval)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCheckIn</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMyChildren</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnabledTrackingState</span>: <span class="title">TrackingState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> tracker: <span class="type">LocationTracker?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(tracker: <span class="type">LocationTracker?</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.tracker = tracker</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startTracking</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: startTracking is invoked&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: tracking location....1&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: tracking location....2&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: tracking location....3&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stopTracking</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: Received &#x27;stop tracking&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: Changing state to &#x27;disabled&#x27;...&quot;</span>)</span><br><span class="line">        tracker?.update(state: <span class="type">DisabledTrackingState</span>(tracker: tracker))</span><br><span class="line">        tracker?.stopTracking()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseTracking</span><span class="params">(<span class="keyword">for</span> time: TimeInterval)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: Received &#x27;pause tracking&#x27; for \(time) seconds&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: Changing state to &#x27;disabled&#x27;...&quot;</span>)</span><br><span class="line">        tracker?.update(state: <span class="type">DisabledTrackingState</span>(tracker: tracker))</span><br><span class="line">        tracker?.pauseTracking(<span class="keyword">for</span>: time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCheckIn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: performing check-in at the current location&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMyChildren</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;EnabledTrackingState: searching for children...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisabledTrackingState</span>: <span class="title">TrackingState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">weak</span> <span class="keyword">var</span> tracker: <span class="type">LocationTracker?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(tracker: <span class="type">LocationTracker?</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.tracker = tracker</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startTracking</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Received &#x27;start tracking&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Changing state to &#x27;enabled&#x27;...&quot;</span>)</span><br><span class="line">        tracker?.update(state: <span class="type">EnabledTrackingState</span>(tracker: tracker))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseTracking</span><span class="params">(<span class="keyword">for</span> time: TimeInterval)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Pause tracking for \(time) seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="type">Int</span>(time) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: pause...\(i)&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Time is over&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Returing to &#x27;enabled state&#x27;...\n&quot;</span>)</span><br><span class="line">        <span class="keyword">self</span>.tracker?.update(state: <span class="type">EnabledTrackingState</span>(tracker: <span class="keyword">self</span>.tracker))</span><br><span class="line">        <span class="keyword">self</span>.tracker?.startTracking()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">stopTracking</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Received &#x27;stop tracking&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Do nothing...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCheckIn</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Received &#x27;make check-in&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Changing state to &#x27;enabled&#x27;...&quot;</span>)</span><br><span class="line">        tracker?.update(state: <span class="type">EnabledTrackingState</span>(tracker: tracker))</span><br><span class="line">        tracker?.makeCheckIn()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findMyChildren</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Received &#x27;find my children&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DisabledTrackingState: Changing state to &#x27;enabled&#x27;...&quot;</span>)</span><br><span class="line">        tracker?.update(state: <span class="type">EnabledTrackingState</span>(tracker: tracker))</span><br><span class="line">        tracker?.findMyChildren()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Client: I&#39;m starting working with a location tracker</span><br><span class="line"></span><br><span class="line">EnabledTrackingState: startTracking is invoked</span><br><span class="line">EnabledTrackingState: tracking location....1</span><br><span class="line">EnabledTrackingState: tracking location....2</span><br><span class="line">EnabledTrackingState: tracking location....3</span><br><span class="line"></span><br><span class="line">EnabledTrackingState: Received &#39;pause tracking&#39; for 2.0 seconds</span><br><span class="line">EnabledTrackingState: Changing state to &#39;disabled&#39;...</span><br><span class="line">DisabledTrackingState: Pause tracking for 2.0 seconds</span><br><span class="line">DisabledTrackingState: pause...0</span><br><span class="line">DisabledTrackingState: pause...1</span><br><span class="line">DisabledTrackingState: pause...2</span><br><span class="line">DisabledTrackingState: Time is over</span><br><span class="line">DisabledTrackingState: Returing to &#39;enabled state&#39;...</span><br><span class="line"></span><br><span class="line">EnabledTrackingState: startTracking is invoked</span><br><span class="line">EnabledTrackingState: tracking location....1</span><br><span class="line">EnabledTrackingState: tracking location....2</span><br><span class="line">EnabledTrackingState: tracking location....3</span><br><span class="line"></span><br><span class="line">EnabledTrackingState: performing check-in at the current location</span><br><span class="line"></span><br><span class="line">EnabledTrackingState: searching for children...</span><br><span class="line"></span><br><span class="line">EnabledTrackingState: Received &#39;stop tracking&#39;</span><br><span class="line">EnabledTrackingState: Changing state to &#39;disabled&#39;...</span><br><span class="line">DisabledTrackingState: Received &#39;stop tracking&#39;</span><br><span class="line">DisabledTrackingState: Do nothing...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-8"><p><strong>在 TypeScript 中使用模式</strong></p><p><strong>复杂度：</strong> ★☆☆</p><p><strong>流行度：</strong> ★★☆</p><p><strong>使用示例：</strong> 在 TypeScript 语言中， 状态模式通常被用于将基于 <code>switch</code>语句的大型状态机转换为对象。</p><p><strong>识别方法：</strong> 状态模式可通过受外部控制且能根据对象状态改变行为的方法来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>状态</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>index.ts:</strong> 概念示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Context defines the interface of interest to clients. It also maintains a</span></span><br><span class="line"><span class="comment"> * reference to an instance of a State subclass, which represents the current</span></span><br><span class="line"><span class="comment"> * state of the Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type <span class="type">&#123;State&#125;</span> </span>A reference to the current state of the Context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> state: State;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">state: State</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transitionTo(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context allows changing the State object at runtime.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> transitionTo(state: State): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Context: Transition to <span class="subst">$&#123;(&lt;<span class="built_in">any</span>&gt;state).constructor.name&#125;</span>.`</span>);</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.state.setContext(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Context delegates part of its behavior to the current State object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> request1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state.handle1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> request2(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state.handle2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The base State class declares methods that all Concrete State should</span></span><br><span class="line"><span class="comment"> * implement and also provides a backreference to the Context object, associated</span></span><br><span class="line"><span class="comment"> * with the State. This backreference can be used by States to transition the</span></span><br><span class="line"><span class="comment"> * Context to another State.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> context: Context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">setContext</span>(<span class="params">context: Context</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> handle1(): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> handle2(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete States implement various behaviors, associated with a state of the</span></span><br><span class="line"><span class="comment"> * Context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> handle1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteStateA handles request1.&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteStateA wants to change the state of the context.&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.context.transitionTo(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> handle2(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteStateA handles request2.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> handle1(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteStateB handles request1.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> handle2(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteStateB handles request2.&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteStateB wants to change the state of the context.&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.context.transitionTo(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">context.request1();</span><br><span class="line">context.request2();</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Context: Transition to ConcreteStateA.</span><br><span class="line">ConcreteStateA handles request1.</span><br><span class="line">ConcreteStateA wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateB.</span><br><span class="line">ConcreteStateB handles request2.</span><br><span class="line">ConcreteStateB wants to change the state of the context.</span><br><span class="line">Context: Transition to ConcreteStateA.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-9"><p><strong>概念示例</strong></p><p>让我们在一台自动售货机上使用状态设计模式。 为简单起见， 让我们假设自动售货机仅会销售一种类型的商品。 同时， 依然为了简单起见， 我们假设自动售货机可处于 4 种不同的状态中：</p><ul><li>有商品 （has­Item）</li><li>无商品 （no­Item）</li><li>商品已请求 （item­Requested）</li><li>收到纸币 （has­Money）</li></ul><p>同时， 自动售货机也会有不同的操作。 再一次的， 为了简单起见， 我们假设其只会执行 4 种操作：</p><ul><li>选择商品</li><li>添加商品</li><li>插入纸币</li><li>提供商品</li></ul><p>当对象可以处于许多不同的状态中时应使用状态设计模式， 同时根据传入请求的不同， 对象需要变更其当前状态。</p><p>在我们的例子中， 自动售货机可以有多种不同的状态， 同时会在这些状态之间持续不断地互相转换。 我们假设自动售货机处于 <code>商品已请求</code>状态中。 在 “插入纸币” 的操作发生后， 机器将自动转换至 <code>收到纸币</code>状态。</p><p>根据其当前状态， 机器可就相同请求采取不同的行为。 例如， 如果用户想要购买一件商品， 机器将在 <code>有商品</code>状态时继续操作， 而在 <code>无商品</code>状态时拒绝操作。</p><p>自动售货机的代码不会被这一逻辑污染； 所有依赖于状态的代码都存在于各自的状态实现中。</p><p><strong>vendingMachine.go:</strong> 背景</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vendingMachine <span class="keyword">struct</span> &#123;</span><br><span class="line">    hasItem       state</span><br><span class="line">    itemRequested state</span><br><span class="line">    hasMoney      state</span><br><span class="line">    noItem        state</span><br><span class="line"></span><br><span class="line">    currentState state</span><br><span class="line"></span><br><span class="line">    itemCount <span class="keyword">int</span></span><br><span class="line">    itemPrice <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newVendingMachine</span><span class="params">(itemCount, itemPrice <span class="keyword">int</span>)</span> *<span class="title">vendingMachine</span></span> &#123;</span><br><span class="line">    v := &amp;vendingMachine&#123;</span><br><span class="line">        itemCount: itemCount,</span><br><span class="line">        itemPrice: itemPrice,</span><br><span class="line">    &#125;</span><br><span class="line">    hasItemState := &amp;hasItemState&#123;</span><br><span class="line">        vendingMachine: v,</span><br><span class="line">    &#125;</span><br><span class="line">    itemRequestedState := &amp;itemRequestedState&#123;</span><br><span class="line">        vendingMachine: v,</span><br><span class="line">    &#125;</span><br><span class="line">    hasMoneyState := &amp;hasMoneyState&#123;</span><br><span class="line">        vendingMachine: v,</span><br><span class="line">    &#125;</span><br><span class="line">    noItemState := &amp;noItemState&#123;</span><br><span class="line">        vendingMachine: v,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v.setState(hasItemState)</span><br><span class="line">    v.hasItem = hasItemState</span><br><span class="line">    v.itemRequested = itemRequestedState</span><br><span class="line">    v.hasMoney = hasMoneyState</span><br><span class="line">    v.noItem = noItemState</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vendingMachine)</span> <span class="title">requestItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v.currentState.requestItem()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vendingMachine)</span> <span class="title">addItem</span><span class="params">(count <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v.currentState.addItem(count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vendingMachine)</span> <span class="title">insertMoney</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v.currentState.insertMoney(money)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vendingMachine)</span> <span class="title">dispenseItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v.currentState.dispenseItem()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vendingMachine)</span> <span class="title">setState</span><span class="params">(s state)</span></span> &#123;</span><br><span class="line">    v.currentState = s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *vendingMachine)</span> <span class="title">incrementItemCount</span><span class="params">(count <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Adding %d items\n&quot;</span>, count)</span><br><span class="line">    v.itemCount = v.itemCount + count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>state.go:</strong> 状态接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> state <span class="keyword">interface</span> &#123;</span><br><span class="line">    addItem(<span class="keyword">int</span>) error</span><br><span class="line">    requestItem() error</span><br><span class="line">    insertMoney(money <span class="keyword">int</span>) error</span><br><span class="line">    dispenseItem() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>noItemState.go:</strong> 具体状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> noItemState <span class="keyword">struct</span> &#123;</span><br><span class="line">    vendingMachine *vendingMachine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *noItemState)</span> <span class="title">requestItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item out of stock&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *noItemState)</span> <span class="title">addItem</span><span class="params">(count <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    i.vendingMachine.incrementItemCount(count)</span><br><span class="line">    i.vendingMachine.setState(i.vendingMachine.hasItem)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *noItemState)</span> <span class="title">insertMoney</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item out of stock&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *noItemState)</span> <span class="title">dispenseItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item out of stock&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hasItemState.go:</strong> 具体状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> hasItemState <span class="keyword">struct</span> &#123;</span><br><span class="line">    vendingMachine *vendingMachine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasItemState)</span> <span class="title">requestItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i.vendingMachine.itemCount == <span class="number">0</span> &#123;</span><br><span class="line">        i.vendingMachine.setState(i.vendingMachine.noItem)</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;No item present&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Item requestd\n&quot;</span>)</span><br><span class="line">    i.vendingMachine.setState(i.vendingMachine.itemRequested)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasItemState)</span> <span class="title">addItem</span><span class="params">(count <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d items added\n&quot;</span>, count)</span><br><span class="line">    i.vendingMachine.incrementItemCount(count)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasItemState)</span> <span class="title">insertMoney</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Please select item first&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasItemState)</span> <span class="title">dispenseItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Please select item first&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>itemRequestedState.go:</strong> 具体状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> itemRequestedState <span class="keyword">struct</span> &#123;</span><br><span class="line">    vendingMachine *vendingMachine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *itemRequestedState)</span> <span class="title">requestItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item already requested&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *itemRequestedState)</span> <span class="title">addItem</span><span class="params">(count <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item Dispense in progress&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *itemRequestedState)</span> <span class="title">insertMoney</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> money &lt; i.vendingMachine.itemPrice &#123;</span><br><span class="line">        fmt.Errorf(<span class="string">&quot;Inserted money is less. Please insert %d&quot;</span>, i.vendingMachine.itemPrice)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Money entered is ok&quot;</span>)</span><br><span class="line">    i.vendingMachine.setState(i.vendingMachine.hasMoney)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *itemRequestedState)</span> <span class="title">dispenseItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Please insert money first&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hasMoneyState.go:</strong> 具体状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> hasMoneyState <span class="keyword">struct</span> &#123;</span><br><span class="line">    vendingMachine *vendingMachine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasMoneyState)</span> <span class="title">requestItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item dispense in progress&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasMoneyState)</span> <span class="title">addItem</span><span class="params">(count <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item dispense in progress&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasMoneyState)</span> <span class="title">insertMoney</span><span class="params">(money <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Item out of stock&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *hasMoneyState)</span> <span class="title">dispenseItem</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Dispensing Item&quot;</span>)</span><br><span class="line">    i.vendingMachine.itemCount = i.vendingMachine.itemCount - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i.vendingMachine.itemCount == <span class="number">0</span> &#123;</span><br><span class="line">        i.vendingMachine.setState(i.vendingMachine.noItem)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        i.vendingMachine.setState(i.vendingMachine.hasItem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.go:</strong> 客户端代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    vendingMachine := newVendingMachine(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    err := vendingMachine.requestItem()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = vendingMachine.insertMoney(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = vendingMachine.dispenseItem()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">    err = vendingMachine.addItem(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println()</span><br><span class="line"></span><br><span class="line">    err = vendingMachine.requestItem()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = vendingMachine.insertMoney(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = vendingMachine.dispenseItem()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Item requestd</span><br><span class="line">Money entered is ok</span><br><span class="line">Dispensing Item</span><br><span class="line"></span><br><span class="line">Adding 2 items</span><br><span class="line"></span><br><span class="line">Item requestd</span><br><span class="line">Money entered is ok</span><br><span class="line">Dispensing Item</span><br></pre></td></tr></table></figure><p><em>根据： <a href="https://golangbyexample.com/state-design-pattern-go/">Golang By Example</a></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/state&quot;&gt;https://refactoringguru.cn/design-patterns/state&lt;/a&gt;&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>行为模式-观察者模式</title>
    <link href="http://wangyangyangisme.github.io/posts/1b971bb/"/>
    <id>http://wangyangyangisme.github.io/posts/1b971bb/</id>
    <published>2021-05-04T12:00:56.000Z</published>
    <updated>2021-05-04T12:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://refactoringguru.cn/design-patterns/observer">https://refactoringguru.cn/design-patterns/observer</a></p></blockquote><h1 id="行为模式-观察者模式"><a href="#行为模式-观察者模式" class="headerlink" title="行为模式-观察者模式"></a>行为模式-观察者模式</h1><p><strong>亦称：</strong> 事件订阅者、监听者、Event-Subscriber、Listener、Observer</p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>观察者模式</strong>是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/observer.png" alt=""></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你有两种类型的对象：  <code>顾客</code>和 <code>商店</code> 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 iPhone 手机）， 而该产品很快将会在商店里出售。</p><p>顾客可以每天来商店看看产品是否到货。 但如果商品尚未到货时， 绝大多数来到商店的顾客都会空手而归。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/observer-comic-1-zh.png" alt="前往商店和发送垃圾邮件"></p><p>另一方面， 每次新产品到货时， 商店可以向所有顾客发送邮件 （可能会被视为垃圾邮件）。 这样， 部分顾客就无需反复前往商店了， 但也可能会惹恼对新产品没有兴趣的其他顾客。</p><p>我们似乎遇到了一个矛盾： 要么让顾客浪费时间检查产品是否到货， 要么让商店浪费资源去通知没有需求的顾客。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>拥有一些值得关注的状态的对象通常被称为<em>目标<em>， 由于它要将自身的状态改变通知给其他对象， 我们也将其称为</em>发布者</em> （publisher）。 所有希望关注发布者状态变化的其他对象被称为<em>订阅者</em> （subscribers）。</p><p>观察者模式建议你为发布者类添加订阅机制， 让每个对象都能订阅或取消订阅发布者事件流。 不要害怕！ 这并不像听上去那么复杂。 实际上， 该机制包括 1） 一个用于存储订阅者对象引用的列表成员变量； 2） 几个用于添加或删除该列表中订阅者的公有方法。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/solution1-zh-observer.png" alt="订阅机制允许对象订阅事件通知。"></p><p>现在， 无论何时发生了重要的发布者事件， 它都要遍历订阅者并调用其对象的特定通知方法。</p><p>实际应用中可能会有十几个不同的订阅者类跟踪着同一个发布者类的事件， 你不会希望发布者与所有这些类相耦合的。 此外如果他人会使用发布者类， 那么你甚至可能会对其中的一些类一无所知。</p><p>因此， 所有订阅者都必须实现同样的接口， 发布者仅通过该接口与订阅者交互。 接口中必须声明通知方法及其参数， 这样发布者在发出通知时还能传递一些上下文数据。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/solution2-zh-observer.png" alt="发布者调用订阅者对象中的特定通知方法来通知订阅者。"></p><p>如果你的应用中有多个不同类型的发布者， 且希望订阅者可兼容所有发布者， 那么你甚至可以进一步让所有订阅者遵循同样的接口。 该接口仅需描述几个订阅方法即可。 这样订阅者就能在不与具体发布者类耦合的情况下通过接口观察发布者的状态。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/observer-comic-2-zh.png" alt="杂志和报纸订阅。"></p><p>如果你订阅了一份杂志或报纸， 那就不需要再去报摊查询新出版的刊物了。 出版社 （即应用中的 “发布者”） 会在刊物出版后 （甚至提前） 直接将最新一期寄送至你的邮箱中。</p><p>出版社负责维护订阅者列表， 了解订阅者对哪些刊物感兴趣。 当订阅者希望出版社停止寄送新一期的杂志时， 他们可随时从该列表中退出。</p><h2 id="观察者模式结构"><a href="#观察者模式结构" class="headerlink" title="观察者模式结构"></a>观察者模式结构</h2><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/structure-indexed-observer.png" alt=""></p><ol><li><strong>发布者</strong> （Publisher） 会向其他对象发送值得关注的事件。 事件会在发布者自身状态改变或执行特定行为后发生。 发布者中包含一个允许新订阅者加入和当前订阅者离开列表的订阅构架。</li><li>当新事件发生时， 发送者会遍历订阅列表并调用每个订阅者对象的通知方法。 该方法是在订阅者接口中声明的。</li><li><strong>订阅者</strong> （Subscriber） 接口声明了通知接口。 在绝大多数情况下， 该接口仅包含一个 <code>update</code>更新方法。 该方法可以拥有多个参数， 使发布者能在更新时传递事件的详细信息。</li><li><strong>具体订阅者</strong> （Concrete Subscribers） 可以执行一些操作来回应发布者的通知。 所有具体订阅者类都实现了同样的接口， 因此发布者不需要与具体类相耦合。</li><li>订阅者通常需要一些上下文信息来正确地处理更新。 因此， 发布者通常会将一些上下文数据作为通知方法的参数进行传递。 发布者也可将自身作为参数进行传递， 使订阅者直接获取所需的数据。</li><li><strong>客户端</strong> （Client） 会分别创建发布者和订阅者对象， 然后为订阅者注册发布者更新。</li></ol><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>在本例中， <strong>观察者</strong>模式允许文本编辑器对象将自身的状态改变通知给其他服务对象。</p><p><img src="https://cdn.jsdelivr.net/gh/wangyangyangisme/CDN@latest/blog/pattern/example-observer.png" alt="将对象中发生的事件通知给其他对象。"></p><p>订阅者列表是动态生成的： 对象可在运行时根据程序需要开始或停止监听通知。</p><p>在本实现中， 编辑器类自身并不维护订阅列表。 它将工作委派给专门从事此工作的一个特殊帮手对象。 你还可将该对象升级为中心化的事件分发器， 允许任何对象成为发布者。</p><p>只要发布者通过同样的接口与所有订阅者进行交互， 那么在程序中新增订阅者时就无需修改已有发布者类的代码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者基类包含订阅管理代码和通知方法。</span></span><br><span class="line"><span class="keyword">class</span> EventManager <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">private</span> field listeners: hash map <span class="keyword">of</span> event types <span class="keyword">and</span> listeners</span><br><span class="line"></span><br><span class="line">    method subscribe(eventType, listener) <span class="keyword">is</span></span><br><span class="line">        listeners.add(eventType, listener)</span><br><span class="line"></span><br><span class="line">    method unsubscribe(eventType, listener) <span class="keyword">is</span></span><br><span class="line">        listeners.remove(eventType, listener)</span><br><span class="line"></span><br><span class="line">    method notify(eventType, data) <span class="keyword">is</span></span><br><span class="line">        foreach (listener <span class="keyword">in</span> listeners.<span class="keyword">of</span>(eventType)) <span class="keyword">do</span></span><br><span class="line">            listener.update(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体发布者包含一些订阅者感兴趣的实际业务逻辑。我们可以从发布者基类中扩</span></span><br><span class="line"><span class="comment">// 展出该类，但在实际情况下并不总能做到，因为具体发布者可能已经是子类了。</span></span><br><span class="line"><span class="comment">// 在这种情况下，你可用组合来修补订阅逻辑，就像我们在这里做的一样。</span></span><br><span class="line"><span class="keyword">class</span> Editor <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">public</span> field events: EventManager</span><br><span class="line">    <span class="keyword">private</span> field <span class="keyword">file</span>: <span class="keyword">File</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">Editor</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">events</span> = <span class="title">new</span> <span class="title">EventManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// 业务逻辑的方法可将变化通知给订阅者。</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">openFile</span><span class="params">(path)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">file</span> = <span class="title">new</span> <span class="title">File</span><span class="params">(path)</span></span></span><br><span class="line"><span class="function">        <span class="title">events</span>.<span class="title">notify</span><span class="params">(&quot;open&quot;, <span class="keyword">file</span>.<span class="keyword">name</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">saveFile</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">file</span>.<span class="title">write</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">events</span>.<span class="title">notify</span><span class="params">(&quot;save&quot;, <span class="keyword">file</span>.<span class="keyword">name</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// ...</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 这里是订阅者接口。如果你的编程语言支持函数类型，则可用一组函数来代替整</span></span></span><br><span class="line"><span class="function"><span class="comment">// 个订阅者的层次结构。</span></span></span><br><span class="line"><span class="function"><span class="title">interface</span> <span class="title">EventListener</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">update</span><span class="params">(filename)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 具体订阅者会对其注册的发布者所发出的更新消息做出响应。</span></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">LoggingListener</span> <span class="title">implements</span> <span class="title">EventListener</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">private</span> <span class="title">field</span> <span class="title">log</span>:</span> <span class="keyword">File</span></span><br><span class="line">    <span class="keyword">private</span> field <span class="keyword">message</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">LoggingListener</span><span class="params">(log_filename, <span class="keyword">message</span>)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">log</span> = <span class="title">new</span> <span class="title">File</span><span class="params">(log_filename)</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">message</span> = <span class="title">message</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">update</span><span class="params">(filename)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">log</span>.<span class="title">write</span><span class="params">(replace(<span class="string">&#x27;%s&#x27;</span>,filename,<span class="keyword">message</span>)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">EmailAlertsListener</span> <span class="title">implements</span> <span class="title">EventListener</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">private</span> <span class="title">field</span> <span class="title">email</span>:</span> <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">EmailAlertsListener</span><span class="params">(email, <span class="keyword">message</span>)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">email</span> = <span class="title">email</span></span></span><br><span class="line"><span class="function">        <span class="title">this</span>.<span class="title">message</span> = <span class="title">message</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">update</span><span class="params">(filename)</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">system</span>.<span class="title">email</span><span class="params">(email, replace(<span class="string">&#x27;%s&#x27;</span>,filename,<span class="keyword">message</span>)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 应用程序可在运行时配置发布者和订阅者。</span></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Application</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">    <span class="title">method</span> <span class="title">config</span><span class="params">()</span> <span class="title">is</span></span></span><br><span class="line"><span class="function">        <span class="title">editor</span> = <span class="title">new</span> <span class="title">Editor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">logger</span> = <span class="title">new</span> <span class="title">LoggingListener</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            &quot;/path/<span class="keyword">to</span>/log.txt&quot;,</span></span></span><br><span class="line"><span class="function"><span class="params">            &quot;有人打开了文件：%s&quot;)</span>;</span></span><br><span class="line">        editor.events.subscribe(&quot;open&quot;, logger)</span><br><span class="line"></span><br><span class="line">        emailAlerts = new EmailAlertsListener(</span><br><span class="line">            &quot;admin@example.com&quot;,</span><br><span class="line">            &quot;有人更改了文件：%s&quot;)</span><br><span class="line">        editor.events.subscribe(&quot;save&quot;, emailAlerts)</span><br></pre></td></tr></table></figure><h2 id="观察者模式适合应用场景"><a href="#观察者模式适合应用场景" class="headerlink" title="观察者模式适合应用场景"></a>观察者模式适合应用场景</h2><p><strong>当一个对象状态的改变需要改变其他对象，或实际对象是事先未知的或动态变化的时，可使用观察者模式。</strong></p><p>当你使用图形用户界面类时通常会遇到一个问题。 比如， 你创建了自定义按钮类并允许客户端在按钮中注入自定义代码， 这样当用户按下按钮时就会触发这些代码。</p><p>观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。 你可在按钮中添加订阅机制， 允许客户端通过自定义订阅类注入自定义代码。</p><p><strong>当应用中的一些对象必须观察其他对象时，可使用该模式。但仅能在有限时间内或特定情况下使用。</strong></p><p>订阅列表是动态的， 因此订阅者可随时加入或离开该列表。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>仔细检查你的业务逻辑， 试着将其拆分为两个部分： 独立于其他代码的核心功能将作为发布者； 其他代码则将转化为一组订阅类。</p></li><li><p>声明订阅者接口。 该接口至少应声明一个 <code>update</code>方法。</p></li><li><p>声明发布者接口并定义一些接口来在列表中添加和删除订阅对象。 记住发布者必须仅通过订阅者接口与它们进行交互。</p></li><li><p>确定存放实际订阅列表的位置并实现订阅方法。 通常所有类型的发布者代码看上去都一样， 因此将列表放置在直接扩展自发布者接口的抽象类中是显而易见的。 具体发布者会扩展该类从而继承所有的订阅行为。</p><p>但是， 如果你需要在现有的类层次结构中应用该模式， 则可以考虑使用组合的方式： 将订阅逻辑放入一个独立的对象， 然后让所有实际订阅者使用该对象。</p></li><li><p>创建具体发布者类。 每次发布者发生了重要事件时都必须通知所有的订阅者。</p></li><li><p>在具体订阅者类中实现通知更新的方法。 绝大部分订阅者需要一些与事件相关的上下文数据。 这些数据可作为通知方法的参数来传递。</p><p>但还有另一种选择。 订阅者接收到通知后直接从通知中获取所有数据。 在这种情况下， 发布者必须通过更新方法将自身传递出去。 另一种不太灵活的方式是通过构造函数将发布者与订阅者永久性地连接起来。</p></li><li><p>客户端必须生成所需的全部订阅者， 并在相应的发布者处完成注册工作。</p></li></ol><h2 id="观察者模式优缺点"><a href="#观察者模式优缺点" class="headerlink" title="观察者模式优缺点"></a>观察者模式优缺点</h2><p>优点</p><ul><li><em>开闭原则</em>。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</li><li>你可以在运行时建立对象之间的联系。</li></ul><p>缺点</p><ul><li>订阅者的通知顺序是随机的。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><p><a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility">责任链模式</a>、 <a href="https://refactoringguru.cn/design-patterns/command">命令模式</a>、 <a href="https://refactoringguru.cn/design-patterns/mediator">中介者模式</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者模式</a>用于处理请求发送者和接收者之间的不同连接方式：</p><ul><li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li><li><em>命令</em>在发送者和请求者之间建立单向连接。</li><li><em>中介者</em>清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li><li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li></ul></li><li><p><a href="https://refactoringguru.cn/design-patterns/mediator">中介者</a>和<a href="https://refactoringguru.cn/design-patterns/observer">观察者</a>之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</p><p><em>中介者</em>的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 <em>观察者</em>的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</p><p>有一种流行的中介者模式实现方式依赖于<em>观察者</em>。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当<em>中介者</em>以这种方式实现时， 它可能看上去与<em>观察者</em>非常相似。</p><p>当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和<em>观察者</em>并不相同， 但这仍是一种中介者模式。</p><p>假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</p></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>观察者</strong>是一种行为设计模式， 允许一个对象将其状态的改变通知其他对象</p><p>观察者模式提供了一种作用于任何实现了订阅者接口的对象的机制， 可对其事件进行订阅和取消订阅。</p><div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tags-1">C#</button></li><li class="tab"><button type="button" data-href="#tags-2">C++</button></li><li class="tab"><button type="button" data-href="#tags-3">JAVA</button></li><li class="tab"><button type="button" data-href="#tags-4">PHP</button></li><li class="tab"><button type="button" data-href="#tags-5">Python</button></li><li class="tab"><button type="button" data-href="#tags-6">Ruby</button></li><li class="tab"><button type="button" data-href="#tags-7">Swift</button></li><li class="tab"><button type="button" data-href="#tags-8">TypeScrit</button></li><li class="tab"><button type="button" data-href="#tags-9">Golang</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tags-1"><p><strong>在 C# 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 C# 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>Program.cs:</strong> 概念示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru.DesignPatterns.Observer.Conceptual</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IObserver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Receive update from subject</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params">ISubject subject</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Attach an observer to the subject.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Attach</span>(<span class="params">IObserver observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Detach an observer from the subject.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Detach</span>(<span class="params">IObserver observer</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Notify all observers about an event.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Subject owns some important state and notifies observers when the</span></span><br><span class="line">    <span class="comment">// state changes.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subject</span> : <span class="title">ISubject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// For the sake of simplicity, the Subject&#x27;s state, essential to all</span></span><br><span class="line">        <span class="comment">// subscribers, is stored in this variable.</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">-0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// List of subscribers. In real life, the list of subscribers can be</span></span><br><span class="line">        <span class="comment">// stored more comprehensively (categorized by event type, etc.).</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">List</span>&lt;<span class="title">IObserver</span>&gt; _observers</span> = <span class="keyword">new</span> List&lt;IObserver&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The subscription management methods.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Subject: Attached an observer.&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>._observers.Add(observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>._observers.Remove(observer);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Subject: Detached an observer.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Trigger an update in each subscriber.</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Subject: Notifying observers...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> observer <span class="keyword">in</span> _observers)</span><br><span class="line">            &#123;</span><br><span class="line">                observer.Update(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Usually, the subscription logic is only a fraction of what a Subject</span></span><br><span class="line">        <span class="comment">// can really do. Subjects commonly hold some important business logic,</span></span><br><span class="line">        <span class="comment">// that triggers a notification method whenever something important is</span></span><br><span class="line">        <span class="comment">// about to happen (or after it).</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SomeBusinessLogic</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nSubject: I&#x27;m doing something important.&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.State = <span class="keyword">new</span> Random().Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            Thread.Sleep(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Subject: My state has just changed to: &quot;</span> + <span class="keyword">this</span>.State);</span><br><span class="line">            <span class="keyword">this</span>.Notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concrete Observers react to the updates issued by the Subject they had</span></span><br><span class="line">    <span class="comment">// been attached to.</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteObserverA</span> : <span class="title">IObserver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params">ISubject subject</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;            </span><br><span class="line">            <span class="keyword">if</span> ((subject <span class="keyword">as</span> Subject).State &lt; <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;ConcreteObserverA: Reacted to the event.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ConcreteObserverB</span> : <span class="title">IObserver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params">ISubject subject</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((subject <span class="keyword">as</span> Subject).State == <span class="number">0</span> || (subject <span class="keyword">as</span> Subject).State &gt;= <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;ConcreteObserverB: Reacted to the event.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// The client code.</span></span><br><span class="line">            <span class="keyword">var</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line">            <span class="keyword">var</span> observerA = <span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">            subject.Attach(observerA);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> observerB = <span class="keyword">new</span> ConcreteObserverB();</span><br><span class="line">            subject.Attach(observerB);</span><br><span class="line"></span><br><span class="line">            subject.SomeBusinessLogic();</span><br><span class="line">            subject.SomeBusinessLogic();</span><br><span class="line"></span><br><span class="line">            subject.Detach(observerB);</span><br><span class="line"></span><br><span class="line">            subject.SomeBusinessLogic();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Subject: Attached an observer.</span><br><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 2</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event.</span><br><span class="line">ConcreteObserverB: Reacted to the event.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 1</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event.</span><br><span class="line">Subject: Detached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 5</span><br><span class="line">Subject: Notifying observers...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-2"><p><strong>在 C++ 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 C++ 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.cc:</strong> 概念示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Observer Design Pattern</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Intent: Lets you define a subscription mechanism to notify multiple objects</span></span><br><span class="line"><span class="comment"> * about any events that happen to the object they&#x27;re observing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that there&#x27;s a lot of different terms with similar meaning associated</span></span><br><span class="line"><span class="comment"> * with this pattern. Just remember that the Subject is also called the</span></span><br><span class="line"><span class="comment"> * Publisher and the Observer is often called the Subscriber and vice versa.</span></span><br><span class="line"><span class="comment"> * Also the verbs &quot;observe&quot;, &quot;listen&quot; or &quot;track&quot; usually mean the same thing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IObserver</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~IObserver()&#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;message_from_subject)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISubject</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~ISubject()&#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Attach</span><span class="params">(IObserver *observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Detach</span><span class="params">(IObserver *observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Notify</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Subject owns some important state and notifies observers when the state</span></span><br><span class="line"><span class="comment"> * changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> :</span> <span class="keyword">public</span> ISubject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Subject() &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Goodbye, I was the Subject.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The subscription management methods.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Attach</span><span class="params">(IObserver *observer)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    list_observer_.push_back(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Detach</span><span class="params">(IObserver *observer)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    list_observer_.remove(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Notify</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;IObserver *&gt;::iterator iterator = list_observer_.begin();</span><br><span class="line">    HowManyObserver();</span><br><span class="line">    <span class="keyword">while</span> (iterator != list_observer_.end()) &#123;</span><br><span class="line">      (*iterator)-&gt;Update(message_);</span><br><span class="line">      ++iterator;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">CreateMessage</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> message = <span class="string">&quot;Empty&quot;</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;message_ = message;</span><br><span class="line">    Notify();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">HowManyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;There are &quot;</span> &lt;&lt; list_observer_.size() &lt;&lt; <span class="string">&quot; observers in the list.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Usually, the subscription logic is only a fraction of what a Subject can</span></span><br><span class="line"><span class="comment">   * really do. Subjects commonly hold some important business logic, that</span></span><br><span class="line"><span class="comment">   * triggers a notification method whenever something important is about to</span></span><br><span class="line"><span class="comment">   * happen (or after it).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SomeBusinessLogic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;message_ = <span class="string">&quot;change message message&quot;</span>;</span><br><span class="line">    Notify();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I&#x27;m about to do some thing important\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;IObserver *&gt; list_observer_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> message_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> :</span> <span class="keyword">public</span> IObserver &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Observer(Subject &amp;subject) : subject_(subject) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;subject_.Attach(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hi, I&#x27;m the Observer \&quot;&quot;</span> &lt;&lt; ++Observer::static_number_ &lt;&lt; <span class="string">&quot;\&quot;.\n&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;number_ = Observer::static_number_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Observer() &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Goodbye, I was the Observer \&quot;&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;number_ &lt;&lt; <span class="string">&quot;\&quot;.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;message_from_subject)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    message_from_subject_ = message_from_subject;</span><br><span class="line">    PrintInfo();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">RemoveMeFromTheList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    subject_.Detach(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Observer \&quot;&quot;</span> &lt;&lt; number_ &lt;&lt; <span class="string">&quot;\&quot; removed from the list.\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PrintInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Observer \&quot;&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;number_ &lt;&lt; <span class="string">&quot;\&quot;: a new message is available --&gt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;message_from_subject_ &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> message_from_subject_;</span><br><span class="line">  Subject &amp;subject_;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> static_number_;</span><br><span class="line">  <span class="keyword">int</span> number_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Observer::static_number_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Subject *subject = <span class="keyword">new</span> Subject;</span><br><span class="line">  Observer *observer1 = <span class="keyword">new</span> Observer(*subject);</span><br><span class="line">  Observer *observer2 = <span class="keyword">new</span> Observer(*subject);</span><br><span class="line">  Observer *observer3 = <span class="keyword">new</span> Observer(*subject);</span><br><span class="line">  Observer *observer4;</span><br><span class="line">  Observer *observer5;</span><br><span class="line"></span><br><span class="line">  subject-&gt;CreateMessage(<span class="string">&quot;Hello World! :D&quot;</span>);</span><br><span class="line">  observer3-&gt;RemoveMeFromTheList();</span><br><span class="line"></span><br><span class="line">  subject-&gt;CreateMessage(<span class="string">&quot;The weather is hot today! :p&quot;</span>);</span><br><span class="line">  observer4 = <span class="keyword">new</span> Observer(*subject);</span><br><span class="line"></span><br><span class="line">  observer2-&gt;RemoveMeFromTheList();</span><br><span class="line">  observer5 = <span class="keyword">new</span> Observer(*subject);</span><br><span class="line"></span><br><span class="line">  subject-&gt;CreateMessage(<span class="string">&quot;My new car is great! ;)&quot;</span>);</span><br><span class="line">  observer5-&gt;RemoveMeFromTheList();</span><br><span class="line"></span><br><span class="line">  observer4-&gt;RemoveMeFromTheList();</span><br><span class="line">  observer1-&gt;RemoveMeFromTheList();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> observer5;</span><br><span class="line">  <span class="keyword">delete</span> observer4;</span><br><span class="line">  <span class="keyword">delete</span> observer3;</span><br><span class="line">  <span class="keyword">delete</span> observer2;</span><br><span class="line">  <span class="keyword">delete</span> observer1;</span><br><span class="line">  <span class="keyword">delete</span> subject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ClientCode();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Hi, I&#39;m the Observer &quot;1&quot;.</span><br><span class="line">Hi, I&#39;m the Observer &quot;2&quot;.</span><br><span class="line">Hi, I&#39;m the Observer &quot;3&quot;.</span><br><span class="line">There are 3 observers in the list.</span><br><span class="line">Observer &quot;1&quot;: a new message is available --&gt; Hello World! :D</span><br><span class="line">Observer &quot;2&quot;: a new message is available --&gt; Hello World! :D</span><br><span class="line">Observer &quot;3&quot;: a new message is available --&gt; Hello World! :D</span><br><span class="line">Observer &quot;3&quot; removed from the list.</span><br><span class="line">There are 2 observers in the list.</span><br><span class="line">Observer &quot;1&quot;: a new message is available --&gt; The weather is hot today! :p</span><br><span class="line">Observer &quot;2&quot;: a new message is available --&gt; The weather is hot today! :p</span><br><span class="line">Hi, I&#39;m the Observer &quot;4&quot;.</span><br><span class="line">Observer &quot;2&quot; removed from the list.</span><br><span class="line">Hi, I&#39;m the Observer &quot;5&quot;.</span><br><span class="line">There are 3 observers in the list.</span><br><span class="line">Observer &quot;1&quot;: a new message is available --&gt; My new car is great! ;)</span><br><span class="line">Observer &quot;4&quot;: a new message is available --&gt; My new car is great! ;)</span><br><span class="line">Observer &quot;5&quot;: a new message is available --&gt; My new car is great! ;)</span><br><span class="line">Observer &quot;5&quot; removed from the list.</span><br><span class="line">Observer &quot;4&quot; removed from the list.</span><br><span class="line">Observer &quot;1&quot; removed from the list.</span><br><span class="line">Goodbye, I was the Observer &quot;5&quot;.</span><br><span class="line">Goodbye, I was the Observer &quot;4&quot;.</span><br><span class="line">Goodbye, I was the Observer &quot;3&quot;.</span><br><span class="line">Goodbye, I was the Observer &quot;2&quot;.</span><br><span class="line">Goodbye, I was the Observer &quot;1&quot;.</span><br><span class="line">Goodbye, I was the Subject.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-3"><p><strong>在 Java 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 Java 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p>这里是核心 Java 程序库中该模式的一些示例：</p><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html"><code>java.util.Observer</code></a>/<a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observable.html"> <code>java.util.Observable</code></a> （极少在真实世界中使用）</li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html"><code>java.util.EventListener</code></a>的所有实现 （几乎广泛存在于 Swing 组件中）</li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html"><code>javax.servlet.http.HttpSessionBindingListener</code></a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionAttributeListener.html"><code>javax.servlet.http.HttpSessionAttributeListener</code></a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/faces/event/PhaseListener.html"><code>javax.faces.event.PhaseListener</code></a></li></ul><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p><strong>事件订阅</strong></p><p>在本例中， 观察者模式在文本编辑器的对象之间建立了间接的合作关系。 每当 <code>编辑器</code> （Editor） 对象改变时， 它都会通知其订阅者。  <code>邮件通知监听器</code> （Email­Notification­Listener） 和 <code>日志开启监听器</code> （Log­Open­Listener） 都将通过执行其基本行为来对这些通知做出反应。</p><p>订阅者类不与编辑器类相耦合， 且能在需要时在其他应用中复用。  <code>编辑器</code>类仅依赖于抽象订阅者接口。 这样就能允许在不改变编辑器代码的情况下添加新的订阅者类型。</p><p><strong>publisher</strong></p><p><strong>publisher/EventManager.java:</strong> 基础发布者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.observer.example.publisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.observer.example.listeners.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventManager</span> </span>&#123;</span><br><span class="line">    Map&lt;String, List&lt;EventListener&gt;&gt; listeners = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventManager</span><span class="params">(String... operations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String operation : operations) &#123;</span><br><span class="line">            <span class="keyword">this</span>.listeners.put(operation, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String eventType, EventListener listener)</span> </span>&#123;</span><br><span class="line">        List&lt;EventListener&gt; users = listeners.get(eventType);</span><br><span class="line">        users.add(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">(String eventType, EventListener listener)</span> </span>&#123;</span><br><span class="line">        List&lt;EventListener&gt; users = listeners.get(eventType);</span><br><span class="line">        users.remove(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String eventType, File file)</span> </span>&#123;</span><br><span class="line">        List&lt;EventListener&gt; users = listeners.get(eventType);</span><br><span class="line">        <span class="keyword">for</span> (EventListener listener : users) &#123;</span><br><span class="line">            listener.update(eventType, file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>editor</strong></p><p><strong>editor/Editor.java:</strong> 具体发布者， 由其他对象追踪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.observer.example.editor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.observer.example.publisher.EventManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> EventManager events;</span><br><span class="line">    <span class="keyword">private</span> File file;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Editor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.events = <span class="keyword">new</span> EventManager(<span class="string">&quot;open&quot;</span>, <span class="string">&quot;save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        events.notify(<span class="string">&quot;open&quot;</span>, file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.file != <span class="keyword">null</span>) &#123;</span><br><span class="line">            events.notify(<span class="string">&quot;save&quot;</span>, file);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Please open a file first.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>listeners</strong></p><p><strong>listeners/EventListener.java:</strong> 通用观察者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.observer.example.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String eventType, File file)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>listeners/EmailNotificationListener.java:</strong> 收到通知后发送邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.observer.example.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailNotificationListener</span> <span class="keyword">implements</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailNotificationListener</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String eventType, File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Email to &quot;</span> + email + <span class="string">&quot;: Someone has performed &quot;</span> + eventType + <span class="string">&quot; operation with the following file: &quot;</span> + file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>listeners/LogOpenListener.java:</strong> 收到通知后在日志中记录一条消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.observer.example.listeners;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogOpenListener</span> <span class="keyword">implements</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File log;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogOpenListener</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.log = <span class="keyword">new</span> File(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String eventType, File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Save to log &quot;</span> + log + <span class="string">&quot;: Someone has performed &quot;</span> + eventType + <span class="string">&quot; operation with the following file: &quot;</span> + file.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Demo.java:</strong> 初始化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> refactoring_guru.observer.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> refactoring_guru.observer.example.editor.Editor;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.observer.example.listeners.EmailNotificationListener;</span><br><span class="line"><span class="keyword">import</span> refactoring_guru.observer.example.listeners.LogOpenListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Editor editor = <span class="keyword">new</span> Editor();</span><br><span class="line">        editor.events.subscribe(<span class="string">&quot;open&quot;</span>, <span class="keyword">new</span> LogOpenListener(<span class="string">&quot;/path/to/log/file.txt&quot;</span>));</span><br><span class="line">        editor.events.subscribe(<span class="string">&quot;save&quot;</span>, <span class="keyword">new</span> EmailNotificationListener(<span class="string">&quot;admin@example.com&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            editor.openFile(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            editor.saveFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OutputDemo.png:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Save to log \path\to\log\file.txt: Someone has performed open operation with the following file: test.txt</span><br><span class="line">Email to admin@example.com: Someone has performed save operation with the following file: test.txt</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-4"><p><strong>在 PHP 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> PHP 中包含几个内置接口 （<a href="http://php.net/manual/en/class.splsubject.php">SplSubject</a>、 <a href="http://php.net/manual/en/class.splobserver.php">SplObserver</a>）， 它们能让你的观察器模式实现与其他 PHP 代码兼容。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><div class="tabs" id="php"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#php-1">概念示例</button></li><li class="tab"><button type="button" data-href="#php-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="php-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更轻松地理解下面基于真实世界的 PHP 应用案例。</p><p><strong>index.php:</strong> 概念示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">Observer</span>\<span class="title">Conceptual</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PHP has a couple of built-in interfaces related to the Observer pattern.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Here&#x27;s what the Subject interface looks like:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> http://php.net/manual/en/class.splsubject.php</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     interface SplSubject</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *         // Attach an observer to the subject.</span></span><br><span class="line"><span class="comment"> *         public function attach(SplObserver $observer);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         // Detach an observer from the subject.</span></span><br><span class="line"><span class="comment"> *         public function detach(SplObserver $observer);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         // Notify all observers about an event.</span></span><br><span class="line"><span class="comment"> *         public function notify();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There&#x27;s also a built-in interface for Observers:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> http://php.net/manual/en/class.splobserver.php</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     interface SplObserver</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *         public function update(SplSubject $subject);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Subject owns some important state and notifies observers when the state</span></span><br><span class="line"><span class="comment"> * changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">implements</span> \<span class="title">SplSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int For the sake of simplicity, the Subject&#x27;s state, essential to</span></span><br><span class="line"><span class="comment">     * all subscribers, is stored in this variable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \SplObjectStorage List of subscribers. In real life, the list of</span></span><br><span class="line"><span class="comment">     * subscribers can be stored more comprehensively (categorized by event</span></span><br><span class="line"><span class="comment">     * type, etc.).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $observers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers = <span class="keyword">new</span> \<span class="built_in">SplObjectStorage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The subscription management methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params">\<span class="built_in">SplObserver</span> $observer</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Subject: Attached an observer.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;attach($observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span>(<span class="params">\<span class="built_in">SplObserver</span> $observer</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;detach($observer);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Subject: Detached an observer.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Trigger an update in each subscriber.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Subject: Notifying observers...\n&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer) &#123;</span><br><span class="line">            $observer-&gt;update(<span class="keyword">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the subscription logic is only a fraction of what a Subject can</span></span><br><span class="line"><span class="comment">     * really do. Subjects commonly hold some important business logic, that</span></span><br><span class="line"><span class="comment">     * triggers a notification method whenever something important is about to</span></span><br><span class="line"><span class="comment">     * happen (or after it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">someBusinessLogic</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\nSubject: I&#x27;m doing something important.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;state = rand(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Subject: My state has just changed to: <span class="subst">&#123;$this-&gt;state&#125;</span>\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Observers react to the updates issued by the Subject they had been</span></span><br><span class="line"><span class="comment"> * attached to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">\<span class="built_in">SplSubject</span> $subject</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($subject-&gt;state &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ConcreteObserverA: Reacted to the event.\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverB</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">\<span class="built_in">SplSubject</span> $subject</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($subject-&gt;state == <span class="number">0</span> || $subject-&gt;state &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ConcreteObserverB: Reacted to the event.\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">$o1 = <span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">$subject-&gt;attach($o1);</span><br><span class="line"></span><br><span class="line">$o2 = <span class="keyword">new</span> ConcreteObserverB();</span><br><span class="line">$subject-&gt;attach($o2);</span><br><span class="line"></span><br><span class="line">$subject-&gt;someBusinessLogic();</span><br><span class="line">$subject-&gt;someBusinessLogic();</span><br><span class="line"></span><br><span class="line">$subject-&gt;detach($o2);</span><br><span class="line"></span><br><span class="line">$subject-&gt;someBusinessLogic();</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Subject: Attached an observer.</span><br><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 2</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event.</span><br><span class="line">ConcreteObserverB: Reacted to the event.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 4</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverB: Reacted to the event.</span><br><span class="line">Subject: Detached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 1</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="php-2"><p><strong>真实世界示例</strong></p><p>在本例中， <strong>观察者</strong>模式允许多种对象观察程序用户仓库中发生的事件。</p><p>仓库发出各种类型的事件并允许观察者监听所有或个别事件。</p><p><strong>index.php:</strong> 真实世界示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RefactoringGuru</span>\<span class="title">Observer</span>\<span class="title">RealWorld</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The UserRepository represents a Subject. Various objects are interested in</span></span><br><span class="line"><span class="comment"> * tracking its internal state, whether it&#x27;s adding a new user or removing one.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> <span class="keyword">implements</span> \<span class="title">SplSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array The list of users.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $users = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here goes the actual Observer management infrastructure. Note that it&#x27;s</span></span><br><span class="line">    <span class="comment">// not everything that our class is responsible for. Its primary business</span></span><br><span class="line">    <span class="comment">// logic is listed below these methods.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $observers = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// A special event group for observers that want to listen to all</span></span><br><span class="line">        <span class="comment">// events.</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers[<span class="string">&quot;*&quot;</span>] = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initEventGroup</span>(<span class="params"><span class="keyword">string</span> $event = <span class="string">&quot;*&quot;</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;observers[$event])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;observers[$event] = [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getEventObservers</span>(<span class="params"><span class="keyword">string</span> $event = <span class="string">&quot;*&quot;</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initEventGroup($event);</span><br><span class="line">        $group = <span class="keyword">$this</span>-&gt;observers[$event];</span><br><span class="line">        $all = <span class="keyword">$this</span>-&gt;observers[<span class="string">&quot;*&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array_merge($group, $all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params">\<span class="built_in">SplObserver</span> $observer, <span class="keyword">string</span> $event = <span class="string">&quot;*&quot;</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;initEventGroup($event);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;observers[$event][] = $observer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span>(<span class="params">\<span class="built_in">SplObserver</span> $observer, <span class="keyword">string</span> $event = <span class="string">&quot;*&quot;</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getEventObservers($event) <span class="keyword">as</span> $key =&gt; $s) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($s === $observer) &#123;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;observers[$event][$key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"><span class="keyword">string</span> $event = <span class="string">&quot;*&quot;</span>, $data = <span class="literal">null</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;UserRepository: Broadcasting the &#x27;<span class="subst">$event</span>&#x27; event.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getEventObservers($event) <span class="keyword">as</span> $observer) &#123;</span><br><span class="line">            $observer-&gt;update(<span class="keyword">$this</span>, $event, $data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here are the methods representing the business logic of the class.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params">$filename</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;UserRepository: Loading user records from a file.\n&quot;</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;notify(<span class="string">&quot;users:init&quot;</span>, $filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createUser</span>(<span class="params"><span class="keyword">array</span> $data</span>): <span class="title">User</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;UserRepository: Creating a user.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        $user = <span class="keyword">new</span> User();</span><br><span class="line">        $user-&gt;update($data);</span><br><span class="line"></span><br><span class="line">        $id = bin2hex(openssl_random_pseudo_bytes(<span class="number">16</span>));</span><br><span class="line">        $user-&gt;update([<span class="string">&quot;id&quot;</span> =&gt; $id]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;users[$id] = $user;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;notify(<span class="string">&quot;users:created&quot;</span>, $user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">updateUser</span>(<span class="params">User $user, <span class="keyword">array</span> $data</span>): <span class="title">User</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;UserRepository: Updating a user.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        $id = $user-&gt;attributes[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;users[$id])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $user = <span class="keyword">$this</span>-&gt;users[$id];</span><br><span class="line">        $user-&gt;update($data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;notify(<span class="string">&quot;users:updated&quot;</span>, $user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">User $user</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;UserRepository: Deleting a user.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        $id = $user-&gt;attributes[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;users[$id])) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;users[$id]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;notify(<span class="string">&quot;users:deleted&quot;</span>, $user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Let&#x27;s keep the User class trivial since it&#x27;s not the focus of our example.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $attributes = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">$data</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;attributes = array_merge(<span class="keyword">$this</span>-&gt;attributes, $data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This Concrete Component logs any events it&#x27;s subscribed to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$filename</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            unlink(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">\<span class="built_in">SplSubject</span> $repository, <span class="keyword">string</span> $event = <span class="literal">null</span>, $data = <span class="literal">null</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $entry = date(<span class="string">&quot;Y-m-d H:i:s&quot;</span>) . <span class="string">&quot;: &#x27;<span class="subst">$event</span>&#x27; with data &#x27;&quot;</span> . json_encode($data) . <span class="string">&quot;&#x27;\n&quot;</span>;</span><br><span class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;filename, $entry, FILE_APPEND);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Logger: I&#x27;ve written &#x27;<span class="subst">$event</span>&#x27; entry to the log.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This Concrete Component sends initial instructions to new users. The client</span></span><br><span class="line"><span class="comment"> * is responsible for attaching this component to a proper user creation event.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnboardingNotification</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adminEmail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$adminEmail</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adminEmail = $adminEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">\<span class="built_in">SplSubject</span> $repository, <span class="keyword">string</span> $event = <span class="literal">null</span>, $data = <span class="literal">null</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// mail($this-&gt;adminEmail,</span></span><br><span class="line">        <span class="comment">//     &quot;Onboarding required&quot;,</span></span><br><span class="line">        <span class="comment">//     &quot;We have a new user. Here&#x27;s his info: &quot; .json_encode($data));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OnboardingNotification: The notification has been emailed!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$repository = <span class="keyword">new</span> UserRepository();</span><br><span class="line">$repository-&gt;attach(<span class="keyword">new</span> Logger(<span class="keyword">__DIR__</span> . <span class="string">&quot;/log.txt&quot;</span>), <span class="string">&quot;*&quot;</span>);</span><br><span class="line">$repository-&gt;attach(<span class="keyword">new</span> OnboardingNotification(<span class="string">&quot;1@example.com&quot;</span>), <span class="string">&quot;users:created&quot;</span>);</span><br><span class="line"></span><br><span class="line">$repository-&gt;initialize(<span class="keyword">__DIR__</span> . <span class="string">&quot;/users.csv&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">$user = $repository-&gt;createUser([</span><br><span class="line">    <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;John Smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span> =&gt; <span class="string">&quot;john99@example.com&quot;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">$repository-&gt;deleteUser($user);</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UserRepository: Loading user records from a file.</span><br><span class="line">UserRepository: Broadcasting the &#39;users:init&#39; event.</span><br><span class="line">Logger: I&#39;ve written &#39;users:init&#39; entry to the log.</span><br><span class="line">UserRepository: Creating a user.</span><br><span class="line">UserRepository: Broadcasting the &#39;users:created&#39; event.</span><br><span class="line">OnboardingNotification: The notification has been emailed!</span><br><span class="line">Logger: I&#39;ve written &#39;users:created&#39; entry to the log.</span><br><span class="line">UserRepository: Deleting a user.</span><br><span class="line">UserRepository: Broadcasting the &#39;users:deleted&#39; event.</span><br><span class="line">Logger: I&#39;ve written &#39;users:deleted&#39; entry to the log.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-5"><p><strong>在 Python 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 Python 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.py:</strong> 概念示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Subject interface declares a set of methods for managing subscribers.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attach</span>(<span class="params">self, observer: Observer</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Attach an observer to the subject.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detach</span>(<span class="params">self, observer: Observer</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Detach an observer from the subject.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Notify all observers about an event.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>(<span class="params">Subject</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Subject owns some important state and notifies observers when the state</span></span><br><span class="line"><span class="string">    changes.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _state: <span class="built_in">int</span> = <span class="literal">None</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    For the sake of simplicity, the Subject&#x27;s state, essential to all</span></span><br><span class="line"><span class="string">    subscribers, is stored in this variable.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    _observers: List[Observer] = []</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List of subscribers. In real life, the list of subscribers can be stored</span></span><br><span class="line"><span class="string">    more comprehensively (categorized by event type, etc.).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attach</span>(<span class="params">self, observer: Observer</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        print(<span class="string">&quot;Subject: Attached an observer.&quot;</span>)</span><br><span class="line">        self._observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detach</span>(<span class="params">self, observer: Observer</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._observers.remove(observer)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The subscription management methods.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notify</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Trigger an update in each subscriber.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;Subject: Notifying observers...&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> observer <span class="keyword">in</span> self._observers:</span><br><span class="line">            observer.update(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">some_business_logic</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Usually, the subscription logic is only a fraction of what a Subject can</span></span><br><span class="line"><span class="string">        really do. Subjects commonly hold some important business logic, that</span></span><br><span class="line"><span class="string">        triggers a notification method whenever something important is about to</span></span><br><span class="line"><span class="string">        happen (or after it).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;\nSubject: I&#x27;m doing something important.&quot;</span>)</span><br><span class="line">        self._state = randrange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">f&quot;Subject: My state has just changed to: <span class="subst">&#123;self._state&#125;</span>&quot;</span>)</span><br><span class="line">        self.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span>(<span class="params">ABC</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    The Observer interface declares the update method, used by subjects.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, subject: Subject</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Receive update from subject.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Concrete Observers react to the updates issued by the Subject they had been</span></span><br><span class="line"><span class="string">attached to.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span>(<span class="params">Observer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, subject: Subject</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> subject._state &lt; <span class="number">3</span>:</span><br><span class="line">            print(<span class="string">&quot;ConcreteObserverA: Reacted to the event&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverB</span>(<span class="params">Observer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, subject: Subject</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> subject._state == <span class="number">0</span> <span class="keyword">or</span> subject._state &gt;= <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">&quot;ConcreteObserverB: Reacted to the event&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># The client code.</span></span><br><span class="line"></span><br><span class="line">    subject = ConcreteSubject()</span><br><span class="line"></span><br><span class="line">    observer_a = ConcreteObserverA()</span><br><span class="line">    subject.attach(observer_a)</span><br><span class="line"></span><br><span class="line">    observer_b = ConcreteObserverB()</span><br><span class="line">    subject.attach(observer_b)</span><br><span class="line"></span><br><span class="line">    subject.some_business_logic()</span><br><span class="line">    subject.some_business_logic()</span><br><span class="line"></span><br><span class="line">    subject.detach(observer_a)</span><br><span class="line"></span><br><span class="line">    subject.some_business_logic()</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Subject: Attached an observer.</span><br><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 0</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event</span><br><span class="line">ConcreteObserverB: Reacted to the event</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 5</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverB: Reacted to the event</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 0</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverB: Reacted to the event</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-6"><p><strong>在 Ruby 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 Ruby 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>main.rb:</strong> 概念示例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The Subject interface declares a set of methods for managing subscribers.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line">  <span class="comment"># Attach an observer to the subject.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">attach</span><span class="params">(observer)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Detach an observer from the subject.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">detach</span><span class="params">(observer)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Notify all observers about an event.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">notify</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Subject owns some important state and notifies observers when the state</span></span><br><span class="line"><span class="comment"># changes.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> &lt; Subject</span></span><br><span class="line">  <span class="comment"># For the sake of simplicity, the Subject&#x27;s state, essential to all</span></span><br><span class="line">  <span class="comment"># subscribers, is stored in this variable.</span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:state</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># @!attribute observers</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@return</span> [Array&lt;Observer&gt;] attr_accessor :observers private :observers</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">    @observers = []</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># List of subscribers. In real life, the list of subscribers can be stored</span></span><br><span class="line">  <span class="comment"># more comprehensively (categorized by event type, etc.).</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Obserser] observer</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">attach</span><span class="params">(observer)</span></span></span><br><span class="line">    puts <span class="string">&#x27;Subject: Attached an observer.&#x27;</span></span><br><span class="line">    @observers &lt;&lt; observer</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Obserser] observer</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">detach</span><span class="params">(observer)</span></span></span><br><span class="line">    @observers.delete(observer)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The subscription management methods.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Trigger an update in each subscriber.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">notify</span></span></span><br><span class="line">    puts <span class="string">&#x27;Subject: Notifying observers...&#x27;</span></span><br><span class="line">    @observers.each &#123; <span class="params">|observer|</span> observer.update(<span class="keyword">self</span>) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Usually, the subscription logic is only a fraction of what a Subject can</span></span><br><span class="line">  <span class="comment"># really do. Subjects commonly hold some important business logic, that</span></span><br><span class="line">  <span class="comment"># triggers a notification method whenever something important is about to</span></span><br><span class="line">  <span class="comment"># happen (or after it).</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">some_business_logic</span></span></span><br><span class="line">    puts <span class="string">&quot;\nSubject: I&#x27;m doing something important.&quot;</span></span><br><span class="line">    @state = rand(<span class="number">0</span>..<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    puts <span class="string">&quot;Subject: My state has just changed to: <span class="subst">#&#123;@state&#125;</span>&quot;</span></span><br><span class="line">    notify</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Observer interface declares the update method, used by subjects.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span></span><br><span class="line">  <span class="comment"># Receive update from subject.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(_subject)</span></span></span><br><span class="line">    raise NotImplementedError, <span class="string">&quot;<span class="subst">#&#123;<span class="keyword">self</span>.<span class="keyword">class</span>&#125;</span> has not implemented method &#x27;<span class="subst">#&#123;__method_<span class="number">_</span>&#125;</span>&#x27;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concrete Observers react to the updates issued by the Subject they had been</span></span><br><span class="line"><span class="comment"># attached to.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> &lt; Observer</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Subject] subject</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(subject)</span></span></span><br><span class="line">    puts <span class="string">&#x27;ConcreteObserverA: Reacted to the event&#x27;</span> <span class="keyword">if</span> subject.state &lt; <span class="number">3</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverB</span> &lt; Observer</span></span><br><span class="line">  <span class="comment"># <span class="doctag">@param</span> [Subject] subject</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(subject)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">unless</span> subject.state.zero? <span class="params">||</span> subject.state &gt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    puts <span class="string">&#x27;ConcreteObserverB: Reacted to the event&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client code.</span></span><br><span class="line"></span><br><span class="line">subject = ConcreteSubject.new</span><br><span class="line"></span><br><span class="line">observer_a = ConcreteObserverA.new</span><br><span class="line">subject.attach(observer_a)</span><br><span class="line"></span><br><span class="line">observer_b = ConcreteObserverB.new</span><br><span class="line">subject.attach(observer_b)</span><br><span class="line"></span><br><span class="line">subject.some_business_logic</span><br><span class="line">subject.some_business_logic</span><br><span class="line"></span><br><span class="line">subject.detach(observer_a)</span><br><span class="line"></span><br><span class="line">subject.some_business_logic</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Subject: Attached an observer.</span><br><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 2</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event</span><br><span class="line">ConcreteObserverB: Reacted to the event</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 10</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverB: Reacted to the event</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 2</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverB: Reacted to the event</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-7"><p><strong>在 Swift 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 Swift 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><div class="tabs" id="swift"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#swift-1">概念示例</button></li><li class="tab"><button type="button" data-href="#swift-2">真实世界示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="swift-1"><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p>了解该模式的结构后， 你可以更轻松地理解下面基于真实世界的 Swift 应用案例。</p><p><strong>Example.swift:</strong> 概念示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Subject owns some important state and notifies observers when the state</span></span><br><span class="line"><span class="comment">/// changes.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// For the sake of simplicity, the Subject&#x27;s state, essential to all</span></span><br><span class="line">    <span class="comment">/// subscribers, is stored in this variable.</span></span><br><span class="line">    <span class="keyword">var</span> state: <span class="type">Int</span> = &#123; <span class="keyword">return</span> <span class="type">Int</span>(arc4random_uniform(<span class="number">10</span>)) &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @var array List of subscribers. In real life, the list of subscribers</span></span><br><span class="line">    <span class="comment">/// can be stored more comprehensively (categorized by event type, etc.).</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> observers = [<span class="type">Observer</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The subscription management methods.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">attach</span><span class="params">(<span class="number">_</span> observer: Observer)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Subject: Attached an observer.\n&quot;</span>)</span><br><span class="line">        observers.append(observer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">detach</span><span class="params">(<span class="number">_</span> observer: Observer)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> idx = observers.firstIndex(<span class="keyword">where</span>: &#123; $<span class="number">0</span> === observer &#125;) &#123;</span><br><span class="line">            observers.remove(at: idx)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Subject: Detached an observer.\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Trigger an update in each subscriber.</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Subject: Notifying observers...\n&quot;</span>)</span><br><span class="line">        observers.forEach(&#123; $<span class="number">0</span>.update(subject: <span class="keyword">self</span>)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Usually, the subscription logic is only a fraction of what a Subject can</span></span><br><span class="line">    <span class="comment">/// really do. Subjects commonly hold some important business logic, that</span></span><br><span class="line">    <span class="comment">/// triggers a notification method whenever something important is about to</span></span><br><span class="line">    <span class="comment">/// happen (or after it).</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">someBusinessLogic</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSubject: I&#x27;m doing something important.\n&quot;</span>)</span><br><span class="line">        state = <span class="type">Int</span>(arc4random_uniform(<span class="number">10</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Subject: My state has just changed to: \(state)\n&quot;</span>)</span><br><span class="line">        notify()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// The Observer protocol declares the update method, used by subjects.</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Observer</span>: <span class="title">class</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(subject: Subject)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Concrete Observers react to the updates issued by the Subject they had been</span></span><br><span class="line"><span class="comment">/// attached to.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span>: <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(subject: Subject)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> subject.state &lt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ConcreteObserverA: Reacted to the event.\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverB</span>: <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(subject: Subject)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> subject.state &gt;= <span class="number">3</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ConcreteObserverB: Reacted to the event.\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Let&#x27;s see how it all works together.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverConceptual</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testObserverConceptual</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> subject = <span class="type">Subject</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> observer1 = <span class="type">ConcreteObserverA</span>()</span><br><span class="line">        <span class="keyword">let</span> observer2 = <span class="type">ConcreteObserverB</span>()</span><br><span class="line"></span><br><span class="line">        subject.attach(observer1)</span><br><span class="line">        subject.attach(observer2)</span><br><span class="line"></span><br><span class="line">        subject.someBusinessLogic()</span><br><span class="line">        subject.someBusinessLogic()</span><br><span class="line">        subject.detach(observer2)</span><br><span class="line">        subject.someBusinessLogic()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line"></span><br><span class="line">Subject: My state has just changed to: 4</span><br><span class="line"></span><br><span class="line">Subject: Notifying observers...</span><br><span class="line"></span><br><span class="line">ConcreteObserverB: Reacted to the event.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line"></span><br><span class="line">Subject: My state has just changed to: 2</span><br><span class="line"></span><br><span class="line">Subject: Notifying observers...</span><br><span class="line"></span><br><span class="line">ConcreteObserverA: Reacted to the event.</span><br><span class="line"></span><br><span class="line">Subject: Detached an observer.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line"></span><br><span class="line">Subject: My state has just changed to: 8</span><br><span class="line"></span><br><span class="line">Subject: Notifying observers...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="swift-2"><p><strong>真实世界示例</strong></p><p><strong>Example.swift:</strong> 真实世界示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> XCTest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverRealWorld</span>: <span class="title">XCTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> cartManager = <span class="type">CartManager</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> navigationBar = <span class="type">UINavigationBar</span>()</span><br><span class="line">        <span class="keyword">let</span> cartVC = <span class="type">CartViewController</span>()</span><br><span class="line"></span><br><span class="line">        cartManager.add(subscriber: navigationBar)</span><br><span class="line">        cartManager.add(subscriber: cartVC)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> apple = <span class="type">Food</span>(id: <span class="number">111</span>, name: <span class="string">&quot;Apple&quot;</span>, price: <span class="number">10</span>, calories: <span class="number">20</span>)</span><br><span class="line">        cartManager.add(product: apple)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> tShirt = <span class="type">Clothes</span>(id: <span class="number">222</span>, name: <span class="string">&quot;T-shirt&quot;</span>, price: <span class="number">200</span>, size: <span class="string">&quot;L&quot;</span>)</span><br><span class="line">        cartManager.add(product: tShirt)</span><br><span class="line"></span><br><span class="line">        cartManager.remove(product: apple)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CartSubscriber</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(changed cart: [Product])</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEqual</span><span class="params">(to product: Product)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEqual</span><span class="params">(to product: Product)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id == product.id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span>: <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Food-specific properties</span></span><br><span class="line">    <span class="keyword">var</span> calories: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Clothes</span>: <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> price: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Clothes-specific properties</span></span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> cart = [<span class="type">Product</span>]()</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> subscribers = [<span class="type">CartSubscriber</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(subscriber: CartSubscriber)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CartManager: I&#x27;am adding a new subscriber: \(subscriber.description)&quot;</span>)</span><br><span class="line">        subscribers.append(subscriber)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(product: Product)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nCartManager: I&#x27;am adding a new product: \(product.name)&quot;</span>)</span><br><span class="line">        cart.append(product)</span><br><span class="line">        notifySubscribers()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(subscriber <span class="built_in">filter</span>: <span class="params">(CartSubscriber)</span></span></span> -&gt; (<span class="type">Bool</span>)) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> index = subscribers.firstIndex(<span class="keyword">where</span>: <span class="built_in">filter</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        subscribers.remove(at: index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(product: Product)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> index = cart.firstIndex(<span class="keyword">where</span>: &#123; $<span class="number">0</span>.isEqual(to: product) &#125;) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nCartManager: Product &#x27;\(product.name)&#x27; is removed from a cart&quot;</span>)</span><br><span class="line">        cart.remove(at: index)</span><br><span class="line">        notifySubscribers()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">notifySubscribers</span><span class="params">()</span></span> &#123;</span><br><span class="line">        subscribers.forEach(&#123; $<span class="number">0</span>.accept(changed: cart) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UINavigationBar</span>: <span class="title">CartSubscriber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(changed cart: [Product])</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;UINavigationBar: Updating an appearance of navigation items&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;UINavigationBar&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartViewController</span>: <span class="title">UIViewController</span>, <span class="title">CartSubscriber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">accept</span><span class="params">(changed cart: [Product])</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CartViewController: Updating an appearance of a list view with products&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123; <span class="keyword">return</span> <span class="string">&quot;CartViewController&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CartManager: I&#39;am adding a new subscriber: UINavigationBar</span><br><span class="line">CartManager: I&#39;am adding a new subscriber: CartViewController</span><br><span class="line"></span><br><span class="line">CartManager: I&#39;am adding a new product: Apple</span><br><span class="line">UINavigationBar: Updating an appearance of navigation items</span><br><span class="line">CartViewController: Updating an appearance of a list view with products</span><br><span class="line"></span><br><span class="line">CartManager: I&#39;am adding a new product: T-shirt</span><br><span class="line">UINavigationBar: Updating an appearance of navigation items</span><br><span class="line">CartViewController: Updating an appearance of a list view with products</span><br><span class="line"></span><br><span class="line">CartManager: Product &#39;Apple&#39; is removed from a cart</span><br><span class="line">UINavigationBar: Updating an appearance of navigation items</span><br><span class="line">CartViewController: Updating an appearance of a list view with products</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-8"><p><strong>在 TypeScript 中使用模式</strong></p><p><strong>复杂度：</strong> ★★☆</p><p><strong>流行度：</strong> ★★★</p><p><strong>使用示例：</strong> 观察者模式在 TypeScript 代码中很常见， 特别是在 GUI 组件中。 它提供了在不与其他对象所属类耦合的情况下对其事件做出反应的方式。</p><p><strong>识别方法：</strong> 该模式可以通过将对象存储在列表中的订阅方法， 和对于面向该列表中对象的更新方法的调用来识别。</p><p><strong>概念示例</strong></p><p>本例说明了<strong>观察者</strong>设计模式的结构并重点回答了下面的问题：</p><ul><li>它由哪些类组成？</li><li>这些类扮演了哪些角色？</li><li>模式中的各个元素会以何种方式相互关联？</li></ul><p><strong>index.ts:</strong> 概念示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Subject interface declares a set of methods for managing subscribers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Subject &#123;</span><br><span class="line">    <span class="comment">// Attach an observer to the subject.</span></span><br><span class="line">    attach(observer: Observer): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detach an observer from the subject.</span></span><br><span class="line">    detach(observer: Observer): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notify all observers about an event.</span></span><br><span class="line">    notify(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Subject owns some important state and notifies observers when the state</span></span><br><span class="line"><span class="comment"> * changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="title">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type <span class="type">&#123;number&#125;</span> </span>For the sake of simplicity, the Subject&#x27;s state, essential</span></span><br><span class="line"><span class="comment">     * to all subscribers, is stored in this variable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> state: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@type <span class="type">&#123;Observer[]&#125;</span> </span>List of subscribers. In real life, the list of</span></span><br><span class="line"><span class="comment">     * subscribers can be stored more comprehensively (categorized by event</span></span><br><span class="line"><span class="comment">     * type, etc.).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> observers: Observer[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The subscription management methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> attach(observer: Observer): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> isExist = <span class="built_in">this</span>.observers.includes(observer);</span><br><span class="line">        <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Subject: Observer has been attached already.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Subject: Attached an observer.&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.observers.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> detach(observer: Observer): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> observerIndex = <span class="built_in">this</span>.observers.indexOf(observer);</span><br><span class="line">        <span class="keyword">if</span> (observerIndex === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Subject: Nonexistent observer.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.observers.splice(observerIndex, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Subject: Detached an observer.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Trigger an update in each subscriber.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Subject: Notifying observers...&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> observer <span class="keyword">of</span> <span class="built_in">this</span>.observers) &#123;</span><br><span class="line">            observer.update(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Usually, the subscription logic is only a fraction of what a Subject can</span></span><br><span class="line"><span class="comment">     * really do. Subjects commonly hold some important business logic, that</span></span><br><span class="line"><span class="comment">     * triggers a notification method whenever something important is about to</span></span><br><span class="line"><span class="comment">     * happen (or after it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> someBusinessLogic(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;\nSubject: I\&#x27;m doing something important.&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">10</span> + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Subject: My state has just changed to: <span class="subst">$&#123;<span class="built_in">this</span>.state&#125;</span>`</span>);</span><br><span class="line">        <span class="built_in">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The Observer interface declares the update method, used by subjects.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Observer &#123;</span><br><span class="line">    <span class="comment">// Receive update from subject.</span></span><br><span class="line">    update(subject: Subject): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Concrete Observers react to the updates issued by the Subject they had been</span></span><br><span class="line"><span class="comment"> * attached to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverA</span> <span class="title">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> update(subject: Subject): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subject <span class="keyword">instanceof</span> ConcreteSubject &amp;&amp; subject.state &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteObserverA: Reacted to the event.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserverB</span> <span class="title">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> update(subject: Subject): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subject <span class="keyword">instanceof</span> ConcreteSubject &amp;&amp; (subject.state === <span class="number">0</span> || subject.state &gt;= <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;ConcreteObserverB: Reacted to the event.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The client code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer1 = <span class="keyword">new</span> ConcreteObserverA();</span><br><span class="line">subject.attach(observer1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer2 = <span class="keyword">new</span> ConcreteObserverB();</span><br><span class="line">subject.attach(observer2);</span><br><span class="line"></span><br><span class="line">subject.someBusinessLogic();</span><br><span class="line">subject.someBusinessLogic();</span><br><span class="line"></span><br><span class="line">subject.detach(observer2);</span><br><span class="line"></span><br><span class="line">subject.someBusinessLogic();</span><br></pre></td></tr></table></figure><p><strong>Output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Subject: Attached an observer.</span><br><span class="line">Subject: Attached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 6</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverB: Reacted to the event.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 1</span><br><span class="line">Subject: Notifying observers...</span><br><span class="line">ConcreteObserverA: Reacted to the event.</span><br><span class="line">Subject: Detached an observer.</span><br><span class="line"></span><br><span class="line">Subject: I&#39;m doing something important.</span><br><span class="line">Subject: My state has just changed to: 5</span><br><span class="line">Subject: Notifying observers...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tags-9"><p><strong>概念示例</strong></p><p>在电商网站中， 商品时不时地会出现缺货情况。 可能会有客户对于缺货的特定商品表现出兴趣。 这一问题有三种解决方案：</p><ol><li>客户以一定的频率查看商品的可用性。</li><li>电商网站向客户发送有库存的所有新商品。</li><li>客户只订阅其感兴趣的特定商品， 商品可用时便会收到通知。 同时， 多名客户也可订阅同一款产品。</li></ol><p>选项 3 是最具可行性的， 这其实就是观察者模式的思想。 观察者模式的主要组成部分有：</p><ul><li>会在有任何事发生时发布事件的主体。</li><li>订阅了主体事件并会在事件发生时收到通知的观察者。</li></ul><p><strong>subject.go:</strong> 主体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> subject <span class="keyword">interface</span> &#123;</span><br><span class="line">    register(Observer observer)</span><br><span class="line">    deregister(Observer observer)</span><br><span class="line">    notifyAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>item.go:</strong> 具体主体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> item <span class="keyword">struct</span> &#123;</span><br><span class="line">    observerList []observer</span><br><span class="line">    name         <span class="keyword">string</span></span><br><span class="line">    inStock      <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newItem</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">item</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;item&#123;</span><br><span class="line">        name: name,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *item)</span> <span class="title">updateAvailability</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Item %s is now in stock\n&quot;</span>, i.name)</span><br><span class="line">    i.inStock = <span class="literal">true</span></span><br><span class="line">    i.notifyAll()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *item)</span> <span class="title">register</span><span class="params">(o observer)</span></span> &#123;</span><br><span class="line">    i.observerList = <span class="built_in">append</span>(i.observerList, o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *item)</span> <span class="title">deregister</span><span class="params">(o observer)</span></span> &#123;</span><br><span class="line">    i.observerList = removeFromslice(i.observerList, o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *item)</span> <span class="title">notifyAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, observer := <span class="keyword">range</span> i.observerList &#123;</span><br><span class="line">        observer.update(i.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeFromslice</span><span class="params">(observerList []observer, observerToRemove observer)</span> []<span class="title">observer</span></span> &#123;</span><br><span class="line">    observerListLength := <span class="built_in">len</span>(observerList)</span><br><span class="line">    <span class="keyword">for</span> i, observer := <span class="keyword">range</span> observerList &#123;</span><br><span class="line">        <span class="keyword">if</span> observerToRemove.getID() == observer.getID() &#123;</span><br><span class="line">            observerList[observerListLength<span class="number">-1</span>], observerList[i] = observerList[i], observerList[observerListLength<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> observerList[:observerListLength<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> observerList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>observer.go:</strong> 观察者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> observer <span class="keyword">interface</span> &#123;</span><br><span class="line">    update(<span class="keyword">string</span>)</span><br><span class="line">    getID() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>customer.go:</strong> 具体观察者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customer <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customer)</span> <span class="title">update</span><span class="params">(itemName <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending email to customer %s for item %s\n&quot;</span>, c.id, itemName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *customer)</span> <span class="title">getID</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.go:</strong> 客户端代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    shirtItem := newItem(<span class="string">&quot;Nike Shirt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    observerFirst := &amp;customer&#123;id: <span class="string">&quot;abc@gmail.com&quot;</span>&#125;</span><br><span class="line">    observerSecond := &amp;customer&#123;id: <span class="string">&quot;xyz@gmail.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    shirtItem.register(observerFirst)</span><br><span class="line">    shirtItem.register(observerSecond)</span><br><span class="line"></span><br><span class="line">    shirtItem.updateAvailability()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output.txt:</strong> 执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Item Nike Shirt is now in stock</span><br><span class="line">Sending email to customer abc@gmail.com for item Nike Shirt</span><br><span class="line">Sending email to customer xyz@gmail.com for item Nike Shirt</span><br></pre></td></tr></table></figure><p><em>根据： <a href="https://golangbyexample.com/observer-design-pattern-golang/">Golang By Example</a></em></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://refactoringguru.cn/design-patterns/observer&quot;&gt;https://refactoringguru.cn/design-patterns/observer&lt;/a&gt;&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/categories/pattern/"/>
    
    
      <category term="pattern" scheme="http://wangyangyangisme.github.io/tags/pattern/"/>
    
  </entry>
  
</feed>
